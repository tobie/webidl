<pre class="metadata">
Title: Web IDL (Second Edition)
Shortname: WebIDL
Level: 2
Status: ED
Group: webplatform
!Participate: <a href="https://github.com/heycam/webidl">GitHub</a> (<a href="https://github.com/heycam/webidl/issues/new">new issue</a>, <a href="https://github.com/heycam/webidl/issues">open issues</a>, <a href="https://www.w3.org/Bugs/Public/buglist.cgi?product=WebAppsWG&amp;component=WebIDL&amp;resolution=---">legacy bug tracker</a>)
ED: https://heycam.github.io/webidl/
TR: http://www.w3.org/TR/WebIDL/
Previous Version: http://www.w3.org/TR/2012/CR-WebIDL-20120419/
Previous Version: http://www.w3.org/TR/2012/WD-WebIDL-20120207/
Previous Version: http://www.w3.org/TR/2011/WD-WebIDL-20110927/
Previous Version: http://www.w3.org/TR/2011/WD-WebIDL-20110712/
Previous Version: http://www.w3.org/TR/2010/WD-WebIDL-20101021/
Previous Version: http://www.w3.org/TR/2008/WD-WebIDL-20081219/
Previous Version: http://www.w3.org/TR/2008/WD-WebIDL-20080829/
Previous Version: http://www.w3.org/TR/2008/WD-DOM-Bindings-20080410/
Previous Version: http://www.w3.org/TR/2007/WD-DOM-Bindings-20071017/
Editor: Cameron McCormack, Mozilla Corporation, http://mcc.id.au/, cam@mcc.id.au
Editor: Boris Zbarsky, Mozilla Corporation, bzbarsky@mit.edu
Abstract: This document defines an interface definition language, Web IDL,
Abstract: that can be used to describe interfaces that are intended to be
Abstract: implemented in web browsers. Web IDL is an IDL variant with a
Abstract: number of features that allow the behavior of common script objects in
Abstract: the web platform to be specified more readily. How interfaces
Abstract: described with Web IDL correspond to constructs within ECMAScript
Abstract: execution environments is also detailed in this document.
Abstract: It is expected that this document acts
Abstract: as a guide to implementors of already-published specifications,
Abstract: and that newly published specifications reference this
Abstract: document to ensure conforming implementations of interfaces
Abstract: are interoperable.
Ignored Vars: callback, op, ownDesc, exampleVariableName, target, f, g
Boilerplate: omit issues-index
</pre>

<pre class="anchors">
urlPrefix: http://www.unicode.org/glossary/
    type: dfn
        url: unicode_scalar_value
            text: Unicode scalar value
            text: Unicode scalar values
urlPrefix: https://tc39.github.io/ecma262/
    type: dfn
        text: NumericLiteral; url: sec-literals-numeric-literals
        text: ECMAScript error objects; url: sec-error-objects
        text: ToBoolean; url: sec-toboolean
        text: ToNumber; url: sec-tonumber
        text: ToUint16; url: sec-touint16
        text: ToInt32; url: sec-toint32
        text: ToUint32; url: sec-touint32
        text: ToString; url: sec-tostring
        text: ToObject; url: sec-toobject
        text: IsAccessorDescriptor; url: sec-isaccessordescriptor
        text: IsDataDescriptor; url: sec-isdatadescriptor
        url: sec-ecmascript-data-types-and-values
            text: Type
            text: Type(x)
        url: sec-algorithm-conventions
            text: sign
            text: floor
            text: abs
            text: modulo
            text: !
            text: ?
            text: ECMA-262 section 5.2
        text: element; url: sec-ecmascript-language-types-string-type
        url: sec-iscallable
            text: IsCallable
            text: callable
        url: sec-well-known-intrinsic-objects
            text: %ArrayPrototype%
            text: %ArrayProto_values%
            text: %MapPrototype%
            text: %ObjectPrototype%
            text: %SetPrototype%
            text: %Error%
            text: %ErrorPrototype%
            text: %FunctionPrototype%
            text: %ObjProto_toString%
            text: %IteratorPrototype%
        text: %Promise%; url: sec-promise-constructor
        text: Property Descriptor; url: sec-property-descriptor-specification-type
        text: array index; url: sec-array-exotic-objects
        text: default [[GetOwnProperty]] internal method; url: sec-ordinary-object-internal-methods-and-internal-slots-getownproperty-p
        text: default [[DefineOwnProperty]] internal method; url: sec-ordinary-object-internal-methods-and-internal-slots-defineownproperty-p-desc
        text: default [[Set]] internal method; url: sec-ordinary-object-internal-methods-and-internal-slots-set-p-v-receiver
        text: equally close values; url: sec-ecmascript-language-types-number-type
        text: internal slot; url: sec-object-internal-methods-and-internal-slots
        text: JavaScript execution context stack; url: execution-context-stack
        text: running JavaScript execution context; url: running-execution-context
        text: ReturnIfAbrupt; url: sec-returnifabrupt
        text: GetIterator; url: sec-getiterator
        text: IteratorStep; url: sec-iteratorstep
        text: NormalCompletion; url: sec-normalcompletion
        text: IteratorValue; url: sec-iteratorvalue
        url: sec-well-known-symbols
            text: @@iterator
            text: @@toStringTag
        text: CreateArrayIterator; url: sec-createarrayiterator
        text: CreateIterResultObject; url: sec-createiterresultobject
        text: CreateMapIterator; url: sec-createmapiterator
        text: CreateSetIterator; url: sec-createsetiterator
        text: ArrayCreate; url: sec-arraycreate
        text: CreateDataProperty; url: sec-createdataproperty
        text: DetachArrayBuffer; url: sec-detacharraybuffer
        text: IsDetachedBuffer; url: sec-isdetachedbuffer
        text: SetIntegrityLevel; url: sec-setintegritylevel
        url: sec-array-iterator-objects
            text: array iterator object
            text: array iterator objects
        text: Call; url: sec-call
        text: Get; url: sec-get-o-p
        text: Set; url: sec-set-o-p-v-throw
        text: IsConstructor; url: sec-isconstructor
        text: Construct; url: sec-construct
        text: DefinePropertyOrThrow; url: sec-definepropertyorthrow
        url: sec-code-realms
            text: Realm
            text: ECMAScript global environment
        text: Completion; url: sec-completion-record-specification-type
        text: sections 9.1; url: sec-ordinary-object-internal-methods-and-internal-slots
        text: 9.3.1; url: sec-built-in-function-objects-call-thisargument-argumentslist
        text: ECMA-262 section 9.1.8; url: sec-ordinary-object-internal-methods-and-internal-slots-get-p-receiver
        text: ECMA-262 section 19.2.2.3; url: sec-function-@@create
        text: ECMA-262 section 19.2.3.8; url: sec-function.prototype-@@hasinstance
        text: the Array methods themselves; url: sec-properties-of-the-array-prototype-object
urlPrefix: http://www.ecma-international.org/ecma-262/6.0/
    type: dfn
        text: GetMethod; url: sec-getmethod
        text: @@unscopables; url: sec-well-known-symbols
urlPrefix: https://html.spec.whatwg.org/multipage/webappapis.html
    type: dfn
        text: relevant settings object
        text: relevant Realm; url: concept-relevant-realm
        text: Prepare to run script
        text: Clean up after running script
        url: concept-realm-settings-object
            text: settings object
urlPrefix: https://w3c.github.io/webappsec-secure-contexts/
    type: dfn
        text: secure context
urlPrefix: http://www.whatwg.org/specs/web-apps/current-work/multipage/webappapis.html
    type: dfn
        url: incumbent-script
            text: incumbent script
urlPrefix: https://tc39.github.io/ecma262/
    type: dfn
        text: typed arrays; url: sec-typedarray-objects
</pre>

<style>
        emu-val {
            font-weight: bold;
        }
        
        emu-nt {
            font-family: sans-serif;
            font-style: italic;
            white-space: nowrap;
        }
        
        emu-t {
            display: inline-block;
            font-weight: bold;
            white-space: nowrap;
        }
        
        emu-t a[href],
        emu-nt a[href] {
            color: inherit;
            border-bottom: 1px solid transparent;
        }
        
        emu-t a[href]:focus,
        emu-nt a[href]:focus,
        emu-t a[href]:hover,
        emu-nt a[href]:hover {
            background: #f8f8f8;
            background: rgba(75%, 75%, 75%, .25);
            border-bottom: 3px solid #707070;
            margin-bottom: -2px;
        }
        
        /* start bug fix, see: https://github.com/tobie/webidl/issues/24 */
        pre.grammar {
            padding-bottom: 1px
        }
        /* end bug fix */
        
        .syntax {
            padding: .5em;
            border: .5em;
            margin-left: 0;
            border-left-style: solid;
            page-break-inside: avoid;
            border-color: #8CCBF2;
            background: #DEF;
            overflow: auto;
        }
        
        dt p {
            display: inline;
        }
        
        .char {
            font-size: 85%
        }
</style>


<h2 id="sotd">Status of This Document</h2>

This is the Second Edition of Web IDL, branched off from the
Candidate Recommendation of the First Edition.  This Second
Edition includes new features that could not have been added
to the First Edition without delaying its progress along the
Recommendation track.

This document is produced by the
<a href="https://www.w3.org/WebPlatform/WG/">Web Platform Working Group</a>
in the W3C <a href="http://www.w3.org/Interaction/">Interaction Domain</a>.
Changes made to this document can be found in the specification’s
commit log on GitHub:
<a href="https://github.com/heycam/webidl/commits/gh-pages/index.xml">recent changes</a>,
<a href="https://github.com/heycam/webidl/commits/gh-pages/Overview.xml">older changes</a>.

There is a <a href="https://www.w3.org/Bugs/Public/buglist.cgi?query_format=advanced&amp;short_desc_type=allwordssubstr&amp;short_desc=&amp;product=WebAppsWG&amp;component=WebIDL&amp;longdesc_type=allwordssubstr&amp;longdesc=&amp;bug_file_loc_type=allwordssubstr&amp;bug_file_loc=&amp;status_whiteboard_type=allwordssubstr&amp;status_whiteboard=&amp;keywords_type=allwords&amp;keywords=&amp;bug_status=UNCONFIRMED&amp;bug_status=NEW&amp;bug_status=ASSIGNED&amp;bug_status=REOPENED&amp;emailtype1=substring&amp;email1=&amp;emailtype2=substring&amp;email2=&amp;bug_id_type=anyexact&amp;bug_id=&amp;votes=&amp;chfieldfrom=&amp;chfieldto=Now&amp;chfieldvalue=&amp;cmdtype=doit&amp;order=Reuse%20same%20sort%20as%20last%20time&amp;field0-0-0=noop&amp;type0-0-0=noop&amp;value0-0-0=">bug tracker</a>
for the specification.


<h2 id="introduction">Introduction</h2>

<i>This section is informative.</i>

Technical reports published by the W3C that include programming
language interfaces have typically been described using the
Object Management Group’s Interface Definition Language (IDL)
[[OMGIDL]].  The IDL provides a means to
describe these interfaces in a language independent manner.  Usually,
additional language binding appendices are included in such
documents which detail how the interfaces described with the IDL
correspond to constructs in the given language.

However, the bindings in these specifications for the language most
commonly used on the web, ECMAScript, are consistently specified with
low enough precision as to result in interoperability issues.  In
addition, each specification must describe the same basic information,
such as DOM interfaces described in IDL corresponding to properties
on the ECMAScript global object, or the {{unsigned long}} IDL type mapping to the <emu-val>Number</emu-val>
type in ECMAScript.

This specification defines an IDL language similar to OMG IDL
for use by specifications that define interfaces for Web APIs.  A number of extensions are
given to the IDL to support common functionality that previously must
have been written in prose.  In addition, precise language bindings
for ECMAScript Edition 6 are given.


<h3 id="conventions">Typographic conventions</h3>

The following typographic conventions are used in this document:

*   Defining instances of terms: <dfn id="dfn-example-term">example term</dfn>
*   Links to terms defined in this document: [=example term=]
*   Links to terms defined in other documents: [=example term=]
*   Grammar symbols: <emu-t>ExampleGrammarSymbol</emu-t>
*   IDL and ECMAScript types: <code class="idl">ExampleType</code>
*   Code snippets: <code>a = b + obj.f()</code>
*   Unicode characters: <span class="char">U+0030 DIGIT ZERO ("0")</span>
*   Extended attributes: <span class="xattr">[ExampleExtendedAttribute]</span>
*   Variable names in prose and algorithms: |exampleVariableName|.
*   Algorithms use <a href="https://tc39.github.io/ecma262/#sec-algorithm-conventions">the conventions of the ECMAScript specification</a>, including the ! and ? notation for unwrapping completion records.
*   IDL informal syntax examples:
    <pre highlight="idl" class="syntax">
        interface identifier {
          interface-members…
        };
    </pre>
    
    (Red text is used to highlight specific parts of the syntax discussed in surrounding prose.)
*   IDL grammar snippets:
    <pre class="grammar no-index">
        ExampleGrammarSymbol :
            OtherSymbol "sometoken"
            AnotherSymbol
            ε  // nothing
    </pre>
*   Non-normative notes:
    
    Note: This is a note.
    
*   Non-normative examples:
    <div class="example">
        
        This is an example.
    </div>
*   Normative warnings:
    
    Advisement: This is a warning.
    
*   Code blocks:
    <pre class="idl-example example">
        // This is an IDL code block.
        interface Example {
          attribute long something;
        };
    </pre>
    <pre highlight="js">
        // This is an ECMAScript code block.
        window.onload = function() { window.alert("loaded"); };
    </pre>


<h2 id="conformance">Conformance</h2>

Everything in this specification is normative except for diagrams,
examples, notes and sections marked as being informative.

The keywords “must”,
“must not”,
“required”,
“shall”,
“shall not”,
“should”,
“should not”,
“recommended”,
“may” and
“optional” in this document are to be
interpreted as described in
<cite><a href="http://tools.ietf.org/html/rfc2119">Key words for use in RFCs to
Indicate Requirement Levels</a></cite>
[[!RFC2119]].

The following conformance classes are defined by this specification:

 :  <dfn id="dfn-conforming-set-of-idl-fragments" export>conforming set of IDL fragments</dfn>
 :: A set of [=IDL fragments=] is considered
    to be a [=conforming set of IDL fragments=] if, taken together, they satisfy all of the
    must-,
    required- and shall-level
    criteria in this specification that apply to IDL fragments.
 :  <dfn id="dfn-conforming-implementation" export>conforming implementation</dfn>
 :: A user agent is considered to be a
    [=conforming implementation=]
    relative to a [=conforming set of IDL fragments=] if it satisfies all of the must-,
    required- and shall-level
    criteria in this specification that apply to implementations for all language
    bindings that the user agent supports.
 :  <dfn id="dfn-conforming-ecmascript-implementation" export>conforming ECMAScript implementation</dfn>
 :: A user agent is considered to be a
    [=conforming ECMAScript implementation=]
    relative to a [=conforming set of IDL fragments=] if it satisfies all of the must-,
    required- and shall-level
    criteria in this specification that apply to implementations for the ECMAScript
    language binding.


<h2 id="idl">Interface definition language</h2>

This section describes a language, <em>Web IDL</em>, which can be used to define
interfaces for APIs in the Web platform.  A specification that defines Web APIs
can include one or more <dfn id="dfn-idl-fragment" export lt="IDL fragment">IDL fragments</dfn> that
describe the interfaces (the state and behavior that objects can exhibit)
for the APIs defined by that specification.
An [=IDL fragment=] is
a sequence of definitions that matches the <emu-nt><a href="#prod-Definitions">Definitions</a></emu-nt> grammar symbol.
The set of [=IDL fragments=] that
an implementation supports is not ordered.
See [[#idl-grammar]] for the complete grammar and an explanation of the notation used.

The different kinds of <dfn id="dfn-definition">definitions</dfn> that can appear in an
[=IDL fragment=] are:
[=interfaces=],
[=partial interface|partial interface definitions=],
[=dictionary|dictionaries=],
[=partial dictionary|partial dictionary definitions=],
[=typedefs=] and
[=implements statements=].
These are all defined in the following sections.

Each [=definition=]
(matching <emu-nt><a href="#prod-Definition">Definition</a></emu-nt>)
can be preceded by a list of [=extended attributes=] (matching
<emu-nt><a href="#prod-ExtendedAttributeList">ExtendedAttributeList</a></emu-nt>),
which can control how the definition will be handled in language bindings.
The extended attributes defined by this specification that are language binding
agnostic are discussed in [[#idl-extended-attributes]],
while those specific to the ECMAScript language binding are discussed
in [[#es-extended-attributes]].

<pre highlight="idl" class="syntax">
    [extended-attributes]
    interface identifier {
      interface-members…
    };
</pre>

<pre class="grammar" id="prod-Definitions">
    Definitions :
        ExtendedAttributeList Definition Definitions
        ε
</pre>

<pre class="grammar" id="prod-Definition">
    Definition :
        CallbackOrInterface
        Partial
        Dictionary
        Enum
        Typedef
        ImplementsStatement
</pre>

<pre class="grammar" id="prod-CallbackOrInterface">
    CallbackOrInterface :
        "callback" CallbackRestOrInterface
        Interface
</pre>

<div class="example">
    
    The following is an example of an [=IDL fragment=].
    
    <pre class="idl-example">
        interface Paint { };
        
        interface SolidColor : Paint {
          attribute double red;
          attribute double green;
          attribute double blue;
        };
        
        interface Pattern : Paint {
          attribute DOMString imageURL;
        };
        
        [Constructor]
        interface GraphicalWindow {
          readonly attribute unsigned long width;
          readonly attribute unsigned long height;
        
          attribute Paint currentPaint;
        
          void drawRectangle(double x, double y, double width, double height);
        
          void drawText(double x, double y, DOMString text);
        };
    </pre>
    
    Here, four [=interfaces=]
    are being defined.
    The <code class="idl">GraphicalWindow</code> interface has two
    [=read only=] [=attributes=],
    one writable attribute, and two [=operations=]
    defined on it.  Objects that implement the <code class="idl">GraphicalWindow</code> interface
    will expose these attributes and operations in a manner appropriate to the
    particular language being used.
    
    In ECMAScript, the attributes on the IDL interfaces will be exposed as accessor
    properties and the operations as <emu-val>Function</emu-val>-valued
    data properties on a prototype object for all <code class="idl">GraphicalWindow</code>
    objects; each ECMAScript object that implements <code class="idl">GraphicalWindow</code>
    will have that prototype object in its prototype chain.
    
    The [{{Constructor}}] that appears on <code class="idl">GraphicalWindow</code>
    is an [=extended attribute=].
    This extended attribute causes a constructor to exist in ECMAScript implementations,
    so that calling <code>new GraphicalWindow()</code> would return a new object
    that implemented the interface.
    
</div>


<h3 id="idl-names">Names</h3>

Every [=interface=],
[=partial interface|partial interface definition=],
[=dictionary=],
[=partial dictionary|partial dictionary definition=],
[=enumeration=],
[=callback function=] and
[=typedef=] (together called <dfn id="dfn-named-definition" export lt="named definition">named definitions</dfn>)
and every [=constant=],
[=attribute=],
and [=dictionary member=] has an
<dfn id="dfn-identifier" export>identifier</dfn>, as do some
[=operations=].
The identifier is determined by an
<emu-nt><a href="#prod-identifier">identifier</a></emu-nt> token somewhere
in the declaration:

*   For [=named definitions=],
    the <emu-nt><a href="#prod-identifier">identifier</a></emu-nt> token that appears
    directly after the <code>interface</code>,
    <code>dictionary</code>, <code>enum</code>
    or <code>callback</code> keyword
    determines the identifier of that definition.
    <pre highlight="idl" class="syntax">
        interface interface-identifier { interface-members… };
        partial interface interface-identifier { interface-members… };
        dictionary dictionary-identifier { dictionary-members… };
        partial dictionary dictionary-identifier { dictionary-members… };
        enum enumeration-identifier { enumeration-values… };
        callback callback-identifier = callback-signature;
    </pre>
*   For [=attributes=],
    [=typedefs=]
    and [=dictionary members=],
    the final <emu-nt><a href="#prod-identifier">identifier</a></emu-nt> token before the
    semicolon at the end of the declaration determines the identifier.
    <pre highlight="idl" class="syntax">
        interface identifier {
          attribute type attribute-identifier;
        };
        
        typedef type typedef-identifier;
        
        dictionary identifier {
          type dictionary-member-identifier;
        };
    </pre>
*   For [=constants=],
    the <emu-nt><a href="#prod-identifier">identifier</a></emu-nt> token before the
    equals sign determines the identifier.
    <pre highlight="idl" class="syntax">const type constant-identifier = value;</pre>
*   For [=operations=], the
    <emu-nt><a href="#prod-identifier">identifier</a></emu-nt> token that appears
    after the return type but before the opening parenthesis (that is,
    one that is matched as part of the <emu-nt><a href="#prod-OptionalIdentifier">OptionalIdentifier</a></emu-nt>
    grammar symbol in an <emu-nt><a href="#prod-OperationRest">OperationRest</a></emu-nt>) determines the identifier of the operation.  If
    there is no such <emu-nt><a href="#prod-identifier">identifier</a></emu-nt> token,
    then the operation does not have an identifier.
    <pre highlight="idl" class="syntax">return-type operation-identifier(arguments…);</pre>

Note: Operations can have no identifier when they are being used to declare a
<a href="#idl-special-operations">special kind of operation</a>, such as a getter or setter.

For all of these constructs, the [=identifier=]
is the value of the <emu-nt><a href="#prod-identifier">identifier</a></emu-nt> token with any leading
<span class="char">U+005F LOW LINE ("_")</span> character (underscore) removed.

Note: A leading <span class="char">"_"</span> is used to escape an identifier from looking
like a reserved word so that, for example, an interface named “interface” can be
defined.  The leading <span class="char">"_"</span> is dropped to unescape the
identifier.

Operation arguments can take a slightly wider set of identifiers.  In an operation
declaration, the identifier of an argument is specified immediately after its
type and is given by either an <emu-nt><a href="#prod-identifier">identifier</a></emu-nt>
token or by one of the keywords that match the <emu-nt><a href="#prod-ArgumentNameKeyword">ArgumentNameKeyword</a></emu-nt>
symbol.  If one of these keywords is used, it need not be escaped with a leading
underscore.

<pre highlight="idl" class="syntax">return-type operation-identifier(argument-type argument-identifier, …);</pre>

<pre class="grammar" id="prod-ArgumentNameKeyword">
    ArgumentNameKeyword :
        "attribute"
        "callback"
        "const"
        "deleter"
        "dictionary"
        "enum"
        "getter"
        "implements"
        "inherit"
        "interface"
        "iterable"
        "legacycaller"
        "maplike"
        "partial"
        "required"
        "serializer"
        "setlike"
        "setter"
        "static"
        "stringifier"
        "typedef"
        "unrestricted"
</pre>

If an <emu-nt><a href="#prod-identifier">identifier</a></emu-nt> token is used, then the
[=identifier=] of the operation argument
is the value of that token with any leading
<span class="char">U+005F LOW LINE ("_")</span> character (underscore) removed.
If instead one of the <emu-nt><a href="#prod-ArgumentNameKeyword">ArgumentNameKeyword</a></emu-nt>
keyword token is used, then the [=identifier=] of the operation argument
is simply that token.

The [=identifier=] of any of the abovementioned
IDL constructs must not be “constructor”,
“toString”, “toJSON”,
or begin with a <span class="char">U+005F LOW LINE ("_")</span> character.  These
are known as <dfn id="dfn-reserved-identifier" export>reserved identifiers</dfn>.

Note: Further restrictions on identifier names for particular constructs may be made
in later sections.

Within the set of [=IDL fragments=]
that a given implementation supports,
the [=identifier=] of every
[=interface=],
[=dictionary=],
[=enumeration=],
[=callback function=] and
[=typedef=]
must not
be the same as the identifier of any other
[=interface=],
[=dictionary=],
[=enumeration=],
[=callback function=] or
[=typedef=].

Within an [=IDL fragment=], a reference
to a [=definition=] need not appear after
the declaration of the referenced definition.  References can also be made
across [=IDL fragments=].

<div class="example">
    
    Therefore, the following [=IDL fragment=] is valid:
    
    <pre class="idl-example">
        interface B : A {
          void f(SequenceOfLongs x);
        };
        
        interface A {
        };
        
        typedef sequence&lt;long&gt; SequenceOfLongs;
    </pre>
</div>

<div class="example">
    
    The following [=IDL fragment=]
    demonstrates how [=identifiers=]
    are given to definitions and [=interface members=].
    
    <pre class="idl-example">
        // Typedef identifier: "number"
        typedef double number;
        
        // Interface identifier: "System"
        interface System {
        
          // Operation identifier:          "createObject"
          // Operation argument identifier: "interface"
          object createObject(DOMString _interface);
        
          // Operation argument identifier: "interface"
          sequence&lt;object&gt; getObjects(DOMString interface);
        
          // Operation has no identifier; it declares a getter.
          getter DOMString (DOMString keyName);
        };
        
        // Interface identifier: "TextField"
        interface TextField {
        
          // Attribute identifier: "const"
          attribute boolean _const;
        
          // Attribute identifier: "value"
          attribute DOMString? _value;
        };
    </pre>
    
    Note that while the second [=attribute=]
    on the <code class="idl">TextField</code> [=interface=]
    need not have been escaped with an underscore (because “value” is
    not a keyword in the IDL grammar), it is still unescaped
    to obtain the attribute’s [=identifier=].
    
</div>


<h3 id="idl-interfaces">Interfaces</h3>

[=IDL fragments=] are used to
describe object oriented systems.  In such systems, objects are entities
that have identity and which are encapsulations of state and behavior.
An <dfn id="dfn-interface" export>interface</dfn> is a definition (matching
<emu-nt><a href="#prod-Interface">Interface</a></emu-nt> or
<emu-t>callback</emu-t> <emu-nt><a href="#prod-Interface">Interface</a></emu-nt>) that declares some
state and behavior that an object implementing that interface will expose.

<pre highlight="idl" class="syntax">
    interface identifier {
      interface-members…
    };
</pre>

An interface is a specification of a set of
<dfn id="dfn-interface-member" export lt="interface member">interface members</dfn>
(matching <emu-nt><a href="#prod-InterfaceMembers">InterfaceMembers</a></emu-nt>),
which are the [=constants=],
[=attributes=],
[=operations=] and
other declarations that appear between the braces in the interface declaration.
Attributes describe the state that an object
implementing the interface will expose, and operations describe the
behaviors that can be invoked on the object.  Constants declare
named constant values that are exposed as a convenience to users
of objects in the system.

Interfaces in Web IDL describe how objects that implement the
interface behave.  In bindings for object oriented languages, it is
expected that an object that implements a particular IDL interface
provides ways to inspect and modify the object's state and to
invoke the behavior described by the interface.

An interface can be defined to <dfn id="dfn-inherit" for="interface" export>inherit</dfn> from another interface.
If the identifier of the interface is followed by a
<span class="char">U+003A COLON (":")</span> character
and an [=identifier=],
then that identifier identifies the inherited interface.
An object that implements an interface that inherits from another
also implements that inherited interface.  The object therefore will also
have members that correspond to the interface members from the inherited interface.

<pre highlight="idl" class="syntax">
    interface identifier : identifier-of-inherited-interface {
      interface-members…
    };
</pre>

The order that members appear in has no significance except in the
case of <a href="#idl-overloading">overloading</a>.

Interfaces may specify an interface member that has the same name as
one from an inherited interface.  Objects that implement the derived
interface will expose the member on the derived interface.  It is
language binding specific whether the overridden member can be
accessed on the object.

<div class="example">
    
    Consider the following two interfaces.
    
    <pre class="idl-example">
        interface A {
          void f();
          void g();
        };
        
        interface B : A {
          void f();
          void g(DOMString x);
        };
    </pre>
    
    In the ECMAScript language binding, an instance of <code class="idl">B</code>
    will have a prototype chain that looks like the following:
    
    <pre>
        [Object.prototype: the Object prototype object]
               ↑
          [A.prototype: interface prototype object for A]
               ↑
          [B.prototype: interface prototype object for B]
               ↑
          [instanceOfB]
    </pre>
    
    Calling <code>instanceOfB.f()</code> in ECMAScript will invoke the f defined
    on <code class="idl">B</code>.  However, the f from <code class="idl">A</code>
    can still be invoked on an object that implements <code class="idl">B</code> by
    calling <code>A.prototype.f.call(instanceOfB)</code>.
    
</div>

The <dfn id="dfn-inherited-interfaces" export>inherited interfaces</dfn> of
a given interface |A| is the set of all interfaces that |A|
inherits from, directly or indirectly.  If |A| does not [=inherit=]
from another interface, then the set is empty.  Otherwise, the set
includes the interface |B| that |A| [=inherits=]
from and all of |B|’s [=inherited interfaces=].

An interface must not be declared such that
its inheritance hierarchy has a cycle.  That is, an interface
|A| cannot inherit from itself, nor can it inherit from another
interface |B| that inherits from |A|, and so on.

Note that general multiple inheritance of interfaces is not supported, and
objects also cannot implement arbitrary sets of interfaces.
Objects can be defined to implement a single given interface |A|,
which means that it also implements all of |A|’s
[=inherited interfaces=].  In addition,
an <a href="#idl-implements-statements">implements statement</a> can be
used to define that objects implementing an interface will always
also implement another interface.

Each interface member can be preceded by a list of [=extended attributes=] (matching
<emu-nt><a href="#prod-ExtendedAttributeList">ExtendedAttributeList</a></emu-nt>),
which can control how the interface member will be handled in language bindings.

<pre highlight="idl" class="syntax">
    interface identifier {
    
      [extended-attributes]
      const type identifier = value;
    
      [extended-attributes]
      attribute type identifier;
    
      [extended-attributes]
      return-type identifier(arguments…);
    };
</pre>

A <dfn id="dfn-callback-interface" export>callback interface</dfn> is
an [=interface=]
that uses the <code>callback</code> keyword at the start of
its definition.  Callback interfaces are ones that can be
implemented by [=user objects=]
and not by [=platform objects=],
as described in [[#idl-objects]].

<pre highlight="idl" class="syntax">
    callback interface identifier {
      interface-members…
    };
</pre>

Note: See also the similarly named [=callback function=] definition.

[=Callback interfaces=]
must not [=inherit=]
from any non-callback interfaces, and non-callback interfaces must not
inherit from any callback interfaces.
Callback interfaces must not have any
[=consequential interfaces=].

[=Static attributes=] and
[=static operations=] must not
be defined on a [=callback interface=].

<div class="advisement">
    
    Specification authors should not define
    [=callback interfaces=]
    that have only a single [=operation=],
    unless required to describe the requirements of existing APIs.
    Instead, a [=callback function=] should be used.
    
    The definition of <code class="idl">EventListener</code> as a
    [=callback interface=]
    is an example of an existing API that needs to allow
    [=user objects=] with a
    given property (in this case “handleEvent”) to be considered to implement the interface.
    For new APIs, and those for which there are no compatibility concerns,
    using a [=callback function=] will allow
    only a <emu-val>Function</emu-val> object (in the ECMAScript
    language binding).
    
</div>

<p class="issue">
    Perhaps this warning shouldn't apply if you are planning to extend the callback
    interface in the future.  That's probably a good reason to start off with a single
    operation callback interface.
</p>

<p class="issue">
    I think we need to support operations not being implemented on a given
    user object implementing a callback interface.  If specs extending an existing
    callback interface, we probably want to be able to avoid calling the
    operations that aren't implemented (and having some default behavior instead).
    So we should perhaps define a term that means whether the operation is
    implemented, which in the ECMAScript binding would correspond to checking
    for the property's existence.
</p>

<div class="note">
    
    Specification authors wanting to define APIs that take ECMAScript objects
    as “property bag” like function arguments are suggested to use
    <a href="#idl-dictionaries">dictionary types</a> rather than
    [=callback interfaces=].
    
    For example, instead of this:
    
    <pre class="idl-example example">
        callback interface Options {
          attribute DOMString? option1;
          attribute DOMString? option2;
          attribute long? option3;
        };
        
        interface A {
          void doTask(DOMString type, Options options);
        };
    </pre>
    
    to be used like this:
    
    <pre highlight="js">
        var a = getA();  // Get an instance of A.
        
        a.doTask("something", { option1: "banana", option3: 100 });
    </pre>
    
    instead write the following:
    
    <pre class="idl-example example">
        dictionary Options {
          DOMString? option1;
          DOMString? option2;
          long? option3;
        };
        
        interface A {
          void doTask(DOMString type, Options options);
        };
    </pre>
</div>

The IDL for interfaces can be split into multiple parts by using
<dfn id="dfn-partial-interface" export>partial interface</dfn> definitions
(matching <emu-t>partial</emu-t> <emu-nt><a href="#prod-PartialInterface">PartialInterface</a></emu-nt>).
The [=identifier=] of a partial
interface definition must be the same
as the identifier of an interface definition.  All of
the members that appear on each of the partial interfaces are considered to be
members of the interface itself.

<pre highlight="idl" class="syntax">
    interface SomeInterface {
      interface-members…
    };
    
    partial interface SomeInterface {
      interface-members…
    };
</pre>

Note: Partial interface definitions are intended for use as a specification
editorial aide, allowing the definition of an interface to be separated
over more than one section of the document, and sometimes multiple documents.

The order of appearance of an [=interface=]
definition and any of its [=partial interface=]
definitions does not matter.

Note: A partial interface definition cannot specify that the interface
[=inherits=] from another interface.
Inheritance must be specified on the original [=interface=]
definition.

[=Extended attributes=] can be specified on
[=partial interface=] definitions, with some
limitations.  The following extended attributes must not
be specified on partial interface definitions:
[{{Constructor}}],
[{{ImplicitThis}}],
[{{LegacyArrayClass}}],
[{{NamedConstructor}}],
[{{NoInterfaceObject}}].

Note: The above list of [=extended attributes=]
is all of those defined in this document that are applicable to
[=interfaces=] except for
[{{Exposed}}],
[{{Global}}],
[{{OverrideBuiltins}}],
[{{PrimaryGlobal}}],
[{{SecureContext}}] and
[{{Unforgeable}}].

Any [=extended attribute=] specified
on a [=partial interface=] definition
is considered to appear on the [=interface=]
itself.

The relevant language binding determines how interfaces correspond to constructs
in the language.

The following extended attributes are applicable to interfaces:
[{{Constructor}}],
[{{Exposed}}],
[{{Global}}],
[{{ImplicitThis}}],
[{{LegacyArrayClass}}],
[{{NamedConstructor}}],
[{{NoInterfaceObject}}],
[{{OverrideBuiltins}}],
[{{PrimaryGlobal}}],
[{{SecureContext}}],
[{{Unforgeable}}].

<div data-fill-with="grammar-CallbackOrInterface"></div>

<pre class="grammar" id="prod-CallbackRestOrInterface">
    CallbackRestOrInterface :
        CallbackRest
        Interface
</pre>

<pre class="grammar" id="prod-Interface">
    Interface :
        "interface" identifier Inheritance "{" InterfaceMembers "}" ";"
</pre>

<pre class="grammar" id="prod-Partial">
    Partial :
        "partial" PartialDefinition
</pre>

<pre class="grammar" id="prod-PartialDefinition">
    PartialDefinition :
        PartialInterface
        PartialDictionary
</pre>

<pre class="grammar" id="prod-PartialInterface">
    PartialInterface :
        "interface" identifier "{" InterfaceMembers "}" ";"
</pre>

<pre class="grammar" id="prod-InterfaceMembers">
    InterfaceMembers :
        ExtendedAttributeList InterfaceMember InterfaceMembers
        ε
</pre>

<pre class="grammar" id="prod-InterfaceMember">
    InterfaceMember :
        Const
        Operation
        Serializer
        Stringifier
        StaticMember
        Iterable
        ReadOnlyMember
        ReadWriteAttribute
        ReadWriteMaplike
        ReadWriteSetlike
</pre>

<pre class="grammar" id="prod-Inheritance">
    Inheritance :
        ":" identifier
        ε
</pre>

<div class="example">
    
    The following [=IDL fragment=]
    demonstrates the definition of two mutually referential [=interfaces=].
    Both <code class="idl">Human</code> and <code class="idl">Dog</code>
    inherit from <code class="idl">Animal</code>.  Objects that implement
    either of those two interfaces will thus have a <code>name</code> attribute.
    
    <pre class="idl-example">
        interface Animal {
          attribute DOMString name;
        };
        
        interface Human : Animal {
          attribute Dog? pet;
        };
        
        interface Dog : Animal {
          attribute Human? owner;
        };
    </pre>
</div>

<div class="example">
    
    The following [=IDL fragment=] defines
    simplified versions of a few DOM [=interfaces=], one of which
    is a [=callback interface=].
    
    <pre class="idl-example">
        interface Node {
          readonly attribute DOMString nodeName;
          readonly attribute Node? parentNode;
          Node appendChild(Node newChild);
          void addEventListener(DOMString type, EventListener listener);
        };
        
        callback interface EventListener {
          void handleEvent(Event event);
        };
    </pre>
    
    Since the <code class="idl">EventListener</code> interface is annotated
    callback interface, [=user objects=]
    can implement it:
    
    <pre highlight="js">
        var node = getNode();                                // Obtain an instance of Node.
        
        var listener = {
          handleEvent: function(event) {
            ...
          }
        };
        node.addEventListener("click", listener);            // This works.
        
        node.addEventListener("click", function() { ... });  // As does this.
    </pre>
    
    It is not possible for a user object to implement <code class="idl">Node</code>, however:
    
    <pre highlight="js">
        var node = getNode();  // Obtain an instance of Node.
        
        var newNode = {
          nodeName: "span",
          parentNode: null,
          appendChild: function(newchild) {
            ...
          },
          addEventListener: function(type, listener) {
            ...
          }
        };
        node.appendChild(newNode);  // This will throw a TypeError exception.
    </pre>
</div>


<h4 id="idl-constants">Constants</h4>

A <dfn id="dfn-constant" export>constant</dfn> is a declaration (matching
<emu-nt><a href="#prod-Const">Const</a></emu-nt>) used to bind a constant value to a name.
Constants can appear on [=interfaces=].

Advisement: Constants have in the past primarily been used to define
named integer codes in the style of an enumeration.  The Web platform
is moving away from this design pattern in favor of the use of strings.
Specification authors who wish to define constants are strongly advised to discuss
this on the <a href="mailto:public-script-coord@w3.org">public-script-coord@w3.org</a>
mailing list before proceeding.

<pre highlight="idl" class="syntax">const type identifier = value;</pre>

The [=identifier=] of a
[=constant=]
must not be the same as the identifier
of another [=interface member=]
defined on the same interface.
The identifier also must not
be “length”, “name” or “prototype”.

Note: These three names are the names of properties that exist on all
<emu-val>Function</emu-val> objects.

The type of a constant (matching <emu-nt><a href="#prod-ConstType">ConstType</a></emu-nt>)
must not be any type other than
a [=primitive type=]
or a [=nullable type|nullable=] primitive type.
If an [=identifier=] is used,
it must reference a [=typedef=]
whose type is a primitive type or a nullable primitive type.

The <emu-nt><a href="#prod-ConstValue">ConstValue</a></emu-nt> part of a
constant declaration gives the value of the constant, which can be
one of the two boolean literal tokens (<code>true</code>
and <code>false</code>),
the <code>null</code> token, an
<emu-nt><a href="#prod-integer">integer</a></emu-nt> token,
a <emu-nt><a href="#prod-float">float</a></emu-nt> token,
or one of the three special floating point constant values
(<code>-Infinity</code>, <code>Infinity</code> and <code>NaN</code>).

Note: These values – in addition to strings and the empty sequence – can also be used to specify the
[=default value|default value of a dictionary member=] or [=default value|of an optional argument=].  Note that strings and the
empty sequence <code>[]</code> cannot be used as the value of a
[=constant=].

The value of the boolean literal tokens <code>true</code> and
<code>false</code> are the IDL {{boolean}} values
<emu-val>true</emu-val> and <emu-val>false</emu-val>.

The value of an <emu-nt><a href="#prod-integer">integer</a></emu-nt> token is an integer
whose value is determined as follows:

<ol class="algorithm">
    1.  Let |S| be the sequence of characters matched by the <emu-nt><a href="#prod-integer">integer</a></emu-nt> token.
    1.  Let |sign| be −1 if |S| begins with <span class="char">U+002D HYPHEN-MINUS ("-")</span>, and 1 otherwise.
    1.  Let |base| be the base of the number based on the characters that follow the optional leading <span class="char">U+002D HYPHEN-MINUS ("-")</span> character:
        <dl class="switch">
             :  <span class="char">U+0030 DIGIT ZERO ("0")</span>, <span class="char">U+0058 LATIN CAPITAL LETTER X ("X")</span>
             :  <span class="char">U+0030 DIGIT ZERO ("0")</span>, <span class="char">U+0078 LATIN SMALL LETTER X ("x")</span>
             :: The base is 16.
             :  <span class="char">U+0030 DIGIT ZERO ("0")</span>
             :: The base is 8.
             :  <span class="char">Otherwise</span>
             :: The base is 10.
        </dl>
    1.  Let |number| be the result of interpreting all remaining characters following the optional leading <span class="char">U+002D HYPHEN-MINUS ("-")</span>
        character and any characters indicating the base as an integer specified in base |base|.
    1.  Return |sign| × |number|.
</ol>

The type of an <emu-nt><a href="#prod-integer">integer</a></emu-nt> token is the same
as the type of the constant, dictionary member or optional argument it is being used as the value of.
The value of the <emu-nt><a href="#prod-integer">integer</a></emu-nt> token must not
lie outside the valid range of values for its type, as given in
[[#idl-types]].

<p id="float-token-value">
    The value of a <emu-nt><a href="#prod-float">float</a></emu-nt> token is
    either an IEEE 754 single-precision floating point number or an IEEE 754
    double-precision floating point number, depending on the type of the
    constant, dictionary member or optional argument it is being used as the value for, determined as follows:
</p>

<ol class="algorithm">
    1.  Let |S| be the sequence of characters matched by the <emu-nt><a href="#prod-float">float</a></emu-nt> token.
    1.  Let |value| be the Mathematical Value that would be obtained if |S| were
        parsed as an ECMAScript [=NumericLiteral=].
    1.  If the <emu-nt><a href="#prod-float">float</a></emu-nt> token is being
        used as the value for a {{float}} or
        {{unrestricted float}}, then
        the value of the <emu-nt><a href="#prod-float">float</a></emu-nt> token
        is the IEEE 754 single-precision floating point number closest to
        |result|.  Otherwise, the <emu-nt><a href="#prod-float">float</a></emu-nt> token is being
        used as the value for a {{double}} or
        {{unrestricted double}}, and
        the value of the <emu-nt><a href="#prod-float">float</a></emu-nt> token
        is the IEEE 754 double-precision floating point number closest to
        |result|.
        [[!IEEE-754]]
</ol>

The value of a constant value specified as
<code>Infinity</code>, <code>-Infinity</code> or <code>NaN</code> is either
an IEEE 754 single-precision floating point number or an IEEE 754
double-precision floating point number, depending on the type of the
constant, dictionary member or optional argument is is being used as the
value for:

<dl class="switch">
     :  Type {{unrestricted float}}, constant value <code>Infinity</code>
     :: The value is the IEEE 754 single-precision positive infinity value.
     :  Type {{unrestricted double}}, constant value <code>Infinity</code>
     :: The value is the IEEE 754 double-precision positive infinity value.
     :  Type {{unrestricted float}}, constant value <code>-Infinity</code>
     :: The value is the IEEE 754 single-precision negative infinity value.
     :  Type {{unrestricted double}}, constant value <code>-Infinity</code>
     :: The value is the IEEE 754 double-precision negative infinity value.
     :  Type {{unrestricted float}}, constant value <code>NaN</code>
     :: The value is the IEEE 754 single-precision NaN value with the bit pattern 0x7fc00000.
     :  Type {{unrestricted double}}, constant value <code>NaN</code>
     :: The value is the IEEE 754 double-precision NaN value with the bit pattern 0x7ff8000000000000.
</dl>

The type of a <emu-nt><a href="#prod-float">float</a></emu-nt> token is the same
as the type of the constant, dictionary member or optional argument it is being used as the value of.  The value of the
<emu-nt><a href="#prod-float">float</a></emu-nt> token must not
lie outside the valid range of values for its type, as given in
[[#idl-types]].
Also, <code>Infinity</code>, <code>-Infinity</code> and <code>NaN</code> must not
be used as the value of a {{float}}
or {{double}}.

The value of the <code>null</code> token is the special
<emu-val>null</emu-val> value that is a member of the
[=nullable types=].  The type of
the <code>null</code> token is the same as the
type of the constant, dictionary member or optional argument it is being used as the value of.

If |VT| is the type of the value assigned to a constant, and |DT|
is the type of the constant, dictionary member or optional argument itself, then these types must
be compatible, which is the case if |DT| and |VT| are identical,
or |DT| is a [=nullable type=]
whose [=inner type=] is |VT|.

[=Constants=] are not associated with
particular instances of the [=interface=]
on which they appear.  It is language binding specific whether
[=constants=] are exposed on instances.

<div class="note">
    
    The ECMAScript language binding does however
    allow [=constants=] to be accessed
    through objects implementing the IDL [=interfaces=]
    on which the [=constants=] are declared.
    For example, with the following IDL:
    
    <pre class="idl-example example">
        interface A {
          const short rambaldi = 47;
        };
    </pre>
    
    the constant value can be accessed in ECMAScript  either as
    <code>A.rambaldi</code> or <code>instanceOfA.rambaldi</code>.
    
</div>

The following extended attributes are applicable to constants:
[{{Exposed}}],
[{{SecureContext}}].

<pre class="grammar" id="prod-Const">
    Const :
        "const" ConstType identifier "=" ConstValue ";"
</pre>

<pre class="grammar" id="prod-ConstValue">
    ConstValue :
        BooleanLiteral
        FloatLiteral
        integer
        "null"
</pre>

<pre class="grammar" id="prod-BooleanLiteral">
    BooleanLiteral :
        "true"
        "false"
</pre>

<pre class="grammar" id="prod-FloatLiteral">
    FloatLiteral :
        float
        "-Infinity"
        "Infinity"
        "NaN"
</pre>

<pre class="grammar" id="prod-ConstType">
    ConstType :
        PrimitiveType Null
        identifier Null
</pre>

<div class="example">
    
    The following [=IDL fragment=]
    demonstrates how [=constants=]
    of the above types can be defined.
    
    <pre class="idl-example">
        interface Util {
          const boolean DEBUG = false;
          const octet LF = 10;
          const unsigned long BIT_MASK = 0x0000fc00;
          const double AVOGADRO = 6.022e23;
        };
    </pre>
</div>


<h4 id="idl-attributes">Attributes</h4>

An <dfn id="dfn-attribute" export>attribute</dfn> is an [=interface member=]
(matching
<emu-t>inherit</emu-t> <emu-nt><a href="#prod-ReadOnly">ReadOnly</a></emu-nt> <emu-nt><a href="#prod-AttributeRest">AttributeRest</a></emu-nt>,
<emu-t>static</emu-t> <emu-nt><a href="#prod-ReadOnly">ReadOnly</a></emu-nt> <emu-nt><a href="#prod-AttributeRest">AttributeRest</a></emu-nt>,
<emu-t>stringifier</emu-t> <emu-nt><a href="#prod-ReadOnly">ReadOnly</a></emu-nt> <emu-nt><a href="#prod-AttributeRest">AttributeRest</a></emu-nt>,
or <emu-nt><a href="#prod-ReadOnly">ReadOnly</a></emu-nt> <emu-nt><a href="#prod-AttributeRest">AttributeRest</a></emu-nt>)
that is used to declare data fields with a given type and
[=identifier=] whose value can
be retrieved and (in some cases) changed.  There are two kinds of attributes:

1.  [=regular attributes=], which are those
    used to declare that objects implementing the [=interface=]
    will have a data field member with the given [=identifier=]
    <pre highlight="idl" class="syntax">attribute type identifier;</pre>
1.  [=static attributes=], which are used
    to declare attributes that are not associated with a particular object implementing the interface
    <pre highlight="idl" class="syntax">static attribute type identifier;</pre>

If an attribute has no <code>static</code> keyword, then it declares a
<dfn id="dfn-regular-attribute" export>regular attribute</dfn>.  Otherwise,
it declares a [=static attribute=].

The [=identifier=] of an
[=attribute=]
must not be the same as the identifier
of another [=interface member=]
defined on the same [=interface=].
The identifier of a static attribute must not
be “prototype”.

The type of the attribute is given by the type (matching <emu-nt><a href="#prod-Type">Type</a></emu-nt>)
that appears after the <code>attribute</code> keyword.
If the <emu-nt><a href="#prod-Type">Type</a></emu-nt> is an
[=identifier=] or an identifier followed by <code>?</code>,
then the identifier must
identify an interface, [=enumeration=],
[=callback function=] or [=typedef=].

The type of the attribute, after resolving typedefs, must not be a
[=nullable type|nullable=] or non-nullable version of any of the following types:

*   a <a href="#idl-sequence">sequence type</a>
*   a <a href="#dfn-dictionary">dictionary</a>
*   a [=union type=]
    that has a nullable or non-nullable sequence type or dictionary
    as one of its [=flattened member types=]

The attribute is <dfn id="dfn-read-only" export>read only</dfn> if the
<code>readonly</code> keyword is used before the <code>attribute</code> keyword.
An object that implements the interface on which a read only attribute
is defined will not allow assignment to that attribute.  It is language
binding specific whether assignment is simply disallowed by the language,
ignored or an exception is thrown.

<pre highlight="idl" class="syntax">readonly attribute type identifier;</pre>

A [=regular attribute=]
that is not [=read only=]
can be declared to <dfn id="dfn-inherit-getter" export>inherit its getter</dfn>
from an ancestor interface.  This can be used to make a read only attribute
in an ancestor interface be writable on a derived interface.  An attribute
[=inherit its getter|inherits its getter=] if
its declaration includes <code>inherit</code> in the declaration.
The read only attribute from which the attribute inherits its getter
is the attribute with the same identifier on the closest ancestor interface
of the one on which the inheriting attribute is defined.  The attribute
whose getter is being inherited must be
of the same type as the inheriting attribute, and <code>inherit</code>
must not appear on a [=read only=]
attribute or a [=static attribute=].

<pre highlight="idl" class="syntax">
    interface Ancestor {
      readonly attribute TheType theIdentifier;
    };
    
    interface Derived : Ancestor {
      inherit attribute TheType theIdentifier;
    };
</pre>

When the <code>stringifier</code> keyword is used
in a [=regular attribute=]
declaration, it indicates that objects implementing the
interface will be stringified to the value of the attribute.  See
[[#idl-stringifiers]] for details.

<pre highlight="idl" class="syntax">stringifier attribute DOMString identifier;</pre>

<p id="callback-attribute-exceptions">
    If an implementation attempts to get or set the value of an
    [=attribute=] on a
    [=user object=]
    (for example, when a callback object has been supplied to the implementation),
    and that attempt results in an exception being thrown, then, unless otherwise specified, that
    exception will be propagated to the user code that caused the
    implementation to access the attribute.  Similarly, if a value
    returned from getting the attribute cannot be converted to
    an IDL type, then any exception resulting from this will also
    be propagated to the user code that resulted in the implementation
    attempting to get the value of the attribute.
</p>

The following [=extended attributes=]
are applicable to regular and static attributes:
[{{Clamp}}],
[{{EnforceRange}}],
[{{Exposed}}],
[{{SameObject}}],
[{{SecureContext}}],
[{{TreatNullAs}}].

The following [=extended attributes=]
are applicable only to regular attributes:
[{{LenientSetter}}],
[{{LenientThis}}],
[{{PutForwards}}],
[{{Replaceable}}],
[{{Unforgeable}}].

<pre class="grammar" id="prod-ReadOnlyMember">
    ReadOnlyMember :
        "readonly" ReadOnlyMemberRest
</pre>

<pre class="grammar" id="prod-ReadOnlyMemberRest">
    ReadOnlyMemberRest :
        AttributeRest
        ReadWriteMaplike
        ReadWriteSetlike
</pre>

<pre class="grammar" id="prod-ReadWriteAttribute">
    ReadWriteAttribute :
        "inherit" ReadOnly AttributeRest
        AttributeRest
</pre>

<pre class="grammar" id="prod-AttributeRest">
    AttributeRest :
        "attribute" Type AttributeName ";"
</pre>

<pre class="grammar" id="prod-AttributeName">
    AttributeName :
        AttributeNameKeyword
        identifier
</pre>

<pre class="grammar" id="prod-AttributeNameKeyword">
    AttributeNameKeyword :
        "required"
</pre>

<pre class="grammar" id="prod-Inherit">
    Inherit :
        "inherit"
        ε
</pre>

<pre class="grammar" id="prod-ReadOnly">
    ReadOnly :
        "readonly"
        ε
</pre>

<div class="example">
    
    The following [=IDL fragment=]
    demonstrates how [=attributes=]
    can be declared on an [=interface=]:
    
    <pre class="idl-example">
        interface Animal {
        
          // A simple attribute that can be set to any string value.
          readonly attribute DOMString name;
        
          // An attribute whose value can be assigned to.
          attribute unsigned short age;
        };
        
        interface Person : Animal {
        
          // An attribute whose getter behavior is inherited from Animal, and need not be
          // specified in the description of Person.
          inherit attribute DOMString name;
        };
    </pre>
</div>


<h4 id="idl-operations">Operations</h4>

An <dfn id="dfn-operation" export>operation</dfn> is an [=interface member=]
(matching <emu-t>static</emu-t> <emu-nt><a href="#prod-OperationRest">OperationRest</a></emu-nt>,
<emu-t>stringifier</emu-t> <emu-nt><a href="#prod-OperationRest">OperationRest</a></emu-nt>,
<emu-t>serializer</emu-t> <emu-nt><a href="#prod-OperationRest">OperationRest</a></emu-nt>,
<emu-nt><a href="#prod-ReturnType">ReturnType</a></emu-nt> <emu-nt><a href="#prod-OperationRest">OperationRest</a></emu-nt> or
<emu-nt><a href="#prod-SpecialOperation">SpecialOperation</a></emu-nt>)
that defines a behavior that can be invoked on objects implementing the interface.
There are three kinds of operation:

1.  [=regular operations=], which
    are those used to declare that objects implementing the
    [=interface=] will have a method with
    the given [=identifier=]
    <pre highlight="idl" class="syntax">return-type identifier(arguments…);</pre>
1.  [=special operations=],
    which are used to declare special behavior on objects
    implementing the interface, such as object indexing and stringification
    <pre highlight="idl" class="syntax">
        special-keywords… return-type identifier(arguments…);
        special-keywords… return-type (arguments…);
    </pre>
1.  [=static operations=],
    which are used to declare operations that are not associated with
    a particular object implementing the interface
    <pre highlight="idl" class="syntax">static return-type identifier(arguments…);</pre>

If an operation has an identifier but no <code>static</code>
keyword, then it declares a <dfn id="dfn-regular-operation" export>regular operation</dfn>.
If the operation has one or more
[=special keywords=]
used in its declaration (that is, any keyword matching
<emu-nt><a href="#prod-Special">Special</a></emu-nt>, or
the <code>stringifier</code> keyword),
then it declares a special operation.  A single operation can declare
both a regular operation and a special operation; see
[[#idl-special-operations]]
for details on special operations.

If an operation has no identifier,
then it must
be declared to be a special operation using one of the
special keywords.

The identifier of a
[=regular operation=]
or [=static operation=]
must not be the same as the identifier
of a [=constant=] or
[=attribute=]
defined on the same [=interface=].
The identifier of a static operation must not
be “prototype”.

Note: The identifier can be the same as that of another operation on the
interface, however.  This is how operation overloading is specified.

The [=identifier=] of a [=static operation=]
also must not be the same as the identifier
of a [=regular operation=]
defined on the same [=interface=].

The <dfn id="dfn-return-type" export>return type</dfn> of the operation is given
by the type (matching <emu-nt><a href="#prod-ReturnType">ReturnType</a></emu-nt>)
that appears before the operation’s optional [=identifier=].
A return type of <code id="idl-void">void</code> indicates that the operation returns no value.
If the return type is an
[=identifier=] followed by <code>?</code>,
then the identifier must
identify an interface, dictionary, [=enumeration=],
[=callback function=] or [=typedef=].

An operation’s arguments (matching <emu-nt><a href="#prod-ArgumentList">ArgumentList</a></emu-nt>)
are given between the parentheses in the declaration.  Each individual argument is specified
as a type (matching <emu-nt><a href="#prod-Type">Type</a></emu-nt>) followed by an [=identifier=]
(matching <emu-nt><a href="#prod-ArgumentName">ArgumentName</a></emu-nt>).

Note: For expressiveness, the identifier of an operation argument can also be specified
as one of the keywords matching the <emu-nt><a href="#prod-ArgumentNameKeyword">ArgumentNameKeyword</a></emu-nt>
symbol without needing to escape it.

If the <emu-nt><a href="#prod-Type">Type</a></emu-nt> of an operation argument is an identifier
followed by <code>?</code>,
then the identifier must identify an interface,
[=enumeration=], [=callback function=]
or [=typedef=].
If the operation argument type is an [=identifier=]
not followed by <code>?</code>, then the identifier must
identify any one of those definitions or a [=dictionary=].

<pre highlight="idl" class="syntax">return-type identifier(type identifier, type identifier, …);</pre>

The identifier of each argument must not be the same
as the identifier of another argument in the same operation declaration.

Each argument can be preceded by a list of
[=extended attributes=] (matching
<emu-nt><a href="#prod-ExtendedAttributeList">ExtendedAttributeList</a></emu-nt>),
which can control how a value passed as the argument will be handled in
language bindings.

<pre highlight="idl" class="syntax">return-type identifier([extended-attributes] type identifier, [extended-attributes] type identifier, …);</pre>

<div class="example">
    
    The following [=IDL fragment=]
    demonstrates how [=regular operations=]
    can be declared on an [=interface=]:
    
    <pre class="idl-example">
        interface Dimensions {
          attribute unsigned long width;
          attribute unsigned long height;
        };
        
        interface Button {
        
          // An operation that takes no arguments and returns a boolean.
          boolean isMouseOver();
        
          // Overloaded operations.
          void setDimensions(Dimensions size);
          void setDimensions(unsigned long width, unsigned long height);
        };
    </pre>
</div>

An operation is considered to be <dfn id="dfn-variadic" export>variadic</dfn>
if the final argument uses the <code>...</code> token just
after the argument type.  Declaring an operation to be variadic indicates that
the operation can be invoked with any number of arguments after that final argument.
Those extra implied formal arguments are of the same type as the final explicit
argument in the operation declaration.  The final argument can also be omitted
when invoking the operation.  An argument must not
be declared with the <code>...</code> token unless it
is the final argument in the operation’s argument list.

<pre highlight="idl" class="syntax">
    return-type identifier(type... identifier);
    return-type identifier(type identifier, type... identifier);
</pre>

[=Extended attributes=]
that [=takes an argument list|take an argument list=]
([{{Constructor}}] and
[{{NamedConstructor}}], of those
defined in this specification) and [=callback functions=]
are also considered to be [=variadic=]
when the <code>...</code> token is used in their argument lists.

<div class="example">
    
    The following [=IDL fragment=] defines an interface that has
    two variadic operations:
    
    <pre class="idl-example">
        interface IntegerSet {
          readonly attribute unsigned long cardinality;
        
          void union(long... ints);
          void intersection(long... ints);
        };
    </pre>
    
    In the ECMAScript binding, variadic operations are implemented by
    functions that can accept the subsequent arguments:
    
    <pre highlight="js">
        var s = getIntegerSet();  // Obtain an instance of IntegerSet.
        
        s.union();                // Passing no arguments corresponding to 'ints'.
        s.union(1, 4, 7);         // Passing three arguments corresponding to 'ints'.
    </pre>
    
    A binding for a language that does not support variadic functions
    might specify that an explicit array or list of integers be passed
    to such an operation.
    
</div>

An argument is considered to be an <dfn id="dfn-optional-argument" export>optional argument</dfn>
if it is declared with the <code>optional</code> keyword.
The final argument of a [=variadic=] operation
is also considered to be an optional argument. Declaring an argument
to be optional indicates that the argument value can be omitted
when the operation is invoked.  The final argument in an
operation must not explicitly be declared to be
optional if the operation is [=variadic=].

<pre highlight="idl" class="syntax">return-type identifier(type identifier, optional type identifier);</pre>

Optional arguments can also have a <dfn id="dfn-optional-argument-default-value" for="optional argument" export>default value</dfn>
specified.  If the argument’s identifier is followed by a <span class="char">U+003D EQUALS SIGN ("=")</span>
and a value (matching <emu-nt><a href="#prod-DefaultValue">DefaultValue</a></emu-nt>),
then that gives the optional argument its [=default value=].
The implicitly optional final argument of a [=variadic=]
operation must not have a default value specified.
The default value is the value to be assumed when the operation is called with the
corresponding argument omitted.

<pre highlight="idl" class="syntax">return-type identifier(type identifier, optional type identifier = value);</pre>

Advisement: It is strongly suggested not to use [=default value=]
of <emu-val>true</emu-val> for {{boolean}}-typed arguments,
as this can be confusing for authors who might otherwise expect the default
conversion of <emu-val>undefined</emu-val> to be used (i.e., <emu-val>false</emu-val>).

If the type of an argument is a <a href="#idl-dictionary">dictionary type</a>
or a [=union type=] that has a
dictionary type as one of its [=flattened member types=],
and that dictionary type and its ancestors have no [=required dictionary member|required members=],
and the argument is either the final argument or is followed only by
[=optional arguments=], then
the argument must be specified as optional.
Such arguments are always considered to have a
[=default value=] of an empty dictionary,
unless otherwise specified.

<div class="note">
    
    This is to encourage API designs that do not require authors to pass an
    empty dictionary value when they wish only to use the dictionary’s
    default values.
    
    Dictionary types cannot have a default value specified explicitly, so the
    “unless otherwise specified” clause above can only be invoked for
    a [=union type=] that has a
    dictionary type as one of its [=flattened member types=].
    
</div>

When a boolean literal token (<code>true</code> or <code>false</code>),
the <code>null</code> token,
an <emu-nt><a href="#prod-integer">integer</a></emu-nt> token, a
<emu-nt><a href="#prod-float">float</a></emu-nt> token or one of
the three special floating point literal values (<code>Infinity</code>,
<code>-Infinity</code> or <code>NaN</code>) is used as the
[=default value=],
it is interpreted in the same way as for a [=constant=].

<p id="string-literal">
    Optional argument default values can also be specified using a <emu-nt><a href="#prod-string">string</a></emu-nt>
    token, whose value is a [=string type=]
    determined as follows:
</p>

<ol class="algorithm">
    1.  Let |S| be the sequence of [=Unicode scalar values=] matched by the <emu-nt><a href="#prod-string">string</a></emu-nt> token with its leading and trailing <span class="char">U+0022 QUOTATION MARK ('"')</span> characters removed.
    1.  Depending on the type of the argument:
        <dl class="switch">
             :  {{DOMString}}
             :  an [=enumeration=] type
             :: The value of the <emu-nt><a href="#prod-string">string</a></emu-nt> token is the sequence of 16 bit unsigned integer code units (hereafter referred to just as <dfn id="dfn-code-unit">code units</dfn>) corresponding to the UTF-16 encoding of |S|.
             :  {{ByteString}}
             :: The value of the <emu-nt><a href="#prod-string">string</a></emu-nt> token is the sequence of 8 bit unsigned integer code units corresponding to the UTF-8 encoding of |S|.
             :  {{USVString}}
             :: The value of the <emu-nt><a href="#prod-string">string</a></emu-nt> token is |S|.
        </dl>
</ol>

If the type of the [=optional argument=]
is an [=enumeration=], then its
[=default value=] if specified must
be one of the [=enumeration values|enumeration’s values=].

Optional argument default values can also be specified using the
two token value <code>[]</code>, which represents an empty sequence
value.  The type of this value is the same the type of the optional
argument it is being used as the default value of.  That type
must be a
<a href="#idl-sequence">sequence type</a> or a
[=nullable type=].

<div class="example">
    
    The following [=IDL fragment=]
    defines an [=interface=]
    with a single [=operation=]
    that can be invoked with two different argument list lengths:
    
    <pre class="idl-example">
        interface ColorCreator {
          object createColor(double v1, double v2, double v3, optional double alpha);
        };
    </pre>
    
    It is equivalent to an [=interface=]
    that has two [=overloaded=]
    [=operations=]:
    
    <pre class="idl-example">
        interface ColorCreator {
          object createColor(double v1, double v2, double v3);
          object createColor(double v1, double v2, double v3, double alpha);
        };
    </pre>
</div>

<p id="callback-operation-exceptions">
    If an implementation attempts to invoke an
    [=operation=] on a
    [=user object=] (for example, when a callback object
    has been supplied to the implementation), and that attempt results in an
    exception being thrown, then, unless otherwise specified, that
    exception will be propagated to the user code that caused the
    implementation to invoke the operation.  Similarly, if a value
    returned from invoking the operation cannot be converted to
    an IDL type, then any exception resulting from this will also
    be propagated to the user code that resulted in the implementation
    attempting to invoke the operation.
</p>

The following extended attributes
are applicable to operations:
[{{Exposed}}],
[{{NewObject}}],
[{{SecureContext}}],
[{{TreatNullAs}}],
[{{Unforgeable}}].

The following extended attributes are applicable to operation arguments:
[{{Clamp}}],
[{{EnforceRange}}],
[{{TreatNullAs}}].

<pre class="grammar" id="prod-DefaultValue">
    DefaultValue :
        ConstValue
        string
        "[" "]"
</pre>

<pre class="grammar" id="prod-Operation">
    Operation :
        ReturnType OperationRest
        SpecialOperation
</pre>

<pre class="grammar" id="prod-SpecialOperation">
    SpecialOperation :
        Special Specials ReturnType OperationRest
</pre>

<pre class="grammar" id="prod-Specials">
    Specials :
        Special Specials
        ε
</pre>

<pre class="grammar" id="prod-Special">
    Special :
        "getter"
        "setter"
        "deleter"
        "legacycaller"
</pre>

<pre class="grammar" id="prod-OperationRest">
    OperationRest :
        OptionalIdentifier "(" ArgumentList ")" ";"
</pre>

<pre class="grammar" id="prod-OptionalIdentifier">
    OptionalIdentifier :
        identifier
        ε
</pre>

<pre class="grammar" id="prod-ArgumentList">
    ArgumentList :
        Argument Arguments
        ε
</pre>

<pre class="grammar" id="prod-Arguments">
    Arguments :
        "," Argument Arguments
        ε
</pre>

<pre class="grammar" id="prod-Argument">
    Argument :
        ExtendedAttributeList OptionalOrRequiredArgument
</pre>

<pre class="grammar" id="prod-OptionalOrRequiredArgument">
    OptionalOrRequiredArgument :
        "optional" Type ArgumentName Default
        Type Ellipsis ArgumentName
</pre>

<pre class="grammar" id="prod-ArgumentName">
    ArgumentName :
        ArgumentNameKeyword
        identifier
</pre>

<pre class="grammar" id="prod-Ellipsis">
    Ellipsis :
        "..."
        ε
</pre>

<div data-fill-with="grammar-ArgumentNameKeyword"></div>

<pre class="grammar" id="prod-ReturnType">
    ReturnType :
        Type
        "void"
</pre>


<h4 id="idl-special-operations">Special operations</h4>

A <dfn id="dfn-special-operation" export>special operation</dfn> is a
declaration of a certain kind of special behavior on objects implementing
the interface on which the special operation declarations appear.
Special operations are declared by using one or more
<dfn id="dfn-special-keyword" export>special keywords</dfn>
in an operation declaration.

There are six kinds of special operations. The table below indicates
for a given kind of special operation what special keyword
is used to declare it and what the purpose of the special operation is:

<table class="vert data">
    <tr>
        <th>Special operation</th>
        <th>Keyword</th>
        <th>Purpose</th>
    </tr>
    <tr>
        <td><dfn id="dfn-getter" export lt="getter">Getters</dfn></td>
        <td><code>getter</code></td>
        <td>Defines behavior for when an object is indexed for property retrieval.</td>
    </tr>
    <tr>
        <td><dfn id="dfn-setter" export lt="setter">Setters</dfn></td>
        <td><code>setter</code></td>
        <td>Defines behavior for when an object is indexed for property
        assignment or creation.</td>
    </tr>
    <tr>
        <td><dfn id="dfn-deleter" export lt="deleter">Deleters</dfn></td>
        <td><code>deleter</code></td>
        <td>Defines behavior for when an object is indexed for property deletion.</td>
    </tr>
    <tr>
        <td><dfn id="dfn-legacy-caller" export lt="legacy">Legacy callers</dfn></td>
        <td><code>legacycaller</code></td>
        <td>Defines behavior for when an object is called as if it were a function.</td>
    </tr>
    <tr>
        <td><dfn id="dfn-stringifier" export lt="stringifier">Stringifiers</dfn></td>
        <td><code>stringifier</code></td>
        <td>Defines how an object is converted into a {{DOMString}}.</td>
    </tr>
    <tr>
        <td><dfn id="dfn-serializer" export lt="serializer">Serializers</dfn></td>
        <td><code>serializer</code></td>
        <td>Defines how an object is converted into a serialized form.</td>
    </tr>
</table>

Not all language bindings support all of the six kinds of special
object behavior.  When special operations are declared using
operations with no identifier, then in language bindings that do
not support the particular kind of special operations there simply
will not be such functionality.

<div class="example">
    
    The following IDL fragment defines an interface with a getter and a setter:
    
    <pre class="idl-example">
        interface Dictionary {
          readonly attribute unsigned long propertyCount;
        
          getter double (DOMString propertyName);
          setter void (DOMString propertyName, double propertyValue);
        };
    </pre>
    
    In language bindings that do not support property getters and setters,
    objects implementing [=Dictionary=] will not
    have that special behavior.
    
</div>

Defining a special operation  with an [=identifier=]
is equivalent to separating the special operation out into its own
declaration without an identifier.  This approach is allowed to
simplify prose descriptions of an interface’s operations.

<div class="example">
    
    The following two interfaces are equivalent:
    
    <pre class="idl-example">
        interface Dictionary {
          readonly attribute unsigned long propertyCount;
        
          getter double getProperty(DOMString propertyName);
          setter void setProperty(DOMString propertyName, double propertyValue);
        };
    </pre>
    <pre class="idl-example">
        interface Dictionary {
          readonly attribute unsigned long propertyCount;
        
          double getProperty(DOMString propertyName);
          void setProperty(DOMString propertyName, double propertyValue);
        
          getter double (DOMString propertyName);
          setter void (DOMString propertyName, double propertyValue);
        };
    </pre>
</div>

A given [=special keyword=] must not
appear twice on an operation.

Getters and setters come in two varieties: ones that
take a {{DOMString}} as a property name,
known as
<dfn id="dfn-named-property-getter" export lt="named property getter">named property getters</dfn> and
<dfn id="dfn-named-property-setter" export lt="named property setter">named property setters</dfn>,
and ones that take an {{unsigned long}}
as a property index, known as
<dfn id="dfn-indexed-property-getter" export lt="indexed property getter">indexed property getters</dfn> and
<dfn id="dfn-indexed-property-setter" export lt="indexed property setter">indexed property setters</dfn>.
There is only one variety of deleter:
<dfn id="dfn-named-property-deleter" export lt="named property deleter">named property deleters</dfn>.
See [[#idl-indexed-properties]]
and [[#idl-named-properties]]
for details.

On a given [=interface=],
there must exist at most one
stringifier, at most one serializer, at most one
[=named property deleter=],
and at most one of each variety of getter and setter.
Multiple legacy callers can exist on an interface
to specify overloaded calling behavior.

If an interface has a setter of a given variety,
then it must also have a getter of that
variety.  If it has a [=named property deleter=],
then it must also have a
[=named property getter=].

Special operations declared using operations must not
be [=variadic=] nor have any
[=optional arguments=].

Special operations must not be declared on
[=callback interfaces=].

If an object implements more than one [=interface=]
that defines a given special operation, then it is undefined which (if any)
special operation is invoked for that operation.


<h5 id="idl-legacy-callers" dfn>Legacy callers</h5>

When an [=interface=] has one or more
[=legacy callers=], it indicates that objects that implement
the interface can be called as if they were functions.  As mentioned above,
legacy callers can be specified using an [=operation=]
declared with the <code>legacycaller</code> keyword.

<pre highlight="idl" class="syntax">
    legacycaller return-type identifier(arguments…);
    legacycaller return-type (arguments…);
</pre>

If multiple legacy callers are specified on an interface, overload resolution
is used to determine which legacy caller is invoked when the object is called
as if it were a function.

Legacy callers must not be defined to return a
<a href="#idl-promise">promise type</a>.

Advisement: Legacy callers are universally recognised as an undesirable feature.  They exist
only so that legacy Web platform features can be specified.  Legacy callers
should not be used in specifications unless required to
specify the behavior of legacy APIs, and even then this should be discussed on
the <a href="mailto:public-script-coord@w3.org">public-script-coord@w3.org</a>
mailing list before proceeding.

<div class="example">
    
    The following [=IDL fragment=]
    defines an [=interface=]
    with a [=legacy caller=].
    
    <pre class="idl-example">
        interface NumberQuadrupler {
          // This operation simply returns four times the given number x.
          legacycaller double compute(double x);
        };
    </pre>
    
    An ECMAScript implementation supporting this interface would
    allow a [=platform object=]
    that implements <code class="idl">NumberQuadrupler</code>
    to be called as a function:
    
    <pre highlight="js">
        var f = getNumberQuadrupler();  // Obtain an instance of NumberQuadrupler.
        
        f.compute(3);                   // This evaluates to 12.
        f(3);                           // This also evaluates to 12.
    </pre>
</div>


<h5 id="idl-stringifiers">Stringifiers</h5>

When an [=interface=] has a
[=stringifier=], it indicates that objects that implement
the interface have a non-default conversion to a string.  As mentioned above,
stringifiers can be specified using an [=operation=]
declared with the <code>stringifier</code> keyword.

<pre highlight="idl" class="syntax">
    stringifier DOMString identifier();
    stringifier DOMString ();
</pre>

If an operation used to declare a stringifier does not have an
[=identifier=], then prose
accompanying the interface must define
the <dfn id="dfn-stringification-behavior" export>stringification behavior</dfn>
of the interface.  If the operation does have an identifier,
then the object is converted to a string by invoking the
operation to obtain the string.

Stringifiers declared with operations must
be declared to take zero arguments and return a {{DOMString}}.

As a shorthand, if the <code>stringifier</code> keyword
is declared using an operation with no identifier, then the
operation’s [=return type=] and
argument list can be omitted.

<pre highlight="idl" class="syntax">stringifier;</pre>

<div class="example">
    
    The following two interfaces are equivalent:
    
    <pre class="idl-example">
        interface A {
          stringifier DOMString ();
        };
    </pre>
    <pre class="idl-example">
        interface A {
          stringifier;
        };
    </pre>
</div>

The <code>stringifier</code> keyword
can also be placed on an [=attribute=].
In this case, the string to convert the object to is the
value of the attribute.  The <code>stringifier</code> keyword
must not be placed on an attribute unless
it is declared to be of type {{DOMString}} or {{USVString}}.
It also must not be placed on
a [=static attribute=].

<pre highlight="idl" class="syntax">stringifier attribute DOMString identifier;</pre>

<pre class="grammar" id="prod-Stringifier">
    Stringifier :
        "stringifier" StringifierRest
</pre>

<pre class="grammar" id="prod-StringifierRest">
    StringifierRest :
        ReadOnly AttributeRest
        ReturnType OperationRest
        ";"
</pre>

<div class="example">
    
    The following [=IDL fragment=]
    defines an interface that will stringify to the value of its
    <code class="idl">name</code> attribute:
    
    <pre class="idl-example">
        [Constructor]
        interface Student {
          attribute unsigned long id;
          stringifier attribute DOMString name;
        };
    </pre>
    
    In the ECMAScript binding, using a <code class="idl">Student</code>
    object in a context where a string is expected will result in the
    value of the object’s “name” property being
    used:
    
    <pre highlight="js">
        var s = new Student();
        s.id = 12345678;
        s.name = '周杰倫';
        
        var greeting = 'Hello, ' + s + '!';  // Now greeting == 'Hello, 周杰倫!'.
    </pre>
    
    The following [=IDL fragment=]
    defines an interface that has custom stringification behavior that is
    not specified in the IDL itself.
    
    <pre class="idl-example">
        [Constructor]
        interface Student {
          attribute unsigned long id;
          attribute DOMString? familyName;
          attribute DOMString givenName;
        
          stringifier DOMString ();
        };
    </pre>
    
    Thus, prose is required to explain the stringification behavior, such
    as the following paragraph:
    
    <blockquote>
        
        Objects that implement the <code class="idl">Student</code>
        interface must stringify as follows.  If the value of the
        <code class="idl">familyName</code> attribute is
        <emu-val>null</emu-val>, the stringification of the
        object is the value of the <code class="idl">givenName</code>
        attribute.  Otherwise, if the value of the
        <code class="idl">familyName</code> attribute is not <emu-val>null</emu-val>,
        the stringification of the object is the concatenation of the
        value of the <code class="idl">givenName</code> attribute,
        a single space character, and the value of
        the <code class="idl">familyName</code> attribute.
        
    </blockquote>
    
    An ECMAScript implementation of the IDL would behave as follows:
    
    <pre highlight="js">
        var s = new Student();
        s.id = 12345679;
        s.familyName = 'Smithee';
        s.givenName = 'Alan';
        
        var greeting = 'Hi ' + s;  // Now greeting == 'Hi Alan Smithee'.
    </pre>
</div>


<h5 id="idl-serializers">Serializers</h5>

When an [=interface=] has a
[=serializer=], it indicates that objects provide
a way for them to be converted into a serialized form.  Serializers can be declared
using the <code>serializer</code> keyword:

<pre highlight="idl" class="syntax">serializer;</pre>

Prose accompanying an interface that declares a serializer in this
way must define the
<dfn id="dfn-serialization-behavior" export>serialization behavior</dfn>
of the interface.  Serialization behavior is defined as returning
a <dfn id="dfn-serialized-value" export>serialized value</dfn> of one of the following types:

*   a <em>map</em> of key–value pairs, where the keys are
    {{DOMString}} values (unique in the map) and the
    values are [=serialized values=]
*   a <em>list</em> of [=serialized values=]
*   a {{DOMString}} value
*   an {{unrestricted double}} value
*   a {{boolean}} value
*   the <emu-val>null</emu-val> value

How the [=serialization behavior=]
is made available on an object in a language binding, and how exactly the abstract
[=serialized value=] is converted into
an appropriate concrete value, is language binding specific.

Note: In the ECMAScript language binding,
[=serialization behavior=]
is exposed as a <code>toJSON</code> method which returns the
[=serialized value=] converted
into an ECMAScript value that can be serialized to JSON by the
<code>JSON.stringify</code> function.  See [[#es-serializer]] for details.

[=Serialization behavior=]
can also be specified directly in IDL, rather than separately as prose.
This is done by following the <code>serializer</code> keyword with
a <span class="char">U+003D EQUALS SIGN ("=")</span> character and
a <dfn id="dfn-serialization-pattern" export>serialization pattern</dfn>,
which can take one of the following six forms:

*   A map with entries corresponding to zero or more attributes from the interface, and optionally
    attributes from an inherited interface:
    
    <pre highlight="idl" class="syntax">
        serializer = { attribute-identifier, attribute-identifier, … };
        serializer = { inherit, attribute-identifier, attribute-identifier, … };
    </pre>
    
    Each identifier must be the identifier of an attribute declared
    on the interface.  The identified attributes all must have a
    [=serializable type=].
    
    The <code>inherit</code> keyword must not be used unless
    the interface inherits from another that defines a serializer, and the closest such interface
    defines its serializer using this [=serialization pattern=]
    form or the following form (i.e. <code>{ attribute }</code>).
    
    The [=serialization behavior=] for this
    form of serialization pattern is as follows:
    
    <ol class="algorithm">
        1.  Let |map| be an empty map.
        1.  If the <code>inherit</code> keyword was used, then set |map| to be the result of
            the [=serialization behavior=] of the
            closest inherited interface that declares a serializer.
        1.  For each attribute identifier |i| in the serialization pattern, in order:
            1.  Remove any entry in |map| with key name |i|.
            1.  Let |V| be the value of the attribute with identifier |i|.
            1.  Add an entry to |map| whose key name is |i| and whose
                value is result of [=converted to a serialized value|converting=]
                |V| to a serialized value.
        1.  Return |map|.
    </ol>
*   A map with entries corresponding to all attributes from the interface that have
    a [=serializable type=], and optionally
    attributes from an inherited interface:
    
    <pre highlight="idl" class="syntax">
        serializer = { attribute };
        serializer = { inherit, attribute };
    </pre>
    
    The <code>inherit</code> keyword must not be used unless
    the interface inherits from another that defines a serializer, and the closest such interface
    defines its serializer using this [=serialization pattern=]
    form or the previous form.
    
    The [=serialization behavior=] for this
    form of serialization pattern is as follows:
    
    <ol class="algorithm">
        1.  Let |map| be an empty map.
        1.  If the <code>inherit</code> keyword was used, then set |map| to be the result of
            the [=serialization behavior=] of the
            closest inherited interface that declares a serializer.
        1.  For each identifier |i| of an attribute on the interface whose type is
            a [=serializable type=], in the order they appear
            on the interface:
            1.  Remove any entry in |map| with key name |i|.
            1.  Let |V| be the value of the attribute with identifier |i|.
            1.  Add an entry to |map| whose key name is |i| and whose
                value is result of [=converted to a serialized value|converting=]
                |V| to a serialized value.
        1.  Return |map|.
    </ol>
*   A map with entries corresponding to the named properties:
    
    <pre highlight="idl" class="syntax">serializer = { getter };</pre>
    
    This form must not be used unless the interface or one it
    inherits from supports named properties and the return type of the named property getter
    is a serializable type.
    
    The [=serialization behavior=] for this
    form of serialization pattern is as follows:
    
    <ol class="algorithm">
        1.  Let |map| be an empty map.
        1.  For each supported property name |n| on the object, in order:
            1.  Let |V| be the value of the named property with name |n|.
            1.  Add an entry to |map| whose key name is |i| and whose
                value is result of [=converted to a serialized value|converting=]
                |V| to a serialized value.
        1.  Return |map|.
    </ol>
*   A list of value of zero or more attributes on the interface:
    
    <pre highlight="idl" class="syntax">serializer = [ attribute-identifier, attribute-identifier, … ];</pre>
    
    Each identifier must be the identifier of an attribute declared
    on the interface.  The identified attributes all must have a
    [=serializable type=].
    
    The [=serialization behavior=] for this
    form of serialization pattern is as follows:
    
    <ol class="algorithm">
        1.  Let |list| be an empty list.
        1.  For each attribute identifier |i| in the serialization pattern:
            1.  Let |V| be the value of the attribute with identifier |i|.
            1.  Append to |list| the value that is the result of
                [=converted to a serialized value|converting=]
                |V| to a serialized value.
        1.  Return |list|.
    </ol>
*   A list with entries corresponding to the indexed properties:
    
    <pre highlight="idl" class="syntax">serializer = [ getter ];</pre>
    
    This form must not be used unless the interface or one it
    inherits from supports indexed properties and the return type of the indexed property getter
    is a serializable type.
    
    The [=serialization behavior=] for this
    form of serialization pattern is as follows:
    
    <ol class="algorithm">
        1.  Let |list| be an empty list.
        1.  Let |i| be 0.
        1.  While |i| is less than or equal to the greatest supported property index on the object:
            1.  Let |V| be the value of the indexed property with index |i|
                if |i| is a supported property index, or <emu-val>null</emu-val> otherwise.
            1.  Append to |list| the value that is the result of
                [=converted to a serialized value|converting=]
                |V| to a serialized value.
            1.  Set |i| to |i| + 1.
        1.  Return |map|.
    </ol>
*   A single attribute:
    
    <pre highlight="idl" class="syntax">serializer = attribute-identifier;</pre>
    
    The identifier must be the identifier of an attribute declared
    on the interface, and this attribute must have a
    [=serializable type=].
    
    The [=serialization behavior=] for this
    form of serialization pattern is as follows:
    
    <ol class="algorithm">
        1.  Let |V| be the value of the attribute with the specified identifier.
        1.  Return the result of [=converted to a serialized value|converting=]
            |V| to a serialized value.
    </ol>

Note: Entries are added to maps in a particular order so that in the ECMAScript language binding
it is defined what order properties are added to objects.  This is because this order
can influence the serialization that <code>JSON.stringify</code> can produce.

The list of <dfn id="dfn-serializable-type" export lt="serializable type">serializable types</dfn> and how they are
<dfn id="dfn-convert-to-serialized-value" export lt="converted to a serialized value|converted to serialized values">converted to serialized values</dfn> is as follows:

<dl class="switch">
     :  {{long long}}
     :: converted by choosing the closest equivalent {{double}} value
        (as when <a href="#es-long-long">converting a <code class="idl">long long</code> to an ECMAScript <emu-val>Number</emu-val> value</a>)
     :  {{unsigned long long}}
     :: converted by choosing the closest equivalent {{double}} value
        (as when <a href="#es-unsigned-long-long">converting a <code class="idl">unsigned long long</code> to an ECMAScript <emu-val>Number</emu-val> value</a>)
     :  any other [=integer type=]
     :  {{float}}
     :: converted by choosing the equivalent {{double}} value
     :  {{double}}
     :  {{boolean}}
     :  {{DOMString}}
     :: the same value of the respective type
     :  an [=enumeration|enumeration type=]
     :: the equivalent {{DOMString}} value
     :  a {{USVString}}
     :: the {{DOMString}} produced by
        encoding the given sequence of [=Unicode scalar values=] in
        UTF-16
     :  a {{ByteString}}
     :: the equivalent {{DOMString}} value where each code unit has the same value as the corresponding byte value
     :  a [=nullable type|nullable=] serializable type
     :: converted to <emu-val>null</emu-val> if that is its value,
        otherwise converted as per its [=inner type=]
     :  a [=union type=] where all of its [=member types=] are serializable types
     :: converted as per its [=specific type=]
     :  a <a href="#idl-sequence">sequence type</a> that has a serializable type as its element type
     :: converted to a list where each element is the result of converting its
        corresponding sequence element to a serialized value
     :  a [=dictionary=] where all of its [=dictionary members|members=] have serializable types
     :: converted to a map consisting of an entry for each dictionary member
        that is present, where the entry’s key is the identifier of the dictionary
        member and its value is the result of converting the dictionary member’s
        value to a serializable type
     :  an <a href="#idl-interface">interface</a> type that has a [=serializer=]
     :: converted by invoking the object’s serializer
</dl>

Serializers can also be specified using an [=operation=]
with the <code>serializer</code> keyword:

<pre highlight="idl" class="syntax">serializer type identifier();</pre>

Serializers declared with operations must
be declared to take zero arguments and return a [=serializable type=].

The [=serialization behavior=]
of the interface with a serializer declared with an operation is the result of
[=converted to a serialized value|converting=]
the value returned from invoking the operation to a serialized value.

<pre class="grammar" id="prod-Serializer">
    Serializer :
        "serializer" SerializerRest
</pre>

<pre class="grammar" id="prod-SerializerRest">
    SerializerRest :
        OperationRest
        "=" SerializationPattern ";"
        ";"
</pre>

<pre class="grammar" id="prod-SerializationPattern">
    SerializationPattern :
        "{" SerializationPatternMap "}"
        "[" SerializationPatternList "]"
        identifier
</pre>

<pre class="grammar" id="prod-SerializationPatternMap">
    SerializationPatternMap :
        "getter"
        "inherit" Identifiers
        identifier Identifiers
        ε
</pre>

<pre class="grammar" id="prod-SerializationPatternList">
    SerializationPatternList :
        "getter"
        identifier Identifiers
        ε
</pre>

<pre class="grammar" id="prod-Identifiers">
    Identifiers :
        "," identifier Identifiers
        ε
</pre>

<div class="example">
    
    The following [=IDL fragment=] defines
    an interface <code class="idl">Transaction</code> that has a
    [=serializer=] defines in prose:
    
    <pre class="idl-example">
        interface Transaction {
          readonly attribute Account from;
          readonly attribute Account to;
          readonly attribute double amount;
          readonly attribute DOMString description;
          readonly attribute unsigned long number;
        
          serializer;
        };
        
        interface Account {
          DOMString name;
          unsigned long number;
        };
    </pre>
    
    The serializer could be defined as follows:
    
    <blockquote>
        
        The [=serialization behavior=]
        of the <code class="idl">Transaction</code> interface is to run the following
        algorithm, where |O| is the object that implements <code class="idl">Transaction</code>:
        
        <ol class="algorithm">
            1.  Let |map| be an empty map.
            1.  Add an entry to |map| whose key is “from” and whose value is
                the [=serialized value=] of
                the <code>number</code> attribute on the <code class="idl">Account</code>
                object referenced by the <code>from</code> attribute on |O|.
            1.  Add an entry to |map| whose key is “to” and whose value is
                the [=serialized value=] of
                the <code>number</code> attribute on the <code class="idl">Account</code>
                object referenced by the <code>from</code> attribute on |O|.
            1.  For both of the attributes <code>amount</code> and <code>description</code>,
                add an entry to |map| whose key is the
                [=identifier=] of the attribute
                and whose value is the [=serialized value=]
                of the value of the attribute on |O|.
            1.  Return |map|.
        </ol>
    </blockquote>
    
    If it was acceptable for <code class="idl">Account</code> objects to be serializable
    on their own, then [=serialization patterns=]
    could be used to avoid having to define the [=serialization behavior=]
    in prose:
    
    <pre class="idl-example">
        interface Transaction {
          readonly attribute Account from;
          readonly attribute Account to;
          readonly attribute double amount;
          readonly attribute DOMString description;
          readonly attribute unsigned long number;
        
          serializer = { from, to, amount, description };
        };
        
        interface Account {
          DOMString name;
          unsigned long number;
        
          serializer = number;
        };
    </pre>
    
    In the ECMAScript language binding, there would exist a <code>toJSON</code> method on
    <code class="idl">Transaction</code> objects:
    
    <pre highlight="js">
        // Get an instance of Transaction.
        var txn = getTransaction();
        
        // Evaluates to an object like this:
        // {
        //   from: 1234
        //   to: 5678
        //   amount: 110.75
        //   description: "dinner"
        // }
        txn.toJSON();
        
        // Evaluates to a string like this:
        // '{"from":1234,"to":5678,"amount":110.75,"description":"dinner"}'
        JSON.stringify(txn);
    </pre>
</div>


<h5 id="idl-indexed-properties">Indexed properties</h5>

An [=interface=] that defines
an [=indexed property getter=]
is said to <dfn id="dfn-support-indexed-properties" export>support indexed properties</dfn>.

If an interface [=support indexed properties|supports indexed properties=],
then the interface definition must be accompanied by
a description of what indices the object can be indexed with at
any given time. These indices are called the <dfn id="dfn-supported-property-indices" export>supported property indices</dfn>.

Indexed property getters must
be declared to take a single {{unsigned long}} argument.
Indexed property setters must
be declared to take two arguments, where the first is an {{unsigned long}}.

<pre highlight="idl" class="syntax">
    getter type identifier(unsigned long identifier);
    setter type identifier(unsigned long identifier, type identifier);
    
    getter type (unsigned long identifier);
    setter type (unsigned long identifier, type identifier);
</pre>

The following requirements apply to the definitions of indexed property getters and setters:

*   If an [=indexed property getter=] was specified using an [=operation=]
    with an [=identifier=],
    then the value returned when indexing the object with a given [=supported property indices|supported property index=]
    is the value that would be returned by invoking the operation, passing
    the index as its only argument.  If the operation used to declare the indexed property getter
    did not have an identifier, then the interface definition must be accompanied
    by a description of how to <dfn id="dfn-determine-the-value-of-an-indexed-property" export>determine the value of an indexed property</dfn>
    for a given index.
*   If an [=indexed property setter=] was specified using an operation
    with an identifier,
    then the behavior that occurs when indexing the object for property assignment with a given supported property index and value
    is the same as if the operation is invoked, passing
    the index as the first argument and the value as the second argument.  If the operation used to declare the indexed property setter
    did not have an identifier, then the interface definition must be accompanied
    by a description of how to <dfn id="dfn-set-the-value-of-an-existing-indexed-property" export>set the value of an existing indexed property</dfn>
    and how to <dfn id="dfn-set-the-value-of-a-new-indexed-property" export>set the value of a new indexed property</dfn>
    for a given property index and value.

<div class="note">
    
    Note that if an [=indexed property getter=] or
    [=indexed property setters|setter=]
    is specified using an [=operation=] with an [=identifier=],
    then indexing an object with an integer that is not a [=supported property indices|supported property index=]
    does not necessarily elicit the same behavior as invoking the operation with that index.  The actual behavior in this
    case is language binding specific.
    
    In the ECMAScript language binding, a regular property lookup is done.  For example, take the following IDL:
    
    <pre class="idl-example example">
        interface A {
          getter DOMString toWord(unsigned long index);
        };
    </pre>
    
    Assume that an object implementing <code class="idl">A</code> has [=supported property indices=]
    in the range 0 ≤ |index| &lt; 2.  Also assume that toWord is defined to return
    its argument converted into an English word.  The behavior when invoking the
    [=operation=] with an out of range index
    is different from indexing the object directly:
    
    <pre highlight="js">
        var a = getA();
        
        a.toWord(0);  // Evalautes to "zero".
        a[0];         // Also evaluates to "zero".
        
        a.toWord(5);  // Evaluates to "five".
        a[5];         // Evaluates to undefined, since there is no property "5".
    </pre>
</div>

<div class="example">
    
    The following [=IDL fragment=] defines an interface
    <code class="idl">OrderedMap</code> which allows
    retrieving and setting values by name or by index number:
    
    <pre class="idl-example">
        interface OrderedMap {
          readonly attribute unsigned long size;
        
          getter any getByIndex(unsigned long index);
          setter void setByIndex(unsigned long index, any value);
        
          getter any get(DOMString name);
          setter void set(DOMString name, any value);
        };
    </pre>
    
    Since all of the special operations are declared using
    operations with identifiers, the only additional prose
    that is necessary is that which describes what keys those sets
    have.  Assuming that the <code>get()</code> operation is
    defined to return <emu-val>null</emu-val> if an
    attempt is made to look up a non-existing entry in the
    <code class="idl">OrderedMap</code>, then the following
    two sentences would suffice:
    
    <blockquote>
        
        An object |map| implementing <code class="idl">OrderedMap</code>
        supports indexed properties with indices in the range
        0 ≤ |index| &lt; <code>map.size</code>.
        
        Such objects also support a named property for every name that,
        if passed to <code>get()</code>, would return a non-null value.
        
    </blockquote>
    
    As described in [[#es-platform-objects]],
    an ECMAScript implementation would create
    properties on a [=platform object=] implementing
    <code class="idl">OrderedMap</code> that correspond to
    entries in both the named and indexed property sets.
    These properties can then be used to interact
    with the object in the same way as invoking the object’s
    methods, as demonstrated below:
    
    <pre highlight="js">
        // Assume map is a platform object implementing the OrderedMap interface.
        var map = getOrderedMap();
        var x, y;
        
        x = map[0];       // If map.length &gt; 0, then this is equivalent to:
                          //
                          //   x = map.getByIndex(0)
                          //
                          // since a property named "0" will have been placed on map.
                          // Otherwise, x will be set to undefined, since there will be
                          // no property named "0" on map.
        
        map[1] = false;   // This will do the equivalent of:
                          //
                          //   map.setByIndex(1, false)
        
        y = map.apple;    // If there exists a named property named "apple", then this
                          // will be equivalent to:
                          //
                          //   y = map.get('apple')
                          //
                          // since a property named "apple" will have been placed on
                          // map.  Otherwise, y will be set to undefined, since there
                          // will be no property named "apple" on map.
        
        map.berry = 123;  // This will do the equivalent of:
                          //
                          //   map.set('berry', 123)
        
        delete map.cake;  // If a named property named "cake" exists, then the "cake"
                          // property will be deleted, and then the equivalent to the
                          // following will be performed:
                          //
                          //   map.remove("cake")
    </pre>
</div>


<h5 id="idl-named-properties">Named properties</h5>

An [=interface=] that defines
a [=named property getter=]
is said to <dfn id="dfn-support-named-properties" export>support named properties</dfn>.

If an interface [=support named properties|supports named properties=],
then the interface definition must be accompanied by
a description of the ordered set of names that can be used to index the object
at any given time.  These names are called the
<dfn id="dfn-supported-property-names" export>supported property names</dfn>.

Named property getters and deleters must
be declared to take a single {{DOMString}} argument.
Named property setters must
be declared to take two arguments, where the first is a {{DOMString}}.

<pre highlight="idl" class="syntax">
    getter type identifier(DOMString identifier);
    setter type identifier(DOMString identifier, type identifier);
    deleter type identifier(DOMString identifier);
    
    getter type (DOMString identifier);
    setter type (DOMString identifier, type identifier);
    deleter type (DOMString identifier);
</pre>

The following requirements apply to the definitions of named property getters, setters and deleters:

*   If a [=named property getter=] was specified using an [=operation=]
    with an [=identifier=],
    then the value returned when indexing the object with a given [=supported property name=]
    is the value that would be returned by invoking the operation, passing
    the name as its only argument.  If the operation used to declare the named property getter
    did not have an identifier, then the interface definition must be accompanied
    by a description of how to <dfn id="dfn-determine-the-value-of-a-named-property" export>determine the value of a named property</dfn>
    for a given property name.
*   If a [=named property setter=] was specified using an operation
    with an identifier,
    then the behavior that occurs when indexing the object for property assignment with a given supported property name and value
    is the same as if the operation is invoked, passing
    the name as the first argument and the value as the second argument.  If the operation used to declare the named property setter
    did not have an identifier, then the interface definition must be accompanied
    by a description of how to <dfn id="dfn-set-the-value-of-an-existing-named-property" export>set the value of an existing named property</dfn>
    and how to <dfn id="dfn-set-the-value-of-a-new-named-property" export>set the value of a new named property</dfn>
    for a given property name and value.
*   If a [=named property deleter=] was specified using an operation
    with an identifier,
    then the behavior that occurs when indexing the object for property deletion with a given supported property name
    is the same as if the operation is invoked, passing
    the name as the only argument.  If the operation used to declare the named property deleter
    did not have an identifier, then the interface definition must be accompanied
    by a description of how to <dfn id="dfn-delete-an-existing-named-property" export>delete an existing named property</dfn>
    for a given property name.

Note: As with <a href="#idl-indexed-properties">indexed properties</a>,
if an [=named property getter=],
[=named property setters|setter=] or
[=named property deleters|deleter=]
is specified using an [=operation=] with an [=identifier=],
then indexing an object with a name that is not a [=supported property name=]
does not necessarily elicit the same behavior as invoking the operation with that name; the behavior
is language binding specific.


<h4 id="idl-static-attributes-and-operations">Static attributes and operations</h4>

<dfn id="dfn-static-attribute" export>Static attributes</dfn> and
<dfn id="dfn-static-operation" export>static operations</dfn> are ones that
are not associated with a particular instance of the
[=interface=]
on which it is declared, and is instead associated with the interface
itself.  Static attributes and operations are declared by using the
<code>static</code> keyword in their declarations.

It is language binding specific whether it is possible to invoke
a static operation or get or set a static attribute through a reference
to an instance of the interface.

Static attributes and operations must not be
declared on [=callback interfaces=].

<pre class="grammar" id="prod-StaticMember">
    StaticMember :
        "static" StaticMemberRest
</pre>

<pre class="grammar" id="prod-StaticMemberRest">
    StaticMemberRest :
        ReadOnly AttributeRest
        ReturnType OperationRest
</pre>

<div class="example">
    
    The following [=IDL fragment=] defines an interface
    <code class="idl">Circle</code> that has a static
    operation declared on it:
    
    <pre class="idl-example">
        interface Point { /* ... */ };
        
        interface Circle {
          attribute double cx;
          attribute double cy;
          attribute double radius;
        
          static readonly attribute long triangulationCount;
          static Point triangulate(Circle c1, Circle c2, Circle c3);
        };
    </pre>
    
    In the ECMAScript language binding, the <emu-val>Function</emu-val> object for
    <code>triangulate</code> and the accessor property for <code>triangulationCount</code>
    will exist on the [=interface object=]
    for <code class="idl">Circle</code>:
    
    <pre highlight="js">
        var circles = getCircles();           // an Array of Circle objects
        
        typeof Circle.triangulate;            // Evaluates to "function"
        typeof Circle.triangulationCount;     // Evaluates to "number"
        Circle.prototype.triangulate;         // Evaluates to undefined
        Circle.prototype.triangulationCount;  // Also evaluates to undefined
        circles[0].triangulate;               // As does this
        circles[0].triangulationCount;        // And this
        
        // Call the static operation
        var triangulationPoint = Circle.triangulate(circles[0], circles[1], circles[2]);
        
        // Find out how many triangulations we have done
        window.alert(Circle.triangulationCount);
    </pre>
</div>


<h4 id="idl-overloading">Overloading</h4>

If a [=regular operation=]
or [=static operation=]
defined on an [=interface=]
has an [=identifier=]
that is the same as the identifier of another operation on that
interface of the same kind (regular or static), then the operation is said to be
<dfn id="dfn-overloaded" export>overloaded</dfn>.  When the identifier
of an overloaded operation is used to invoke one of the
operations on an object that implements the interface, the
number and types of the arguments passed to the operation
determine which of the overloaded operations is actually
invoked.  If an interface has multiple
[=legacy callers=] defined on it,
then those legacy callers are also said to be overloaded.
In the ECMAScript language binding, <a href="#Constructor">constructors</a>
can be overloaded too.  There are some restrictions on the arguments
that overloaded operations, legacy callers and constructors can be
specified to take, and in order to describe these restrictions,
the notion of an <em>effective overload set</em> is used.

[=Operations=] and [=legacy callers=]
must not be overloaded across [=interface=]
and [=partial interface=] definitions.

<div class="note">
    
    For example, the overloads for both |f| and |g|
    are disallowed:
    
    <pre class="idl-example example">
        interface A {
          void f();
        };
        
        partial interface A {
          void f(double x);
          void g();
        };
        
        partial interface A {
          void g(DOMString x);
        };
    </pre>
    
    Note that the [{{Constructor}}] and
    [{{NamedConstructor}}]
    [=extended attributes=] are disallowed from appearing
    on [=partial interface=] definitions,
    so there is no need to also disallow overloading for constructors.
    
</div>

An <dfn id="dfn-effective-overload-set" export>effective overload set</dfn>
represents the allowable invocations for a particular
[=operation=],
constructor (specified with [{{Constructor}}]
or [{{NamedConstructor}}]),
[=legacy caller=] or
[=callback function=].
The algorithm to compute an [=effective overload set=]
operates on one of the following six types of IDL constructs, and listed with them below are
the inputs to the algorithm needed to compute the set.

 :  For regular operations
 :  For static operations
 :: *   the [=interface=] on which the [=operations=] are to be found
    *   the [=identifier=] of the operations
    *   the number of arguments to be passed
 :  For legacy callers
 :: *   the [=interface=] on which the [=legacy callers=] are to be found
    *   the number of arguments to be passed
 :  For constructors
 :: *   the [=interface=] on which the <a href="#Constructor">[Constructor]</a> [=extended attributes=] are to be found
    *   the number of arguments to be passed
 :  For named constructors
 :: *   the [=interface=] on which the <a href="#NamedConstructor">[NamedConstructor]</a> [=extended attributes=] are to be found
    *   the [=identifier=] of the named constructors
    *   the number of arguments to be passed
 :  For callback functions
 :: *   the [=callback function=]
    *   the number of arguments to be passed

An effective overload set is used, among other things, to determine whether there are ambiguities in the
overloaded operations, constructors and callers specified on an interface.

The elements of an effective overload set are tuples of the form
&lt;|callable|, |type list|, |optionality list|&gt;.  If the effective overload
set is for regular operations, static operations or legacy callers, then |callable| is an operation;
if it is for constructors or named constructors, then |callable| is an
extended attribute; and if it is for callback functions, then |callable|
is the callback function itself.  In all cases, |type list| is a list
of IDL types, and |optionality list| is a list of three possible <dfn id="dfn-optionality-value" export>optionality values</dfn> –
“required”, “optional” or “variadic” – indicating whether
the argument at a given index was declared as being [=optional argument|optional=]
or corresponds to a [=variadic=] argument.
Each tuple represents an allowable invocation of the operation,
constructor, legacy caller or callback function with an argument value list of the given types.
Due to the use of [=optional arguments=]
and [=variadic=] operations
and constructors, there may be multiple entries in an effective overload set identifying
the same operation or constructor.

The algorithm below describes how to compute an effective overload set.
The following input variables are used, if they are required:

*   the identifier of the operation or named constructor is |A|
*   the argument count is |N|
*   the interface is |I|
*   the callback function is |C|

Whenever an argument of an extended
attribute is mentioned, it is referring to an argument of the
extended attribute’s [=takes a named argument list|named argument list=].

<ol class="algorithm">
    1.  Initialize |S| to ∅.
    1.  Let |F| be a set with elements as follows, according to the kind of effective overload set:
        <dl class="switch">
             :  For regular operations
             :: The elements of |F| are the [=regular operations=] with
                identifier |A| defined on interface |I|.
             :  For static operations
             :: The elements of |F| are the [=static operations=] with
                identifier |A| defined on interface |I|.
             :  For constructors
             :: The elements of |F| are the
                <emu-nt><a href="#Constructor">[Constructor]</a></emu-nt>
                [=extended attributes=] on interface |I|.
             :  For named constructors
             :: The elements of |F| are the
                <emu-nt><a href="#NamedConstructor">[NamedConstructor]</a></emu-nt>
                [=extended attributes=] on interface |I| whose
                [=takes a named argument list|named argument lists’=]
                identifiers are |A|.
             :  For legacy callers
             :: The elements of |F| are the [=legacy callers=]
                defined on interface |I|.
             :  For callback functions
             :: The single element of |F| is the callback function itself, |C|.
        </dl>
    
    1.  Let |maxarg| be the maximum number of arguments the operations, constructor extended attributes or callback functions in |F| are declared to take.
        For [=variadic=] operations and constructor extended attributes,
        the argument on which the ellipsis appears counts as a single argument.
        
        Note: So <code>void f(long x, long... y);</code> is considered to be declared to take two arguments.
        
    1.  Let |m| be the maximum of |maxarg| and |N|.
    1.  For each operation, extended attribute or callback function |X| in |F|:
        1.  Let |n| be the number of arguments |X| is declared to take.
        1.  Let |t|<sub>0..|n|−1</sub> be a list of types, where |t|<sub>|i|</sub>
            is the type of |X|’s argument at index |i|.
        1.  Let |o|<sub>0..|n|−1</sub> be a list of [=optionality values=], where |o|<sub>|i|</sub>
            is “variadic” if |X|’s argument at index |i| is a final, variadic argument,
            “optional” if the argument is [=optional argument|optional=],
            and “required” otherwise.
        1.  Add to |S| the tuple &lt;|X|, |t|<sub>0..|n|−1</sub>, |o|<sub>0..|n|−1</sub>&gt;.
        1.  If |X| is declared to be [=variadic=], then:
            1.  Add to |S| the tuple &lt;|X|, |t|<sub>0..|n|−2</sub>, |o|<sub>0..|n|−2</sub>&gt;.
                
                Note: This leaves off the final, variadic argument.
                
            1.  For every integer |i|, such that |n| ≤ |i| ≤ |m|−1:
                1.  Let |u|<sub>0..|i|</sub> be a list of types, where |u|<sub>j</sub> = |t|<sub>j</sub> (for |j| &lt; |n|) and |u|<sub>j</sub> = |t|<sub>|n|−1</sub> (for |j| ≥ |n|).
                1.  Let |p|<sub>0..|i|</sub> be a list of [=optionality values=], where |p|<sub>j</sub> = |o|<sub>j</sub> (for |j| &lt; |n|) and |p|<sub>j</sub> = “variadic” (for |j| ≥ |n|).
                1.  Add to |S| the tuple &lt;|X|, |u|<sub>0..|i|</sub>, |p|<sub>0..|i|</sub>&gt;.
        1.  Initialize |i| to |n|−1.
        1.  While |i| ≥ 0:
            1.  If argument |i| of |X| is not [=optional argument|optional=], then break this loop.
            1.  Otherwise, add to |S| the tuple &lt;|X|, |t|<sub>0..|i|−1</sub>, |o|<sub>0..|i|−1</sub>&gt;.
            1.  Set |i| to |i|−1.
        1.  If |n| &gt; 0 and all arguments of |X| are optional, then add to |S| the tuple &lt;|X|, (), ()&gt; (where “()” represents the empty list).
    1.  The effective overload set is |S|.
</ol>

<div class="example">
    
    For the following interface:
    
    <pre class="idl-example">
        interface A {
          /* f1 */ void f(DOMString a);
          /* f2 */ void f(Node a, DOMString b, double... c);
          /* f3 */ void f();
          /* f4 */ void f(Event a, DOMString b, optional DOMString c, double... d);
        };
    </pre>
    
    assuming <code class="idl">Node</code> and <code class="idl">Event</code>
    are two other interfaces of which no object can implement both,
    the [=effective overload set=]
    for [=regular operations=] with
    identifier <code>f</code> and argument count 4 is:
    
    <div class="set">
        { &lt;f1, (DOMString), (required)&gt;,<br/>
        &lt;f2, (Node, DOMString), (required, required)&gt;,<br/>
        &lt;f2, (Node, DOMString, double), (required, required, variadic)&gt;,<br/>
        &lt;f2, (Node, DOMString, double, double), (required, required, variadic, variadic)&gt;,<br/>
        &lt;f3, (), ()&gt;,<br/>
        &lt;f4, (Event, DOMString), (required, required)&gt;,<br/>
        &lt;f4, (Event, DOMString, DOMString), (required, required, optional)&gt;,<br/>
        &lt;f4, (Event, DOMString, DOMString, double), (required, required, optional, variadic)&gt; }
    </div>
</div>

Two types are <dfn id="dfn-distinguishable" export>distinguishable</dfn> if
at most one of the two [=includes a nullable type=]
or is a <a href="#idl-dictionary">dictionary type</a>,
and at least one of the following three conditions is true:

1.  The two types (taking their [=inner types=]
    if they are [=nullable types=]) appear
    in the following table and there is a “●” mark in the corresponding entry
    or there is a letter in the corresponding entry and the designated additional
    requirement below the table is satisfied:
    
    <table id="distinguishable-table" class="matrix data">
        <tr>
            <th class="corner"></th>
            <th>boolean</th>
            <th>numeric types</th>
            <th>string types</th>
            <th>interface</th>
            <th>object</th>
            <th>callback <br/>function</th>
            <th>dictionary</th>
            <th>sequence&lt;|T|&gt;</th>
            <th>FrozenArray&lt;|T|&gt;</th>
            <th>RegExp</th>
            <th>exception types</th>
            <th>buffer source types</th>
        </tr>
        <tr>
            <th>boolean</th>
            <td></td>
            <td>●</td>
            <td>●</td>
            <td>●</td>
            <td>●</td>
            <td>●</td>
            <td>●</td>
            <td>●</td>
            <td>●</td>
            <td>●</td>
            <td>●</td>
            <td>●</td>
        </tr>
        <tr>
            <th>numeric types</th>
            <td class="belowdiagonal"></td>
            <td></td>
            <td>●</td>
            <td>●</td>
            <td>●</td>
            <td>●</td>
            <td>●</td>
            <td>●</td>
            <td>●</td>
            <td>●</td>
            <td>●</td>
            <td>●</td>
        </tr>
        <tr>
            <th>string types</th>
            <td class="belowdiagonal"></td>
            <td class="belowdiagonal"></td>
            <td></td>
            <td>●</td>
            <td>●</td>
            <td>●</td>
            <td>●</td>
            <td>●</td>
            <td>●</td>
            <td>●</td>
            <td>●</td>
            <td>●</td>
        </tr>
        <tr>
            <th>interface</th>
            <td class="belowdiagonal"></td>
            <td class="belowdiagonal"></td>
            <td class="belowdiagonal"></td>
            <td>(a)</td>
            <td></td>
            <td>(b)</td>
            <td>(b)</td>
            <td>●</td>
            <td>●</td>
            <td>●</td>
            <td>●</td>
            <td>●</td>
        </tr>
        <tr>
            <th>object</th>
            <td class="belowdiagonal"></td>
            <td class="belowdiagonal"></td>
            <td class="belowdiagonal"></td>
            <td class="belowdiagonal"></td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
        </tr>
        <tr>
            <th>callback function</th>
            <td class="belowdiagonal"></td>
            <td class="belowdiagonal"></td>
            <td class="belowdiagonal"></td>
            <td class="belowdiagonal"></td>
            <td class="belowdiagonal"></td>
            <td></td>
            <td></td>
            <td>●</td>
            <td>●</td>
            <td>●</td>
            <td>●</td>
            <td>●</td>
        </tr>
        <tr>
            <th>dictionary</th>
            <td class="belowdiagonal"></td>
            <td class="belowdiagonal"></td>
            <td class="belowdiagonal"></td>
            <td class="belowdiagonal"></td>
            <td class="belowdiagonal"></td>
            <td class="belowdiagonal"></td>
            <td></td>
            <td>●</td>
            <td>●</td>
            <td>●</td>
            <td>●</td>
            <td>●</td>
        </tr>
        <tr>
            <th>sequence&lt;|T|&gt;</th>
            <td class="belowdiagonal"></td>
            <td class="belowdiagonal"></td>
            <td class="belowdiagonal"></td>
            <td class="belowdiagonal"></td>
            <td class="belowdiagonal"></td>
            <td class="belowdiagonal"></td>
            <td class="belowdiagonal"></td>
            <td></td>
            <td></td>
            <td>●</td>
            <td>●</td>
            <td>●</td>
        </tr>
        <tr>
            <th>FrozenArray&lt;|T|&gt;</th>
            <td class="belowdiagonal"></td>
            <td class="belowdiagonal"></td>
            <td class="belowdiagonal"></td>
            <td class="belowdiagonal"></td>
            <td class="belowdiagonal"></td>
            <td class="belowdiagonal"></td>
            <td class="belowdiagonal"></td>
            <td class="belowdiagonal"></td>
            <td></td>
            <td>●</td>
            <td>●</td>
            <td>●</td>
        </tr>
        <tr>
            <th>RegExp</th>
            <td class="belowdiagonal"></td>
            <td class="belowdiagonal"></td>
            <td class="belowdiagonal"></td>
            <td class="belowdiagonal"></td>
            <td class="belowdiagonal"></td>
            <td class="belowdiagonal"></td>
            <td class="belowdiagonal"></td>
            <td class="belowdiagonal"></td>
            <td class="belowdiagonal"></td>
            <td></td>
            <td>●</td>
            <td>●</td>
        </tr>
        <tr>
            <th>exception types</th>
            <td class="belowdiagonal"></td>
            <td class="belowdiagonal"></td>
            <td class="belowdiagonal"></td>
            <td class="belowdiagonal"></td>
            <td class="belowdiagonal"></td>
            <td class="belowdiagonal"></td>
            <td class="belowdiagonal"></td>
            <td class="belowdiagonal"></td>
            <td class="belowdiagonal"></td>
            <td class="belowdiagonal"></td>
            <td></td>
            <td>●</td>
        </tr>
        <tr>
            <th>buffer source types</th>
            <td class="belowdiagonal"></td>
            <td class="belowdiagonal"></td>
            <td class="belowdiagonal"></td>
            <td class="belowdiagonal"></td>
            <td class="belowdiagonal"></td>
            <td class="belowdiagonal"></td>
            <td class="belowdiagonal"></td>
            <td class="belowdiagonal"></td>
            <td class="belowdiagonal"></td>
            <td class="belowdiagonal"></td>
            <td class="belowdiagonal"></td>
            <td></td>
        </tr>
    </table>
    
    <ol type="a">
        1.  The two identified [=interfaces=] are
            not the same, it is not possible for a single [=platform object=]
            to implement both [=interfaces=],
            and it is not the case that both are [=callback interfaces=].
        1.  The interface type is not a [=callback interface=].
    </ol>
1.  One type is a [=union type=] or nullable union type,
    the other is neither a union type nor a nullable union type, and each
    [=member type=] of the first is distinguishable
    with the second.
1.  Both types are either a union type or nullable union type, and each member type of the one
    is distinguishable with each member type of the other.

Note: <a href="#idl-promise">Promise types</a> do not appear in the above table, and as a consequence
are not distinguishable with any other type.

If there is more than one entry in an [=effective overload set=]
that has a given type list length, then for those entries there
must be an index |i| such
that for each pair of entries the types at index |i| are
[=distinguishable=].
The lowest such index is termed the <dfn id="dfn-distinguishing-argument-index" export>distinguishing argument index</dfn>
for the entries of the effective overload set with the given type list length.

<div class="example">
    
    Consider the effective overload set shown in the previous example.
    There are multiple entries in the set with type lists 2, 3 and 4.
    For each of these type list lengths, the [=distinguishing argument index=] is 0, since <code class="idl">Node</code> and
    <code class="idl">Event</code> are [=distinguishable=].
    
    The following use of overloading however is invalid:
    
    <pre class="idl-example">
        interface B {
          void f(DOMString x);
          void f(double x);
        };
    </pre>
    
    since {{DOMString}} and
    {{double}} are not distinguishable.
    
</div>

In addition, for each index |j|, where |j| is less than the
[=distinguishing argument index=]
for a given type list length, the types at index |j| in
all of the entries’ type lists must be the same
and the booleans in the corresponding list indicating argument optionality must
be the same.

<div class="example">
    
    The following is invalid:
    
    <pre class="idl-example">
        interface B {
          /* f1 */ void f(DOMString w);
          /* f2 */ void f(long w, double x, Node y, Node z);
          /* f3 */ void f(double w, double x, DOMString y, Node z);
        };
    </pre>
    
    For argument count 4, the effective overload set is:
    
    <div class="set">
        { &lt;f1, (DOMString), (required)&gt;,<br/>
        &lt;f2, (long, double, Node, Node), (required, required, required, required)&gt;,<br/>
        &lt;f3, (double, double, DOMString, Node), (required, required, required, required)&gt; }
    </div>
    
    Looking at entries with type list length 4, the
    [=distinguishing argument index=]
    is 2, since <code class="idl">Node</code> and
    {{DOMString}} are [=distinguishable=].
    However, since the arguments in these two overloads at index 0 are different,
    the overloading is invalid.
    
</div>


<h4 id="idl-iterable">Iterable declarations</h4>

An [=interface=] can be declared to be
<dfn id="dfn-iterable" export>iterable</dfn> by using an <dfn id="dfn-iterable-declaration" export>iterable declaration</dfn>
(matching <emu-nt><a href="#prod-Iterable">Iterable</a></emu-nt>) in the body of the interface.

<pre highlight="idl" class="syntax">
    iterable&lt;value-type&gt;;
    iterable&lt;key-type, value-type&gt;;
</pre>

Objects implementing an interface that is declared to be iterable
support being iterated over to obtain a sequence of values.

Note: In the ECMAScript language binding, an interface that is iterable
will have “entries”, “forEach”, “keys”, “values” and [=@@iterator=]
properties on its [=interface prototype object=].

If a single type parameter is given, then the interface has a
<dfn id="dfn-value-iterator" export>value iterator</dfn> and provides
values of the specified type.
If two type parameters are given, then the interface has a
<dfn id="dfn-pair-iterator" export>pair iterator</dfn> and provides
value pairs, where the first value is a key and the second is the
value associated with the key.

A [=value iterator=]
must only be declared on an interface
that [=support indexed properties|supports indexed properties=]
and has an [=integer types|integer-typed=]
[=attribute=] named “length”.
The value-type of the [=value iterator=]
must be the same as the type returned by
the [=indexed property getter=].
A [=value iterator=] is implicitly
defined to iterate over the object’s indexed properties.

A [=pair iterator=]
must not be declared on an interface
that [=support indexed properties|supports indexed properties=].
Prose accompanying an interface with a
[=pair iterator=]
must define what the list of
<dfn id="dfn-value-pairs-to-iterate-over" export>value pairs to iterate over</dfn>
is.

<div class="note">
    
    The ECMAScript forEach method that is generated for a
    [=value iterator=]
    invokes its callback like Array.prototype.forEach does, and the forEach
    method for a [=pair iterator=]
    invokes its callback like Map.prototype.forEach does.
    
    Since [=value iterators=]
    are currently allowed only on interfaces that
    [=support indexed properties=],
    it makes sense to use an Array-like forEach method.
    There may be a need for [=value iterators=]
    (a) on interfaces that do not
    [=support indexed properties=],
    or (b) with a forEach method that instead invokes its callback like
    Set.protoype.forEach (where the key is the same as the value).
    If you’re creating an API that needs such a forEach method, please send a request to
    <a href="mailto:public-script-coord@w3.org">public-script-coord@w3.org</a>.
    
</div>

Note: This is how [=array iterator objects=] work.
For interfaces that [=support indexed properties=],
the iterator objects returned by “entries”, “keys”, “values” and [=@@iterator=] are
actual [=array iterator objects=].

Interfaces with iterable declarations must not
have any [=interface members=]
named “entries”, “keys” or “values”,
or have any [=inherited interfaces|inherited=]
or [=consequential interfaces|consequential=]
interfaces that have interface members with these names.

<div class="example">
    
    Consider the following interface <code class="idl">SessionManager</code>, which allows access to
    a number of <code class="idl">Session</code> objects:
    
    <pre class="idl-example">
        interface SessionManager {
          Session getSessionForUser(DOMString username);
          readonly attribute unsigned long sessionCount;
        
          iterable&lt;Session&gt;;
        };
        
        interface Session {
          readonly attribute DOMString username;
          // ...
        };
    </pre>
    
    The behavior of the iterator could be defined like so:
    
    <blockquote>
        
        The <a class="dfnref" href="#">values to iterate over</a>
        are the open <code class="idl">Session</code> objects
        on the <code class="idl">SessionManager</code> sorted by username.
        
        <p class="issue">
            Fix reference to removed definition for "values to iterate over".
        </p>
    </blockquote>
    
    In the ECMAScript language binding, the [=interface prototype object=]
    for the <code class="idl">SessionManager</code> [=interface=]
    has a <code>values</code> method that is a function, which, when invoked,
    returns an iterator object that itself has a <code>next</code> method that returns the
    next value to be iterated over.  It has <code>values</code> and <code>entries</code>
    methods that iterate over the indexes of the list of session objects
    and [index, session object] pairs, respectively.  It also has
    a [=@@iterator=] method that allows a <code class="idl">SessionManager</code>
    to be used in a <code>for..of</code> loop:
    
    <pre highlight="js">
        // Get an instance of SessionManager.
        // Assume that it has sessions for two users, "anna" and "brian".
        var sm = getSessionManager();
        
        typeof SessionManager.prototype.values;            // Evaluates to "function"
        var it = sm.values();                              // values() returns an iterator object
        String(it);                                        // Evaluates to "[object SessionManager Iterator]"
        typeof it.next;                                    // Evaluates to "function"
        
        // This loop will alert "anna" and then "brian".
        for (;;) {
          let result = it.next();
          if (result.done) {
            break;
          }
          let session = result.value;
          window.alert(session.username);
        }
        
        // This loop will also alert "anna" and then "brian".
        for (let session of sm) {
          window.alert(session.username);
        }
    </pre>
</div>

An interface must not have more than one
[=iterable declaration=].
The [=inherited interfaces|inherited=]
and [=consequential interfaces|consequential=]
interfaces of an interface with an
[=iterable declaration=]
must not also have an
[=iterable declaration=].
An interface with an [=iterable declaration=]
and its [=inherited interfaces|inherited=]
and [=consequential interfaces|consequential=]
interfaces must not have a
[=maplike declaration=] or
[=setlike declaration=].

The following extended attributes are applicable to [=iterable declarations=]:
[{{Exposed}}],
[{{SecureContext}}].

<pre class="grammar" id="prod-Iterable">
    Iterable :
        "iterable" "&lt;" Type OptionalType "&gt;" ";"
</pre>

<pre class="grammar" id="prod-OptionalType">
    OptionalType :
        "," Type
        ε
</pre>


<h4 id="idl-maplike">Maplike declarations</h4>

An [=interface=] can be declared to be
<dfn id="dfn-maplike" export>maplike</dfn> by using a <dfn id="dfn-maplike-declaration" export>maplike declaration</dfn>
(matching <emu-nt><a href="#prod-ReadWriteMaplike">ReadWriteMaplike</a></emu-nt> or
<emu-t>readonly</emu-t> <emu-nt><a href="#prod-MaplikeRest">MaplikeRest</a></emu-nt>) in the body of the interface.

<pre highlight="idl" class="syntax">
    readonly maplike&lt;key-type, value-type&gt;;
    maplike&lt;key-type, value-type&gt;;
</pre>

Objects implementing an interface that is declared to be maplike
represent an ordered list of key–value pairs known as its <dfn id="dfn-map-entries" export>map entries</dfn>.
The types used for the keys and values are given in the angle
brackets of the maplike declaration.  Keys are required to be unique.

The [=map entries=] of an object
implementing a [=maplike=] interface is empty at
the of the object’s creation.  Prose accompanying the interface can
describe how the [=map entries=]
of an object change.

Maplike interfaces support an API for querying the map entries
appropriate for the language binding.  If the <code>readonly</code>
keyword is not used, then it also supports an API for modifying
the map entries.

Note: In the ECMAScript language binding, the API for interacting
with the map entries is similar to that available on ECMAScript
<emu-val>Map</emu-val> objects.  If the <code>readonly</code>
keyword is used, this includes “entries”, “forEach”, “get”, “has”,
“keys”, “values”, [=@@iterator=] methods and a “size” getter.
For read–write maplikes, it also includes “clear”, “delete” and
“set” methods.

Maplike interfaces must not
have any [=interface members=]
named “entries”, “forEach”, “get”, “has”, “keys”, “size”, or “values”,
or have any [=inherited interfaces|inherited=]
or [=consequential interfaces|consequential=]
interfaces that have interface members with these names.
Read–write maplike interfaces must not
have any [=attributes=]
or [=constants=] named
“clear”, “delete”, or “set”, or have any [=inherited interfaces|inherited=]
or [=consequential interfaces|consequential=]
interfaces that have attributes or constants with these names.

Note: Operations named “clear”, “delete”, or “set” are allowed on read–write maplike
interfaces and will prevent the default implementation of these methods being
added to the interface prototype object in the ECMAScript language binding.
This allows the default behavior of these operations to be overridden.

An interface must not have more than one
[=maplike declaration=].
The [=inherited interfaces|inherited=]
and [=consequential interfaces|consequential=]
interfaces of a maplike interface must not
also have a [=maplike declaration=].
A maplike interface and its [=inherited interfaces|inherited=]
and [=consequential interfaces|consequential=]
interfaces must not have an
[=iterable declaration=] or
[=setlike declaration=].

<div data-fill-with="grammar-ReadOnlyMember"></div>

<div data-fill-with="grammar-ReadOnlyMemberRest"></div>

<pre class="grammar" id="prod-ReadWriteMaplike">
    ReadWriteMaplike :
        MaplikeRest
</pre>

<pre class="grammar" id="prod-MaplikeRest">
    MaplikeRest :
        "maplike" "&lt;" Type "," Type "&gt;" ";"
</pre>

No [=extended attributes=]
defined in this specification are applicable to [=maplike declarations=].

<p class="issue">
    Add example.
</p>


<h4 id="idl-setlike">Setlike declarations</h4>

An [=interface=] can be declared to be
<dfn id="dfn-setlike" export>setlike</dfn> by using a <dfn id="dfn-setlike-declaration" export>setlike declaration</dfn>
(matching <emu-nt><a href="#prod-ReadWriteSetlike">ReadWriteSetlike</a></emu-nt> or
<emu-t>readonly</emu-t> <emu-nt><a href="#prod-SetlikeRest">SetlikeRest</a></emu-nt>) in the body of the interface.

<pre highlight="idl" class="syntax">
    readonly setlike&lt;type&gt;;
    setlike&lt;type&gt;;
</pre>

Objects implementing an interface that is declared to be setlike
represent an ordered list of values known as its <dfn id="dfn-set-entries" export>set entries</dfn>.
The type of the values is given in the angle
brackets of the setlike declaration.  Values are required to be unique.

The [=set entries=] of an object
implementing a [=setlike=] interface is empty at
the of the object’s creation.  Prose accompanying the interface can
describe how the [=set entries=]
of an object change.

Setlike interfaces support an API for querying the set entries
appropriate for the language binding.  If the <code>readonly</code>
keyword is not used, then it also supports an API for modifying
the set entries.

Note: In the ECMAScript language binding, the API for interacting
with the set entries is similar to that available on ECMAScript
<emu-val>Set</emu-val> objects.  If the <code>readonly</code>
keyword is used, this includes “entries”, “forEach”, “has”,
“keys”, “values”, [=@@iterator=] methods and a “size” getter.
For read–write setlikes, it also includes “add”, “clear”, and “delete” methods.

Setlike interfaces must not
have any [=interface members=]
named “entries”, “forEach”, “has”, “keys”, “size”, or “values”,
or have any [=inherited interfaces|inherited=]
or [=consequential interfaces|consequential=]
interfaces that have interface members with these names..
Read–write setlike interfaces must not
have any [=attributes=]
or [=constants=] named
“add”, “clear”, or “delete”, or have any [=inherited interfaces|inherited=]
or [=consequential interfaces|consequential=]
interfaces that have attributes or constants with these names.

Note: Operations named “add”, “clear”, or “delete” are allowed on read–write setlike
interfaces and will prevent the default implementation of these methods being
added to the interface prototype object in the ECMAScript language binding.
This allows the default behavior of these operations to be overridden.

An interface must not have more than one
[=setlike declaration=].
The [=inherited interfaces|inherited=]
and [=consequential interfaces|consequential=]
interfaces of a setlike interface must not
also have a [=setlike declaration=].
A setlike interface and its [=inherited interfaces|inherited=]
and [=consequential interfaces|consequential=]
interfaces must not have an
[=iterable declaration=] or
[=maplike declaration=].

<div data-fill-with="grammar-ReadOnlyMember"></div>

<div data-fill-with="grammar-ReadOnlyMemberRest"></div>

<pre class="grammar" id="prod-ReadWriteSetlike">
    ReadWriteSetlike :
        SetlikeRest
</pre>

<pre class="grammar" id="prod-SetlikeRest">
    SetlikeRest :
        "setlike" "&lt;" Type "&gt;" ";"
</pre>

No [=extended attributes=]
defined in this specification are applicable to [=setlike declarations=].

<p class="issue">
    Add example.
</p>


<h3 id="idl-dictionaries">Dictionaries</h3>

A <dfn id="dfn-dictionary" export>dictionary</dfn> is a definition (matching
<emu-nt><a href="#prod-Dictionary">Dictionary</a></emu-nt>)
used to define an associative array data type with a fixed, ordered set of key–value pairs,
termed <dfn id="dfn-dictionary-member" export>dictionary members</dfn>,
where keys are strings and values are of a particular type specified in the definition.

<pre highlight="idl" class="syntax">
    dictionary identifier {
      dictionary-members…
    };
</pre>

Dictionaries are always passed by value.  In language bindings where a dictionary is represented by an object of some kind, passing a
dictionary to a [=platform object=] will not result in a reference to the dictionary being kept by that object.
Similarly, any dictionary returned from a platform object will be a copy and modifications made to it will not be visible to the platform object.

A dictionary can be defined to <dfn id="dfn-inherit-dictionary" for="dictionary" export>inherit</dfn> from another dictionary.
If the identifier of the dictionary is followed by a colon and a [=identifier=],
then that identifier identifies the inherited dictionary.  The identifier
must identify a dictionary.

A dictionary must not be declared such that
its inheritance hierarchy has a cycle.  That is, a dictionary
|A| cannot inherit from itself, nor can it inherit from another
dictionary |B| that inherits from |A|, and so on.

<pre highlight="idl" class="syntax">
    dictionary Base {
      dictionary-members…
    };
    
    dictionary Derived : Base {
      dictionary-members…
    };
</pre>

The <dfn id="dfn-inherited-dictionaries" export>inherited dictionaries</dfn> of
a given dictionary |D| is the set of all dictionaries that |D|
inherits from, directly or indirectly.  If |D| does not [=inherit=]
from another dictionary, then the set is empty.  Otherwise, the set
includes the dictionary |E| that |D| [=inherits=]
from and all of |E|’s [=inherited dictionaries=].

A dictionary value of type |D| can have key–value pairs corresponding
to the dictionary members defined on |D| and on any of |D|’s
[=inherited dictionaries=].
On a given dictionary value, the presence of each dictionary member
is optional, unless that member is specified as required.
When specified in the dictionary value, a dictionary member is said to be
<dfn id="dfn-present" export>present</dfn>, otherwise it is [=present|not present=].
Dictionary members can also optionally have a <dfn id="dfn-dictionary-member-default-value" for="dictionary member" export>default value</dfn>, which is
the value to use for the dictionary member when passing a value to a
[=platform object=] that does
not have a specified value.  Dictionary members with default values are
always considered to be present.

Advisement: As with [=default value|operation argument default values=],
is strongly suggested not to use of <emu-val>true</emu-val> as the
[=default value=] for
{{boolean}}-typed
[=dictionary members=],
as this can be confusing for authors who might otherwise expect the default
conversion of <emu-val>undefined</emu-val> to be used (i.e., <emu-val>false</emu-val>).

Each [=dictionary member=] (matching
<emu-nt><a href="#prod-DictionaryMember">DictionaryMember</a></emu-nt>) is specified
as a type (matching <emu-nt><a href="#prod-Type">Type</a></emu-nt>) followed by an
[=identifier=]
(given by an <emu-nt><a href="#prod-identifier">identifier</a></emu-nt> token following
the type).  The identifier is the key name of the key–value pair.
If the <emu-nt><a href="#prod-Type">Type</a></emu-nt>
is an [=identifier=]
followed by <code>?</code>, then the identifier
must identify an
interface, [=enumeration=],
[=callback function=] or [=typedef=].
If the dictionary member type is an identifier
not followed by <code>?</code>, then the identifier must
identify any one of those definitions or a [=dictionary=].

<pre highlight="idl" class="syntax">
    dictionary identifier {
      type identifier;
    };
</pre>

If the identifier is followed by a <span class="char">U+003D EQUALS SIGN ("=")</span>
and a value (matching <emu-nt><a href="#prod-DefaultValue">DefaultValue</a></emu-nt>),
then that gives the dictionary member its [=default value=].

<pre highlight="idl" class="syntax">
    dictionary identifier {
      type identifier = value;
    };
</pre>

When a boolean literal token (<code>true</code> or <code>false</code>),
the <code>null</code> token,
an <emu-nt><a href="#prod-integer">integer</a></emu-nt> token, a
<emu-nt><a href="#prod-float">float</a></emu-nt> token,
one of the three special floating point literal values (<code>Infinity</code>,
<code>-Infinity</code> or <code>NaN</code>),
a <emu-nt><a href="#prod-string">string</a></emu-nt> token or
the two token sequence <code>[]</code> used as the
[=default value=],
it is interpreted in the same way as for an [=operation=]’s
[=default value|optional argument default value=].

If the type of the [=dictionary member=]
is an [=enumeration=], then its
[=default value=] if specified must
be one of the [=enumeration values|enumeration’s values=].

If the type of the dictionary member is preceded by the
<code>required</code> keyword, the member is considered a
<dfn id="required-dictionary-member" export>required dictionary member</dfn>
and must be present on the dictionary.  A
[=required dictionary member=] must not have a default value.

<pre highlight="idl" class="syntax">
    dictionary identifier {
      required type identifier;
    };
</pre>

The type of a dictionary member must not include
the dictionary it appears on.  A type includes a dictionary |D|
if at least one of the following is true:

*   the type is |D|
*   the type is a dictionary that [=inherits=] from |D|
*   the type is a [=nullable type=]
    whose [=inner type=] includes |D|
*   the type is a <a href="#idl-sequence">sequence type</a> or <a href="#idl-frozen-array">frozen array</a>
    whose element type includes |D|
*   the type is a [=union type=],
    one of whose [=member types=]
    includes |D|
*   the type is a dictionary, one of whose members or inherited members has
    a type that includes |D|

As with interfaces, the IDL for dictionaries can be split into multiple parts
by using <dfn id="dfn-partial-dictionary" export>partial dictionary</dfn> definitions
(matching <emu-t>partial</emu-t> <emu-nt><a href="#prod-Dictionary">Dictionary</a></emu-nt>).
The [=identifier=] of a partial
dictionary definition must be the same as the
identifier of a dictionary definition.  All of the members that appear on each
of the partial dictionary definitions are considered to be members of
the dictionary itself.

<pre highlight="idl" class="syntax">
    dictionary SomeDictionary {
      dictionary-members…
    };
    
    partial dictionary SomeDictionary {
      dictionary-members…
    };
</pre>

Note: As with partial interface definitions, partial dictionary definitions are intended for use as a specification
editorial aide, allowing the definition of an interface to be separated
over more than one section of the document, and sometimes multiple documents.

The order of the [=dictionary members=]
on a given dictionary is such that inherited dictionary members are ordered
before non-inherited members, and the dictionary members on the one
dictionary definition (including any partial dictionary definitions) are
ordered lexicographically by the Unicode codepoints that comprise their
identifiers.

<div class="note">
    
    For example, with the following definitions:
    
    <pre class="idl-example example">
        dictionary B : A {
          long b;
          long a;
        };
        
        dictionary A {
          long c;
          long g;
        };
        
        dictionary C : B {
          long e;
          long f;
        };
        
        partial dictionary A {
          long h;
          long d;
        };
    </pre>
    
    the order of the [=dictionary members=]
    of a dictionary value of type <code class="idl">C</code> is
    c, d, g, h, a, b, e, f.
    
    Dictionaries are required to have their members ordered because
    in some language bindings the behavior observed when passing
    a dictionary value to a platform object depends on the order
    the dictionary members are fetched.  For example, consider the
    following additional interface:
    
    <pre class="idl-example example">
        interface Something {
          void f(A a);
        };
    </pre>
    
    and this ECMAScript code:
    
    <pre highlight="js">
        var something = getSomething();  // Get an instance of Something.
        var x = 0;
        
        var dict = { };
        Object.defineProperty(dict, "d", { get: function() { return ++x; } });
        Object.defineProperty(dict, "c", { get: function() { return ++x; } });
        
        something.f(dict);
    </pre>
    
    The order that the dictionary members are fetched in determines
    what values they will be taken to have.  Since the order for
    <code class="idl">A</code> is defined to be c then d,
    the value for c will be 1 and the value for d will be 2.
    
</div>

The identifier of a dictionary member must not be
the same as that of another dictionary member defined on the dictionary or
on that dictionary’s [=inherited dictionaries=].

Dictionaries must not be used as the type of an
[=attribute=] or
[=constant=].

The following extended attributes are applicable to dictionaries:
[{{Constructor}}],
[{{Exposed}}],
[{{SecureContext}}],

The following extended attributes are applicable to dictionary members:
[{{Clamp}}],
[{{EnforceRange}}].

<div data-fill-with="grammar-Partial"></div>

<div data-fill-with="grammar-PartialDefinition"></div>

<pre class="grammar" id="prod-Dictionary">
    Dictionary :
        "dictionary" identifier Inheritance "{" DictionaryMembers "}" ";"
</pre>

<pre class="grammar" id="prod-DictionaryMembers">
    DictionaryMembers :
        ExtendedAttributeList DictionaryMember DictionaryMembers
        ε
</pre>

<pre class="grammar" id="prod-DictionaryMember">
    DictionaryMember :
        Required Type identifier Default ";"
</pre>

<pre class="grammar" id="prod-PartialDictionary">
    PartialDictionary :
        "dictionary" identifier "{" DictionaryMembers "}" ";"
</pre>

<pre class="grammar" id="prod-Default">
    Default :
        "=" DefaultValue
        ε
</pre>

<div data-fill-with="grammar-DefaultValue"></div>

<div data-fill-with="grammar-Inheritance"></div>

<div class="example">
    
    One use of dictionary types is to allow a number of optional arguments to
    an [=operation=] without being
    constrained as to the order they are specified at the call site.  For example,
    consider the following [=IDL fragment=]:
    
    <pre class="idl-example">
        [Constructor]
        interface Point {
          attribute double x;
          attribute double y;
        };
        
        dictionary PaintOptions {
          DOMString? fillPattern = "black";
          DOMString? strokePattern = null;
          Point position;
        };
        
        interface GraphicsContext {
          void drawRectangle(double width, double height, optional PaintOptions options);
        };
    </pre>
    
    In an ECMAScript implementation of the IDL, an <emu-val>Object</emu-val>
    can be passed in for the optional <code class="idl">PaintOptions</code> dictionary:
    
    <pre highlight="js">
        // Get an instance of GraphicsContext.
        var ctx = getGraphicsContext();
        
        // Draw a rectangle.
        ctx.drawRectangle(300, 200, { fillPattern: "red", position: new Point(10, 10) });
    </pre>
    
    Both fillPattern and strokePattern are given [=default values=],
    so if they are omitted, the definition of drawRectangle can assume that they
    have the given default values and not include explicit wording to handle
    their non-presence.
    
</div>


<h3 id="idl-exceptions">Exceptions</h3>

An <dfn id="dfn-exception" export>exception</dfn> is a type of object that
represents an error and which can be thrown or treated as a first
class value by implementations.  Web IDL does not allow exceptions
to be defined, but instead has a number of pre-defined exceptions
that specifications can reference and throw in their definition of
operations, attributes, and so on.  Exceptions have an
<dfn id="dfn-exception-error-name" for="exception" export>error name</dfn>,
a {{DOMString}},
which is the type of error the exception represents, and a
<dfn id="dfn-exception-message" for="exception" export>message</dfn>, which is an optional,
user agent-defined value that provides human readable details of the error.

There are two kinds of exceptions available to be thrown from specifications.
The first is a <dfn id="dfn-simple-exception" export>simple exception</dfn>, which
is identified by one of the following names:

*   "<dfn exception><code>Error</code></dfn>"
*   "<dfn exception><code>EvalError</code></dfn>"
*   "<dfn exception><code>RangeError</code></dfn>"
*   "<dfn exception><code>ReferenceError</code></dfn>"
*   "<dfn exception><code>TypeError</code></dfn>"
*   "<dfn exception><code>URIError</code></dfn>"

These correspond to all of the [=ECMAScript error objects=] (apart from
<emu-val>SyntaxError</emu-val>, which is deliberately omitted as
it is for use only by the ECMAScript parser).
The meaning of
each [=simple exception=] matches
its corresponding <emu-val>Error</emu-val> object in the
ECMAScript specification.

The second kind of exception is a <dfn id="dfn-DOMException" interface export>DOMException</dfn>,
which is an exception that encapsulates a name and an optional integer code,
for compatibility with historically defined exceptions in the DOM.

For [=simple exceptions=],
the [=error name=] is the name
of the exception.
For a [=DOMException=],
the [=error name=] must
be one of the names listed in the [=error names table=]
below.  The table also indicates the [=DOMException=]'s integer code
for that error name, if it has one.

There are two <a href="#idl-types">types</a> that can be used to refer to
exception objects: {{Error!!interface}}, which encompasses all exceptions,
and {{DOMException}} which includes just DOMException objects.
This allows for example an [=operation=]
to be declared to have a [=DOMException=]
[=return type=] or an [=attribute=]
to be of type {{Error!!interface}}.

Exceptions can be <dfn id="dfn-create-exception" for="exception" export>created</dfn> by providing its
[=error name=].
Exceptions can also be <dfn id="dfn-throw" for="exception" export lt="throw|thrown">thrown</dfn>, by providing the
same details required to [=created|create=] one.

The resulting behavior from creating and throwing an exception is language binding-specific.

Note: See [[#es-creating-throwing-exceptions]] for details on what creating and throwing an exception
entails in the ECMAScript language binding.

<div class="example">
    
    Here is are some examples of wording to use to create and throw exceptions.
    To throw a new [=simple exception=] named
    {{TypeError}}:
    
    <blockquote>
        
        [=Throw=] a TypeError.
        
    </blockquote>
    
    To throw a new [=DOMException=] with
    [=error name=]
    {{IndexSizeError}}:
    
    <blockquote>
        
        [=Throw=] an IndexSizeError.
        
    </blockquote>
    
    To create a new [=DOMException=] with
    [=error name=]
    {{SyntaxError}}:
    
    <blockquote>
        
        Let |object| be a newly [=created=] SyntaxError.
        
    </blockquote>
</div>


<h4 id="idl-DOMException-error-names">Error names</h4>

The <dfn id="dfn-error-names-table" export>error names table</dfn> below lists all the allowed error names
for [=DOMExceptions=], a description,
and legacy code values.

Note: If an error name is not listed here, please file a bug as indicated at the top of this specification and it will be addressed shortly. Thanks!

<table id="error-names" class="vert data">
    <thead>
        <tr><th>Name</th><th>Description</th><th>Legacy [=DOMException|code=] name and value</th></tr>
    </thead>
    <tbody>
        <tr>
            <td>"<dfn id="indexsizeerror" exception export><code>IndexSizeError</code></dfn>"</td>
            <td>The index is not in the allowed range.</td>
            <td><dfn id="dom-domexception-index_size_err" for="DOMException" const export><code>INDEX_SIZE_ERR</code></dfn> (1)</td>
        </tr>
        <tr>
            <td>"<dfn id="hierarchyrequesterror" exception export><code>HierarchyRequestError</code></dfn>"</td>
            <td>The operation would yield an incorrect <a href="https://dom.spec.whatwg.org/#concept-node-tree" title="concept-node-tree">node tree</a>.</td>
            <td><dfn id="dom-domexception-hierarchy_request_err" for="DOMException" const export><code>HIERARCHY_REQUEST_ERR</code></dfn> (3)</td>
        </tr>
        <tr>
            <td>"<dfn id="wrongdocumenterror" exception export><code>WrongDocumentError</code></dfn>"</td>
            <td>The object is in the wrong <a href="https://dom.spec.whatwg.org/#concept-document" title="concept-document">document</a>.</td>
            <td><dfn id="dom-domexception-wrong_document_err" for="DOMException" const export><code>WRONG_DOCUMENT_ERR</code></dfn> (4)</td>
        </tr>
        <tr>
            <td>"<dfn id="invalidcharactererror" exception export><code>InvalidCharacterError</code></dfn>"</td>
            <td>The string contains invalid characters.</td>
            <td><dfn id="dom-domexception-invalid_character_err" for="DOMException" const export><code>INVALID_CHARACTER_ERR</code></dfn> (5)</td>
        </tr>
        <tr>
            <td>"<dfn id="nomodificationallowederror" exception export><code>NoModificationAllowedError</code></dfn>"</td>
            <td>The object can not be modified.</td>
            <td><dfn id="dom-domexception-no_modification_allowed_err" for="DOMException" const export><code>NO_MODIFICATION_ALLOWED_ERR</code></dfn> (7)</td>
        </tr>
        <tr>
            <td>"<dfn id="notfounderror" exception export><code>NotFoundError</code></dfn>"</td>
            <td>The object can not be found here.</td>
            <td><dfn id="dom-domexception-not_found_err" for="DOMException" const export><code>NOT_FOUND_ERR</code></dfn> (8)</td>
        </tr>
        <tr>
            <td>"<dfn id="notsupportederror" exception export><code>NotSupportedError</code></dfn>"</td>
            <td>The operation is not supported.</td>
            <td><dfn id="dom-domexception-not_supported_err" for="DOMException" const export><code>NOT_SUPPORTED_ERR</code></dfn> (9)</td>
        </tr>
        <tr>
            <td>"<dfn id="inuseattributeerror" exception export><code>InUseAttributeError</code></dfn>"</td>
            <td>The attribute is in use.</td>
            <td><dfn id="dom-domexception-inuse_attribute_err" for="DOMException" const export><code>INUSE_ATTRIBUTE_ERR</code></dfn> (10)</td>
        </tr>
        <tr>
            <td>"<dfn id="invalidstateerror" exception export><code>InvalidStateError</code></dfn>"</td>
            <td>The object is in an invalid state.</td>
            <td><dfn id="dom-domexception-invalid_state_err" for="DOMException" const export><code>INVALID_STATE_ERR</code></dfn> (11)</td>
        </tr>
        <tr>
            <td>"<dfn id="syntaxerror" exception export><code>SyntaxError</code></dfn>"</td>
            <td>The string did not match the expected pattern.</td>
            <td><dfn id="dom-domexception-syntax_err" for="DOMException" const export><code>SYNTAX_ERR</code></dfn> (12)</td>
        </tr>
        <tr>
            <td>"<dfn id="invalidmodificationerror" exception export><code>InvalidModificationError</code></dfn>"</td>
            <td>The object can not be modified in this way.</td>
            <td><dfn id="dom-domexception-invalid_modification_err" for="DOMException" const export><code>INVALID_MODIFICATION_ERR</code></dfn> (13)</td>
        </tr>
        <tr>
            <td>"<dfn id="namespaceerror" exception export><code>NamespaceError</code></dfn>"</td>
            <td>The operation is not allowed by <cite>Namespaces in XML</cite>. [[XML-NAMES]]</td>
            <td><dfn id="dom-domexception-namespace_err" for="DOMException" const export><code>NAMESPACE_ERR</code></dfn> (14)</td>
        </tr>
        <tr>
            <td>"<dfn id="invalidaccesserror" exception export><code>InvalidAccessError</code></dfn>"</td>
            <td>The object does not support the operation or argument.</td>
            <td><dfn id="dom-domexception-invalid_access_err" for="DOMException" const export><code>INVALID_ACCESS_ERR</code></dfn> (15)</td>
        </tr>
        <tr>
            
            <td>"<dfn id="securityerror" exception export><code>SecurityError</code></dfn>"</td>
            <td>The operation is insecure.</td>
            <td><dfn id="dom-domexception-security_err" for="DOMException" const export><code>SECURITY_ERR</code></dfn> (18)</td>
        </tr>
        <tr>
            
            <td>"<dfn id="networkerror" exception export><code>NetworkError</code></dfn>"</td>
            <td>A network error occurred.</td>
            <td><dfn id="dom-domexception-network_err" for="DOMException" const export><code>NETWORK_ERR</code></dfn> (19)</td>
        </tr>
        <tr>
            
            <td>"<dfn id="aborterror" exception export><code>AbortError</code></dfn>"</td>
            <td>The operation was aborted.</td>
            <td><dfn id="dom-domexception-abort_err" for="DOMException" const export><code>ABORT_ERR</code></dfn> (20)</td>
        </tr>
        <tr>
            
            <td>"<dfn id="urlmismatcherror" exception export><code>URLMismatchError</code></dfn>"</td>
            <td>The given URL does not match another URL.</td>
            <td><dfn id="dom-domexception-url_mismatch_err" for="DOMException" const export><code>URL_MISMATCH_ERR</code></dfn> (21)</td>
        </tr>
        <tr>
            
            <td>"<dfn id="quotaexceedederror" exception export><code>QuotaExceededError</code></dfn>"</td>
            <td>The quota has been exceeded.</td>
            <td><dfn id="dom-domexception-quota_exceeded_err" for="DOMException" const export><code>QUOTA_EXCEEDED_ERR</code></dfn> (22)</td>
        </tr>
        <tr>
            
            <td>"<dfn id="timeouterror" exception export><code>TimeoutError</code></dfn>"</td>
            <td>The operation timed out.</td>
            <td><dfn id="dom-domexception-timeout_err" for="DOMException" const export><code>TIMEOUT_ERR</code></dfn> (23)</td>
        </tr>
        <tr>
            <td>"<dfn id="invalidnodetypeerror" exception export><code>InvalidNodeTypeError</code></dfn>"</td>
            <td>The supplied node is incorrect or has an incorrect ancestor for this operation.</td>
            <td><dfn id="dom-domexception-invalid_node_type_err" for="DOMException" const export><code>INVALID_NODE_TYPE_ERR</code></dfn> (24)</td>
        </tr>
        <tr>
            
            <td>"<dfn id="datacloneerror" exception export><code>DataCloneError</code></dfn>"</td>
            <td>The object can not be cloned.</td>
            <td><dfn id="dom-domexception-data_clone_err" for="DOMException" const export><code>DATA_CLONE_ERR</code></dfn> (25)</td>
        </tr>
        <tr>
            
            <td>"<dfn id="encodingerror" exception export><code>EncodingError</code></dfn>"</td>
            <td>The encoding operation (either encoded or decoding) failed.</td>
            <td>—</td>
        </tr>
        <tr>
            
            <td>"<dfn id="notreadableerror" exception export><code>NotReadableError</code></dfn>"</td>
            <td>The I/O read operation failed.</td>
            <td>—</td>
        </tr>
        <tr>
            
            <td>"<dfn id="unknownerror" exception export><code>UnknownError</code></dfn>"</td>
            <td>The operation failed for an unknown transient reason (e.g. out of memory).</td>
            
            <td>—</td>
        </tr>
        <tr>
            
            <td>"<dfn id="constrainterror" exception export><code>ConstraintError</code></dfn>"</td>
            <td>A mutation operation in a transaction failed because a constraint was not satisfied.</td>
            <td>—</td>
        </tr>
        <tr>
            
            <td>"<dfn id="dataerror" exception export><code>DataError</code></dfn>"</td>
            <td>Provided data is inadequate.</td>
            <td>—</td>
        </tr>
        <tr>
            
            <td>"<dfn id="transactioninactiveerror" exception export><code>TransactionInactiveError</code></dfn>"</td>
            <td>A request was placed against a transaction which is currently not active, or which is finished.</td>
            <td>—</td>
        </tr>
        <tr>
            
            <td>"<dfn id="readonlyerror" exception export><code>ReadOnlyError</code></dfn>"</td>
            <td>The mutating operation was attempted in a "readonly" transaction.</td>
            <td>—</td>
        </tr>
        <tr>
            
            <td>"<dfn id="versionerror" exception export><code>VersionError</code></dfn>"</td>
            <td>An attempt was made to open a database using a lower version than the existing version.</td>
            <td>—</td>
        </tr>
        <tr>
            
            <td>"<dfn id="operationerror" exception export><code>OperationError</code></dfn>"</td>
            <td>The operation failed for an operation-specific reason.</td>
            <td>—</td>
        </tr>
        <tr>
            
            <td>"<dfn id="notallowederror" exception export><code>NotAllowedError</code></dfn>"</td>
            <td>The request is not allowed by the user agent or the platform in the current context, possibly because the user denied permission.</td>
            <td>—</td>
        </tr>
    </tbody>
</table>


<h3 id="idl-enums">Enumerations</h3>

An <dfn id="dfn-enumeration" export>enumeration</dfn> is a definition (matching
<emu-nt><a href="#prod-Enum">Enum</a></emu-nt>) used to declare a type
whose valid values are a set of predefined strings.  Enumerations
can be used to restrict the possible
{{DOMString}} values that can be assigned to an
[=attribute=] or passed to an
[=operation=].

<pre highlight="idl" class="syntax">enum identifier { enumeration-values… };</pre>

The <dfn id="dfn-enumeration-value" export lt="enumeration value">enumeration values</dfn> are specified
as a comma-separated list of <emu-nt><a href="#prod-string">string</a></emu-nt> literals.
The list of [=enumeration values=]
must not include duplicates.

Advisement: It is strongly suggested that enumeration values be all lowercase,
and that multiple words be separated using dashes or not be
separated at all, unless there is a specific reason to use another
value naming scheme.  For example, an enumeration value that
indicates an object should be created could be named
<code>"createobject"</code> or <code>'create-object"</code>.
Consider related uses of enumeration values when deciding whether
to dash-separate or not separate enumeration value words so that
similar APIs are consistent.

The behavior when a string value that is not one a valid enumeration value
is used when assigning to an [=attribute=],
or passed as an [=operation=] argument,
whose type is the enumeration, is language binding specific.

Note: In the ECMAScript binding, assignment of an invalid string value to an
[=attribute=] is ignored, while
passing such a value as an [=operation=] argument
results in an exception being thrown.

No [=extended attributes=]
defined in this specification are applicable to [=enumerations=].

<pre class="grammar" id="prod-Enum">
    Enum :
        "enum" identifier "{" EnumValueList "}" ";"
</pre>

<pre class="grammar" id="prod-EnumValueList">
    EnumValueList :
        string EnumValueListComma
</pre>

<pre class="grammar" id="prod-EnumValueListComma">
    EnumValueListComma :
        "," EnumValueListString
        ε
</pre>

<pre class="grammar" id="prod-EnumValueListString">
    EnumValueListString :
        string EnumValueListComma
        ε
</pre>

<div class="example">
    
    The following [=IDL fragment=]
    defines an [=enumeration=]
    that is used as the type of an [=attribute=]
    and an [=operation=] argument:
    
    <pre class="idl-example">
        enum MealType { "rice", "noodles", "other" };
        
        interface Meal {
          attribute MealType type;
          attribute double size;     // in grams
        
          void initialize(MealType type, double size);
        };
    </pre>
    
    An ECMAScript implementation would restrict the strings that can be
    assigned to the type property or passed to the initializeMeal function
    to those identified in the [=enumeration=].
    
    <pre highlight="js">
        var meal = getMeal();                // Get an instance of Meal.
        
        meal.initialize("rice", 200);        // Operation invoked as normal.
        
        try {
          meal.initialize("sandwich", 100);  // Throws a TypeError.
        } catch (e) {
        }
        
        meal.type = "noodles";               // Attribute assigned as normal.
        meal.type = "dumplings";             // Attribute assignment ignored.
        meal.type == "noodles";              // Evaluates to true.
    </pre>
</div>


<h3 id="idl-callback-functions">Callback functions</h3>

<p class="issue">
    The “Custom DOM Elements” spec wants to use callback function types for
    platform object provided functions.  Should we rename “callback functions” to
    just “functions” to make it clear that they can be used for both purposes?
</p>

A <dfn id="dfn-callback-function" export>callback function</dfn> is a definition (matching
<emu-t>callback</emu-t> <emu-nt><a href="#prod-CallbackRest">CallbackRest</a></emu-nt>) used to declare a function type.

<pre highlight="idl" class="syntax">callback identifier = return-type (arguments…);</pre>

Note: See also the similarly named [=callback interfaces=].

The [=identifier=] on the
left of the equals sign gives the name of the [=callback function=]
and the return type and argument list (matching <emu-nt><a href="#prod-ReturnType">ReturnType</a></emu-nt>
and <emu-nt><a href="#prod-ArgumentList">ArgumentList</a></emu-nt>) on the right side of the equals
sign gives the signature of the callback function type.

[=Callback functions=] must not
be used as the type of a [=constant=].

The following extended attribute is applicable to callback functions:
[{{TreatNonObjectAsNull}}].

<div data-fill-with="grammar-CallbackOrInterface"></div>

<div data-fill-with="grammar-CallbackRestOrInterface"></div>

<pre class="grammar" id="prod-CallbackRest">
    CallbackRest :
        identifier "=" ReturnType "(" ArgumentList ")" ";"
</pre>

<div class="example">
    
    The following [=IDL fragment=] defines
    a [=callback function=] used for an API that
    invokes a user-defined function when an operation is complete.
    
    <pre class="idl-example">
        callback AsyncOperationCallback = void (DOMString status);
        
        interface AsyncOperations {
          void performOperation(AsyncOperationCallback whenFinished);
        };
    </pre>
    
    In the ECMAScript language binding, a <emu-val>Function</emu-val> object is
    passed as the operation argument.
    
    <pre highlight="js">
        var ops = getAsyncOperations();  // Get an instance of AsyncOperations.
        
        ops.performOperation(function(status) {
          window.alert("Operation finished, status is " + status + ".");
        });
    </pre>
</div>


<h3 id="idl-typedefs">Typedefs</h3>

A <dfn id="dfn-typedef" export>typedef</dfn> is a definition (matching
<emu-nt><a href="#prod-Typedef">Typedef</a></emu-nt>)
used to declare a new name for a type.  This new name is not exposed
by language bindings; it is purely used as a shorthand for referencing
the type in the IDL.

<pre highlight="idl" class="syntax">typedef type identifier;</pre>

The type being given a new name is specified after the <code>typedef</code>
keyword (matching <emu-nt><a href="#prod-Type">Type</a></emu-nt>), and the
<emu-nt><a href="#prod-identifier">identifier</a></emu-nt> token following the
type gives the name.

The <emu-nt><a href="#prod-Type">Type</a></emu-nt> must not
identify the same or another [=typedef=].

No [=extended attributes=]
defined in this specification are applicable to [=typedefs=].

<pre class="grammar" id="prod-Typedef">
    Typedef :
        "typedef" Type identifier ";"
</pre>

<div class="example">
    
    The following [=IDL fragment=]
    demonstrates the use of [=typedefs=]
    to allow the use of a short
    [=identifier=] instead of a long
    <a href="#idl-sequence">sequence type</a>.
    
    <pre class="idl-example">
        interface Point {
          attribute double x;
          attribute double y;
        };
        
        typedef sequence&lt;Point&gt; Points;
        
        interface Widget {
          boolean pointWithinBounds(Point p);
          boolean allPointsWithinBounds(Points ps);
        };
    </pre>
</div>


<h3 id="idl-implements-statements">Implements statements</h3>

An <dfn id="dfn-implements-statement" export>implements statement</dfn> is a definition
(matching <emu-nt><a href="#prod-ImplementsStatement">ImplementsStatement</a></emu-nt>)
used to declare that all objects implementing an interface |A|
(identified by the first [=identifier=])
must additionally implement interface |B|
(identified by the second identifier), including all other interfaces that
|B| inherits from.

<pre highlight="idl" class="syntax">identifier-A implements identifier-B;</pre>

Transitively, if objects implementing |B|
are declared with an [=implements statement=]
to additionally implement interface |C|, then all objects implementing
|A| do additionally implement interface |C|.

The two [=identifiers=] must
identify two different interfaces.

The interface identified on the left-hand side of an implements statement
must not [=inherit=]
from the interface identifier on the right-hand side, and vice versa.  Both identified
interfaces also must not be
[=callback interfaces=].

If each [=implements statement=] is
considered to be an edge in a directed graph, from a node representing the interface
on the left-hand side of the statement to a node representing the interface on the
right-hand side, then this graph must not have any cycles.

Interfaces that a given object implements are partitioned into those that are considered
<dfn id="dfn-supplemental-interface" export lt="supplemental interface">supplemental interfaces</dfn> and those that are not.
An interface |A| is considered to be a
[=supplemental interface=] of an object
|O| if:

*   |O| implements a different interface |B|, and the IDL states that
    <code>B implements A</code>; or
*   |O| implements a different [=supplemental interface=]
    |C|, and |C| [=inherits=] from |A|.

<div class="note">
    
    Specification authors are discouraged from writing [=implements statements=]
    where the [=interface=] on the left-hand side
    is a [=supplemental interface=].
    For example, if author 1 writes:
    
    <pre class="idl-example example">
        interface Window { ... };
        interface SomeFunctionality { ... };
        Window implements SomeFunctionality;
    </pre>
    
    and author 2 later writes:
    
    <pre class="idl-example example">
        interface Gizmo { ... };
        interface MoreFunctionality { ... };
        SomeFunctionality implements MoreFunctionality;
        Gizmo implements SomeFunctionality;
    </pre>
    
    then it might be the case that author 2 is unaware of exactly which
    interfaces already are used on the left-hand side of an
    <code>implements SomeFunctionality</code> statement, and so has
    required more objects implement <code class="idl">MoreFunctionality</code>
    than he or she expected.
    
    Better in this case would be for author 2 to write:
    
    <pre class="idl-example example">
        interface Gizmo { ... };
        interface MoreFunctionality { ... };
        Gizmo implements SomeFunctionality;
        Gizmo implements MoreFunctionality;
    </pre>
</div>

The <dfn id="dfn-consequential-interfaces" export>consequential interfaces</dfn> of an interface
|A| are:

*   each interface |B| where the IDL states <code>A implements B</code>;
*   each interface that a consequential interface of |A| inherits from; and
*   each interface |D| where the IDL states that <code>C implements D</code>,
    where |C| is a consequential interface of |A|.

For a given interface, there must not
be any member defined on any of its consequential interfaces
whose identifier is the same as any other member defined on any
of those consequential interfaces or on the original interface itself.

Note: For example, that precludes the following:

No [=extended attributes=]
defined in this specification are applicable to
[=implements statements=].

<pre class="grammar" id="prod-ImplementsStatement">
    ImplementsStatement :
        identifier "implements" identifier ";"
</pre>

<div class="example">
    
    The following [=IDL fragment=]
    defines two [=interfaces=], stating
    that one interface is always implemented on objects implementing the other.
    
    <pre class="idl-example">
        interface Entry {
          readonly attribute unsigned short entryType;
          // ...
        };
        
        interface Observable {
          void addEventListener(DOMString type,
                                EventListener listener,
                                boolean useCapture);
          // ...
        };
        
        Entry implements Observable;
    </pre>
    
    An ECMAScript implementation would thus have an “addEventListener”
    property in the prototype chain of every <code class="idl">Entry</code>:
    
    <pre highlight="js">
        var e = getEntry();          // Obtain an instance of Entry.
        typeof e.addEventListener;  // Evaluates to "function".
    </pre>
    
    Note that it is not the case that all <code class="idl">Observable</code>
    objects implement <code class="idl">Entry</code>.
    
</div>


<h3 id="idl-objects">Objects implementing interfaces</h3>

In a given implementation of a set of [=IDL fragments=],
an object can be described as being a <dfn id="dfn-platform-object" export>platform object</dfn>, a
<dfn id="dfn-user-object" export>user object</dfn>, or neither.  There are two kinds of
object that are considered to be platform objects:

*   objects that implement a non-[=callback interface|callback=] [=interface=];
*   objects representing IDL [=DOMExceptions=].

In a browser, for example,
the browser-implemented DOM objects (implementing interfaces such as <code class="idl">Node</code> and
<code class="idl">Document</code>) that provide access to a web page’s contents
to ECMAScript running in the page would be platform objects.  These objects might be exotic objects,
implemented in a language like C++, or they might be native ECMAScript objects.  Regardless,
an implementation of a given set of IDL fragments needs to be able to recognize all platform objects
that are created by the implementation.  This might be done by having some internal state that records whether
a given object is indeed a platform object for that implementation, or perhaps by observing
that the object is implemented by a given internal C++ class.  How exactly platform objects
are recognised by a given implementation of a set of IDL fragments is implementation specific.

All other objects in the system would not be treated as platform objects.  For example, assume that
a web page opened in a browser loads an ECMAScript library that implements DOM Core.  This library
would be considered to be a different implementation from the browser provided implementation.
The objects created by the ECMAScript library that implement the <code class="idl">Node</code> interface
will not be treated as platform objects that implement <code class="idl">Node</code> by the browser implementation.

User objects are those that authors would create, implementing
[=callback interfaces=] that the Web APIs use to be able to invoke author-defined
operations or to send and receive values to the author’s program through
manipulating the object’s attributes.  In a web page, an ECMAScript object
that implements the <code class="idl">EventListener</code> interface, which is
used to register a callback that the DOM Events implementation invokes, would be considered
to be a user object.

Note that user objects can only implement [=callback interfaces=]
and platform objects can only implement non-callback interfaces.


<h3 id="idl-types">Types</h3>

This section lists the types supported by Web IDL, the set of values
corresponding to each type, and how [=constants=]
of that type are represented.

The following types are known as <dfn id="dfn-integer-type" export>integer types</dfn>:
{{byte}},
{{octet}},
{{short}},
{{unsigned short}},
{{long}},
{{unsigned long}},
{{long long}} and
{{unsigned long long}}.

The following types are known as <dfn id="dfn-numeric-type" export>numeric types</dfn>:
the [=integer types=],
{{float}},
{{unrestricted float}},
{{double}} and
{{unrestricted double}}.

The <dfn id="dfn-primitive-type" export>primitive types</dfn> are
{{boolean}} and the [=numeric types=].

The <dfn id="dfn-string-type" export>string types</dfn> are
{{DOMString}}, all <a href="#idl-enumeration">enumeration types</a>,
{{ByteString}} and {{USVString}}.

The <dfn id="dfn-exception-type" export>exception types</dfn> are
{{Error!!interface}} and {{DOMException}}.

The <dfn id="dfn-typed-array-type" export>typed array types</dfn> are
{{Int8Array}},
{{Int16Array}},
{{Int32Array}},
{{Uint8Array}},
{{Uint16Array}},
{{Uint32Array}},
{{Uint8ClampedArray}},
{{Float32Array}} and
{{Float64Array}}.

The <dfn id="dfn-buffer-source-type" export>buffer source types</dfn>
are {{ArrayBuffer}},
{{DataView}},
and the [=typed array types=].

The {{object}} type,
all [=interface types=]
and the [=exception types=]
are known as <dfn id="dfn-object-type" export>object types</dfn>.

Every type has a <dfn id="dfn-type-name" export>type name</dfn>, which
is a string, not necessarily unique, that identifies the type.
Each sub-section below defines what the type name is for each
type.

<p id="type-conversion-exceptions">
    When conversions are made from language binding specific types to
    IDL types in order to invoke an [=operation=]
    or assign a value to an [=attribute=],
    all conversions necessary will be performed before the
    specified functionality of the operation or attribute assignment
    is carried out.  If the conversion cannot
    be performed, then the operation will not run or
    the attribute will not be updated.  In some language bindings,
    type conversions could result in an exception being thrown.
    In such cases, these exceptions will be propagated to the
    code that made the attempt to invoke the operation or
    assign to the attribute.
</p>

<pre class="grammar" id="prod-Type">
    Type :
        SingleType
        UnionType Null
</pre>

<pre class="grammar" id="prod-SingleType">
    SingleType :
        NonAnyType
        "any"
</pre>

<pre class="grammar" id="prod-UnionType">
    UnionType :
        "(" UnionMemberType "or" UnionMemberType UnionMemberTypes ")"
</pre>

<pre class="grammar" id="prod-UnionMemberType">
    UnionMemberType :
        NonAnyType
        UnionType Null
</pre>

<pre class="grammar" id="prod-UnionMemberTypes">
    UnionMemberTypes :
        "or" UnionMemberType UnionMemberTypes
        ε
</pre>

<pre class="grammar" id="prod-NonAnyType">
    NonAnyType :
        PrimitiveType Null
        PromiseType Null
        "ByteString" Null
        "DOMString" Null
        "USVString" Null
        identifier Null
        "sequence" "&lt;" Type "&gt;" Null
        "object" Null
        "RegExp" Null
        "Error" Null
        "DOMException" Null
        BufferRelatedType Null
        "FrozenArray" "&lt;" Type "&gt;" Null
</pre>

<div data-fill-with="grammar-ConstType"></div>

<pre class="grammar" id="prod-PrimitiveType">
    PrimitiveType :
        UnsignedIntegerType
        UnrestrictedFloatType
        "boolean"
        "byte"
        "octet"
</pre>

<pre class="grammar" id="prod-UnrestrictedFloatType">
    UnrestrictedFloatType :
        "unrestricted" FloatType
        FloatType
</pre>

<pre class="grammar" id="prod-FloatType">
    FloatType :
        "float"
        "double"
</pre>

<pre class="grammar" id="prod-UnsignedIntegerType">
    UnsignedIntegerType :
        "unsigned" IntegerType
        IntegerType
</pre>

<pre class="grammar" id="prod-IntegerType">
    IntegerType :
        "short"
        "long" OptionalLong
</pre>

<pre class="grammar" id="prod-OptionalLong">
    OptionalLong :
        "long"
        ε
</pre>

<pre class="grammar" id="prod-PromiseType">
    PromiseType :
        "Promise" "&lt;" ReturnType "&gt;"
</pre>

<pre class="grammar" id="prod-Null">
    Null :
        "?"
        ε
</pre>


<h4 oldids="dom-any" id="idl-any" interface>any</h4>

The {{any}} type is the union of all other possible
non-<a href="#idl-union">union</a> types.
Its [=type name=] is “Any”.

The {{any}} type is like
a discriminated union type, in that each of its values has a
specific non-{{any}} type
associated with it.  For example, one value of the
{{any}} type is the
{{unsigned long}}
150, while another is the {{long}} 150.
These are distinct values.

The particular type of an {{any}}
value is known as its <dfn id="dfn-specific-type" export>specific type</dfn>.
(Values of <a href="#idl-union">union types</a> also have
[=specific types=].)


<h4 oldids="dom-boolean" id="idl-boolean" interface>boolean</h4>

The {{boolean}} type has two values:
<emu-val>true</emu-val> and <emu-val>false</emu-val>.

{{boolean}} constant values in IDL are
represented with the <code>true</code> and
<code>false</code> tokens.

The [=type name=] of the
{{boolean}} type is “Boolean”.


<h4 oldids="dom-byte" id="idl-byte" interface>byte</h4>

The {{byte}} type is a signed integer
type that has values in the range [−128, 127].

{{byte}} constant values in IDL are
represented with <emu-nt><a href="#prod-integer">integer</a></emu-nt>
tokens.

The [=type name=] of the
{{byte}} type is “Byte”.


<h4 oldids="dom-octet" id="idl-octet" interface>octet</h4>

The {{octet}} type is an unsigned integer
type that has values in the range [0, 255].

{{octet}} constant values in IDL are
represented with <emu-nt><a href="#prod-integer">integer</a></emu-nt>
tokens.

The [=type name=] of the
{{octet}} type is “Octet”.


<h4 oldids="dom-short" id="idl-short" interface>short</h4>

The {{short}} type is a signed integer
type that has values in the range [−32768, 32767].

{{short}} constant values in IDL are
represented with <emu-nt><a href="#prod-integer">integer</a></emu-nt>
tokens.

The [=type name=] of the
{{short}} type is “Short”.


<h4 oldids="dom-unsignedshort" id="idl-unsigned-short" interface>unsigned short</h4>

The {{unsigned short}} type is an unsigned integer
type that has values in the range [0, 65535].

{{unsigned short}} constant values in IDL are
represented with <emu-nt><a href="#prod-integer">integer</a></emu-nt>
tokens.

The [=type name=] of the
{{unsigned short}} type is “UnsignedShort”.


<h4 oldids="dom-long" id="idl-long" interface>long</h4>

The {{long}} type is a signed integer
type that has values in the range [−2147483648, 2147483647].

{{long}} constant values in IDL are
represented with <emu-nt><a href="#prod-integer">integer</a></emu-nt>
tokens.

The [=type name=] of the
{{long}} type is “Long”.


<h4 oldids="dom-unsignedlong" id="idl-unsigned-long" interface>unsigned long</h4>

The {{unsigned long}} type is an unsigned integer
type that has values in the range [0, 4294967295].

{{unsigned long}} constant values in IDL are
represented with <emu-nt><a href="#prod-integer">integer</a></emu-nt>
tokens.

The [=type name=] of the
{{unsigned long}} type is “UnsignedLong”.


<h4 oldids="dom-longlong" id="idl-long-long" interface>long long</h4>

The {{long long}} type is a signed integer
type that has values in the range [−9223372036854775808, 9223372036854775807].

{{long long}} constant values in IDL are
represented with <emu-nt><a href="#prod-integer">integer</a></emu-nt>
tokens.

The [=type name=] of the
{{long long}} type is “LongLong”.


<h4 oldids="dom-unsignedlonglong" id="idl-unsigned-long-long" interface>unsigned long long</h4>

The {{unsigned long long}} type is an unsigned integer
type that has values in the range [0, 18446744073709551615].

{{unsigned long long}} constant values in IDL are
represented with <emu-nt><a href="#prod-integer">integer</a></emu-nt>
tokens.

The [=type name=] of the
{{unsigned long long}} type is “UnsignedLongLong”.


<h4 oldids="dom-float" id="idl-float" interface>float</h4>

The {{float}} type is a floating point numeric
type that corresponds to the set of finite single-precision 32 bit
IEEE 754 floating point numbers.  [[!IEEE-754]]

{{float}} constant values in IDL are
represented with <emu-nt><a href="#prod-float">float</a></emu-nt>
tokens.

The [=type name=] of the
{{float}} type is “Float”.

Advisement: Unless there are specific reasons to use a 32 bit floating point type,
specifications should use
{{double}} rather than {{float}},
since the set of values that a {{double}} can
represent more closely matches an ECMAScript <emu-val>Number</emu-val>.


<h4 oldids="dom-unrestrictedfloat" id="idl-unrestricted-float" interface>unrestricted float</h4>

The {{unrestricted float}} type is a floating point numeric
type that corresponds to the set of all possible single-precision 32 bit
IEEE 754 floating point numbers, finite and non-finite.  [[!IEEE-754]]

{{unrestricted float}} constant values in IDL are
represented with <emu-nt><a href="#prod-float">float</a></emu-nt>
tokens.

The [=type name=] of the
{{unrestricted float}} type is “UnrestrictedFloat”.


<h4 oldids="dom-double" id="idl-double" interface>double</h4>

The {{double}} type is a floating point numeric
type that corresponds to the set of finite double-precision 64 bit
IEEE 754 floating point numbers.  [[!IEEE-754]]

{{double}} constant values in IDL are
represented with <emu-nt><a href="#prod-float">float</a></emu-nt>
tokens.

The [=type name=] of the
{{double}} type is “Double”.


<h4 oldids="dom-unrestricteddouble" id="idl-unrestricted-double" interface>unrestricted double</h4>

The {{unrestricted double}} type is a floating point numeric
type that corresponds to the set of all possible double-precision 64 bit
IEEE 754 floating point numbers, finite and non-finite.  [[!IEEE-754]]

{{unrestricted double}} constant values in IDL are
represented with <emu-nt><a href="#prod-float">float</a></emu-nt>
tokens.

The [=type name=] of the
{{unrestricted double}} type is “UnrestrictedDouble”.


<h4 oldids="dom-DOMString" id="idl-DOMString" interface>DOMString</h4>

The {{DOMString}} type
corresponds to the set of all possible sequences of [=code units=].
Such sequences are commonly interpreted as UTF-16 encoded strings [[!RFC2781]]
although this is not required.
While {{DOMString}} is defined to be an OMG IDL boxed
{{sequence&lt;unsigned short&gt;}}
valuetype in <cite><a href="http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#ID-C74D1578">DOM Level 3 Core</a></cite>
([[DOM-LEVEL-3-CORE]], section 1.2.1),
this document defines {{DOMString}} to be an intrinsic type so as to avoid
special casing that sequence type in various situations where a
string is required.

Note: Note also that <emu-val>null</emu-val>
is not a value of type {{DOMString}}.
To allow <emu-val>null</emu-val>, a
<a href="#idl-nullable-type">nullable</a> {{DOMString}},
written as <code>DOMString?</code> in IDL, needs to be used.

Nothing in this specification requires a {{DOMString}}
value to be a valid UTF-16 string.  For example, a {{DOMString}}
value might include unmatched surrogate pair characters.  However, authors
of specifications using Web IDL might want to obtain a sequence of
[=Unicode scalar values=] given a particular sequence of
[=code units=].
The following algorithm defines a way to
<dfn id="dfn-obtain-unicode" export lt="obtain Unicode|convert to a sequence of Unicode scalar values">convert a DOMString to a sequence of Unicode scalar values</dfn>:

<ol class="algorithm">
    1.  Let |S| be the {{DOMString}} value.
    1.  Let |n| be the length of |S|.
    1.  Initialize |i| to 0.
    1.  Initialize |U| to be an empty sequence of Unicode characters.
    1.  While |i| &lt; |n|:
        1.  Let |c| be the [=code unit=] in |S| at index |i|.
        1.  Depending on the value of |c|:
            <dl class="switch">
                 :  |c| &lt; 0xD800 or |c| &gt; 0xDFFF
                 :: Append to |U| the Unicode character with code point |c|.
                
                 :  0xDC00 ≤ |c| ≤ 0xDFFF
                 :: Append to |U| a <span class="char">U+FFFD REPLACEMENT CHARACTER</span>.
                
                 :  0xD800 ≤ |c| ≤ 0xDBFF
                 :: <ol class="only">
                        1.  If |i| = |n|−1, then append to |U| a <span class="char">U+FFFD REPLACEMENT CHARACTER</span>.
                        1.  Otherwise, |i| &lt; |n|−1:
                            1.  Let |d| be the code unit in |S| at index
                                |i|+1.
                            1.  If 0xDC00 ≤ |d| ≤ 0xDFFF, then:
                                1.  Let |a| be |c| &amp; 0x3FF.
                                1.  Let |b| be |d| &amp; 0x3FF.
                                1.  Append to |U| the Unicode character with
                                    code point 2<sup>16</sup>+2<sup>10</sup>|a|+|b|.
                                1.  Set |i| to |i|+1.
                            1.  Otherwise, |d| &lt; 0xDC00 or |d| &gt; 0xDFFF.
                                Append to |U| a <span class="char">U+FFFD REPLACEMENT CHARACTER</span>.
                    </ol>
            </dl>
        1.  Set |i| to |i|+1.
    1.  Return |U|.
</ol>

There is no way to represent a constant {{DOMString}}
value in IDL, although {{DOMString}} [=dictionary member=]
and [=optional argument|operation optional argument=] default values
can be specified using a <emu-nt><a href="#prod-string">string</a></emu-nt> literal.

The [=type name=] of the
{{DOMString}} type is “String”.


<h4 oldids="dom-ByteString" id="idl-ByteString" interface>ByteString</h4>

The {{ByteString}} type
corresponds to the set of all possible sequences of bytes.
Such sequences might be interpreted as UTF-8 encoded strings [[!RFC3629]]
or strings in some other 8-bit-per-code-unit encoding, although this is not required.

There is no way to represent a constant {{ByteString}}
value in IDL.

The [=type name=] of the
{{ByteString}} type is “ByteString”.

Advisement: Specifications should only use
{{ByteString}} for interfacing with protocols
that use bytes and strings interchangably, such as HTTP.  In general,
strings should be represented with
{{DOMString}} values, even if it is expected
that values of the string will always be in ASCII or some
8 bit character encoding.  <a href="#idl-sequence">Sequences</a>,
<a href="#idl-frozen-array">frozen arrays</a> or [=Typed Arrays=]
with {{octet}} or {{byte}}
elements should be used for holding
8 bit data rather than {{ByteString}}.
[[!ECMA-262]]


<h4 oldids="dom-USVString" id="idl-USVString" interface>USVString</h4>

The {{USVString}} type
corresponds to the set of all possible sequences of
[=Unicode scalar values=],
which are all of the Unicode code points apart from the
surrogate code points.

There is no way to represent a constant {{USVString}}
value in IDL, although {{USVString}} [=dictionary member=]
and [=optional argument|operation optional argument=] default values
can be specified using a <emu-nt><a href="#prod-string">string</a></emu-nt> literal.

The [=type name=] of the
{{USVString}} type is “USVString”.

Advisement: Specifications should only use
{{USVString}} for APIs that perform
text processing and need a string of Unicode
scalar values to operate on.  Most APIs that use strings
should instead be using {{DOMString}},
which does not make any interpretations of the [=code units=]
in the string.  When in doubt, use {{DOMString}}.


<h4 oldids="dom-object" id="idl-object" interface>object</h4>

The {{object}} type corresponds to the set of
all possible non-null object references.

There is no way to represent a constant {{object}}
value in IDL.

To denote a type that includes all possible object references plus the
<emu-val>null</emu-val> value, use the <a href="#dfn-nullable-type">nullable type</a>
<code class="idl">object?</code>.

The [=type name=] of the
{{object}} type is “Object”.


<h4 id="idl-interface" dfn>Interface types</h4>

An [=identifier=] that
identifies an [=interface=] is used to refer to
a type that corresponds to the set of all possible non-null references to objects that
implement that interface.

For non-callback interfaces, an IDL value of the interface type is represented just
by an object reference.  For [=callback interfaces=], an IDL value of the interface type
is represented by a tuple of an object reference and a <dfn id="dfn-callback-context" export>callback context</dfn>.
The [=callback context=] is a language
binding specific value, and is used to store information about the execution context at
the time the language binding specific object reference is converted to an IDL value.

Note: For ECMAScript objects, the [=callback context=] is used
to hold a reference to the
[=incumbent script=]
[[!HTML]] at the time the <emu-val>Object</emu-val> value
is converted to an IDL callback interface type value.  See
[[#es-interface]].

There is no way to represent a constant object reference value for
a particular interface type in IDL.

To denote a type that includes all possible references to objects implementing
the given interface plus the <emu-val>null</emu-val> value,
use a <a href="#dfn-nullable-type">nullable type</a>.

The [=type name=] of an interface type
is the [=identifier=] of the interface.


<h4 id="idl-dictionary" dfn>Dictionary types</h4>

An [=identifier=] that
identifies a [=dictionary=] is used to refer to
a type that corresponds to the set of all dictionaries that adhere to
the dictionary definition.

There is no way to represent a constant dictionary value in IDL.

The [=type name=] of a dictionary type
is the [=identifier=] of the dictionary.


<h4 id="idl-enumeration">Enumeration types</h4>

An [=identifier=] that
identifies an [=enumeration=] is used to
refer to a type whose values are the set of strings (sequences of
[=code units=], as with
{{DOMString}}) that are the
[=enumeration values|enumeration’s values=].

Like {{DOMString}}, there is no way to represent a constant [=enumeration=]
value in IDL, although enumeration-typed [=dictionary member=]
[=default values=] can be specified using a
<emu-nt><a href="#prod-string">string</a></emu-nt> literal.

The [=type name=] of an enumeration type
is the [=identifier=] of the enumeration.


<h4 id="idl-callback-function" dfn>Callback function types</h4>

An [=identifier=] that identifies
a [=callback function=] is used to refer to
a type whose values are references to objects that are functions with the given signature.

An IDL value of the callback function type is represented by a tuple of an object
reference and a [=callback context=].

Note: As with <a href="#idl-interface">callback interface types</a>, the [=callback context=] is used
to hold a reference to the
[=incumbent script=]
[[!HTML]] at the time an ECMAScript <emu-val>Object</emu-val> value
is converted to an IDL callback function type value.  See
[[#es-callback-function]].

There is no way to represent a constant [=callback function=]
value in IDL.

The [=type name=] of a callback function type
is the [=identifier=] of the callback function.


<h4 id="idl-nullable-type">Nullable types — |T|?</h4>

A <dfn id="dfn-nullable-type" export>nullable type</dfn> is an IDL type constructed
from an existing type (called the <dfn id="dfn-inner-type" export>inner type</dfn>),
which just allows the additional value <emu-val>null</emu-val>
to be a member of its set of values.  [=Nullable types=]
are represented in IDL by placing a <span class="char">U+003F QUESTION MARK ("?")</span>
character after an existing type.  The inner type must not
be {{any}},
another nullable type, or a [=union type=]
that itself has [=includes a nullable type=]
or has a dictionary type as one of its
[=flattened member types|flattened member types=].

Note: Although dictionary types can in general be nullable, they cannot when used
as the type of an operation argument or a dictionary member.

Nullable type constant values in IDL are represented in the same way that
constant values of their [=inner type=]
would be represented, or with the <code>null</code> token.

The [=type name=] of a nullable type
is the concatenation of the type name of the inner type |T| and
the string “OrNull”.

<div class="example">
    
    For example, a type that allows the values <emu-val>true</emu-val>,
    <emu-val>false</emu-val> and <emu-val>null</emu-val>
    is written as <code class="idl">boolean?</code>:
    
    <pre class="idl-example">
        interface MyConstants {
          const boolean? ARE_WE_THERE_YET = false;
        };
    </pre>
    
    The following [=interface=] has two
    [=attributes=]: one whose value can
    be a {{DOMString}} or the <emu-val>null</emu-val>
    value, and another whose value can be a reference to a <code class="idl">Node</code>
    object or the <emu-val>null</emu-val> value:
    
    <pre class="idl-example">
        interface Node {
          readonly attribute DOMString? namespaceURI;
          readonly attribute Node? parentNode;
          // ...
        };
    </pre>
</div>


<h4 oldids="dom-sequence" id="idl-sequence" interface lt="sequence|sequence&lt;T&gt;">Sequences — sequence&lt;|T|&gt;</h4>

The <a interface lt="sequence">sequence&lt;|T|&gt;</a>
type is a parameterized type whose values are (possibly zero-length) sequences of
values of type |T|.

Sequences are always passed by value.  In
language bindings where a sequence is represented by an object of
some kind, passing a sequence to a [=platform object=]
will not result in a reference to the sequence being kept by that object.
Similarly, any sequence returned from a platform object
will be a copy and modifications made to it will not be visible to the platform object.

There is no way to represent a constant sequence value in IDL.

Sequences must not be used as the
type of an [=attribute=] or
[=constant=].

Note: This restriction exists so that it is clear to specification writers
and API users that <a href="#idl-sequence">sequences</a>
are copied rather than having references
to them passed around.  Instead of a writable [=attribute=] of a sequence
type, it is suggested that a pair of [=operations=] to get and set the
sequence is used.

The [=type name=] of a sequence type
is the concatenation of the type name for |T| and
the string “Sequence”.


<h4 oldids="dom-promise" id="idl-promise" interface lt="Promise|Promise&lt;T&gt;">Promise types — Promise&lt;|T|&gt;</h4>

A <dfn id="dfn-promise-type" export>promise type</dfn> is a parameterized type
whose values are references to objects that “is used as a place holder
for the eventual results of a deferred (and possibly asynchronous) computation
result of an asynchronous operation” [[!ECMA-262]].
See <a href="https://tc39.github.io/ecma262/#sec-promise-objects">section 25.4</a>
of the ECMAScript specification for details on the semantics of promise objects.

There is no way to represent a promise value in IDL.

The [=type name=] of a promise type
is the concatenation of the type name for |T| and
the string “Promise”.


<h4 id="idl-union">Union types</h4>

A <dfn id="dfn-union-type" export>union type</dfn> is a type whose set of values
is the union of those in two or more other types.  Union types (matching
<emu-nt><a href="#prod-UnionType">UnionType</a></emu-nt>)
are written as a series of types separated by the <code>or</code> keyword
with a set of surrounding parentheses.
The types which comprise the union type are known as the
union’s <dfn id="dfn-union-member-type" for="union" export>member types</dfn>.

<div class="note">
    
    For example, you might write <code>(Node or DOMString)</code>
    or <code>(double or sequence&lt;double&gt;)</code>.  When applying a
    <code>?</code> suffix to a
    [=union type=]
    as a whole, it is placed after the closing parenthesis,
    as in <code>(Node or DOMString)?</code>.
    
    Note that the [=member types=]
    of a union type do not descend into nested union types.  So for
    <code>(double or (sequence&lt;long&gt; or Event) or (Node or DOMString)?)</code> the member types
    are <code>double</code>, <code>(sequence&lt;long&gt; or Event)</code> and
    <code>(Node or DOMString)?</code>.
    
</div>

Like the {{any}} type, values of
union types have a [=specific type=],
which is the particular [=member type=]
that matches the value.

The <dfn id="dfn-flattened-union-member-types" for="union" export>flattened member types</dfn>
of a [=union type=] is a set of types
determined as follows:

<ol class="algorithm">
    1.  Let |T| be the [=union type=].
    1.  Initialize |S| to ∅.
    1.  For each [=member type=] |U| of |T|:
        1.  If |U| is a [=nullable type=], then
            set |U| to be the [=inner type=] of |U|.
        1.  If |U| is a [=union type=], then
            add to |S| the [=flattened member types=]
            of |U|.
        1.  Otherwise, |U| is not a [=union type=].
            Add |U| to |S|.
    1.  Return |S|.
</ol>

Note: For example, the [=flattened member types=]
of the [=union type=]
<code>(Node or (sequence&lt;long&gt; or Event) or (XMLHttpRequest or DOMString)? or sequence&lt;(sequence&lt;double&gt; or NodeList)&gt;)</code>
are the six types <code>Node</code>, <code>sequence&lt;long&gt;</code>, <code>Event</code>,
<code>XMLHttpRequest</code>, <code>DOMString</code> and
<code>sequence&lt;(sequence&lt;double&gt; or NodeList)&gt;</code>.

The <dfn id="dfn-number-of-nullable-member-types" export>number of nullable member types</dfn>
of a [=union type=] is an integer
determined as follows:

<ol class="algorithm">
    1.  Let |T| be the [=union type=].
    1.  Initialize |n| to 0.
    1.  For each [=member type=] |U| of |T|:
        1.  If |U| is a [=nullable type=], then:
            1.  Set |n| to |n| + 1.
            1.  Set |U| to be the [=inner type=] of |U|.
        1.  If |U| is a [=union type=], then:
            1.  Let |m| be the [=number of nullable member types=] of |U|.
            1.  Set |n| to |n| + |m|.
    1.  Return |n|.
</ol>

The {{any}} type must not
be used as a [=member types|union member type=].

The [=number of nullable member types=]
of a [=union type=] must
be 0 or 1, and if it is 1 then the union type must also not have
a [=dictionary type=] in its
[=flattened member types=].

A type <dfn id="dfn-includes-a-nullable-type" export>includes a nullable type</dfn> if:

*   the type is a [=nullable type=], or
*   the type is a [=union type=] and its
    [=number of nullable member types=] is 1.

Each pair of [=flattened member types=]
in a [=union type=], |T| and |U|,
must be [=distinguishable=].

[=Union type=] constant values
in IDL are represented in the same way that constant values of their
[=member types=] would be
represented.

The [=type name=] of a union
type is formed by taking the type names of each member type, in order,
and joining them with the string “Or”.

<div data-fill-with="grammar-UnionType"></div>

<div data-fill-with="grammar-UnionMemberType"></div>

<div data-fill-with="grammar-UnionMemberTypes"></div>

<div data-fill-with="grammar-NonAnyType"></div>


<h4 oldids="dom-RegExp" id="idl-RegExp" interface>RegExp</h4>

The {{RegExp}} type is a type
whose values are references to objects that represent regular expressions.
The particular regular expression language and the features it supports
is language binding specific.

There is no way to represent a constant {{RegExp}}
value in IDL.

The [=type name=] of the
{{RegExp}} type is “RegExp”.


<h4 oldids="dom-Error" id="idl-Error" interface>Error</h4>

The {{Error!!interface}} type corresponds to the
set of all possible non-null references to exception objects, including
[=simple exceptions=]
and [=DOMExceptions=].

There is no way to represent a constant {{Error!!interface}}
value in IDL.

The [=type name=] of the
{{Error!!interface}} type is “Error”.


<h4 id="idl-DOMException">DOMException</h4>

The {{DOMException}} type corresponds to the
set of all possible non-null references to objects
representing [=DOMExceptions=].

There is no way to represent a constant {{DOMException}}
value in IDL.

The [=type name=] of the
{{DOMException}} type is “DOMException”.


<h4 id="idl-buffer-source-types">Buffer source types</h4>

There are a number of types that correspond to sets of all possible non-null
references to objects that represent a buffer of data or a view on to a buffer of
data.  The table below lists these types and the kind of buffer or view they represent.

<table class="vert data">
    <tr><th>Type</th><th>Kind of buffer</th></tr>
    <tr><td><dfn id="idl-ArrayBuffer" interface>ArrayBuffer</dfn></td><td>An object that holds a pointer (which may be null) to a buffer of a fixed number of bytes</td></tr>
    <tr><td><dfn id="idl-DataView" interface>DataView</dfn></td><td>A view on to an {{ArrayBuffer}} that allows typed access to integers and floating point values stored at arbitrary offsets into the buffer</td></tr>
        <tr><td>
            <dfn id="idl-Int8Array" interface>Int8Array</dfn>,<br/>
            <dfn id="idl-Int16Array" interface>Int16Array</dfn>,<br/>
        <dfn id="idl-Int32Array" interface>Int32Array</dfn></td>
    <td>A view on to an {{ArrayBuffer}} that exposes it as an array of two’s complement signed integers of the given size in bits</td></tr>
        <tr><td>
            <dfn id="idl-Uint8Array" interface>Uint8Array</dfn>,<br/>
            <dfn id="idl-Uint16Array" interface>Uint16Array</dfn>,<br/>
        <dfn id="idl-Uint32Array" interface>Uint32Array</dfn></td>
    <td>A view on to an {{ArrayBuffer}} that exposes it as an array of unsigned integers of the given size in bits</td></tr>
        <tr><td><dfn id="idl-Uint8ClampedArray" interface>Uint8ClampedArray</dfn></td>
    <td>A view on to an {{ArrayBuffer}} that exposes it as an array of unsigned 8 bit integers with clamped conversions</td></tr>
        <tr><td>
            <dfn id="idl-Float32Array" interface>Float32Array</dfn>,<br/>
        <dfn id="idl-Float64Array" interface>Float64Array</dfn></td>
    <td>A view on to an {{ArrayBuffer}} that exposes it as an array of IEEE 754 floating point numbers of the given size in bits</td></tr>
</table>

Note: These types all correspond to classes defined in ECMAScript.

To <dfn id="dfn-detach" for="ArrayBuffer" export>detach</dfn> an {{ArrayBuffer}}
is to set its buffer pointer to <emu-val>null</emu-val>.

There is no way to represent a constant value of any of these types in IDL.

The [=type name=] of all
of these types is the name of the type itself.

At the specification prose level, IDL [=buffer source types=]
are simply references to objects.  To inspect or manipulate the bytes inside the buffer,
specification prose must first either
<dfn id="dfn-get-buffer-source-reference" export lt="get a reference to the buffer source">get a reference to the bytes held by the buffer source</dfn>
or <dfn id="dfn-get-buffer-source-copy" export lt="get a copy of the buffer source">get a copy of the bytes held by the buffer source</dfn>.
With a reference to the buffer source’s bytes, specification prose can get or set individual
byte values using that reference.

<div class="advisement">
    
    Extreme care must be taken when writing specification text that gets a reference
    to the bytes held by a buffer source, as the underyling data can easily be changed
    by the script author or other APIs at unpredictable times.  If you are using a buffer source type
    as an operation argument to obtain a chunk of binary data that will not be modified,
    it is strongly recommended to get a copy of the buffer source’s bytes at the beginning
    of the prose defining the operation.
    
    Requiring prose to explicitly get a reference to or copy of the bytes is intended to
    help specification reviewers look for problematic uses of these buffer source types.
    
</div>

<div class="note">
    
    When designing APIs that take a buffer, it is recommended to use the
    {{BufferSource}} typedef rather than {{ArrayBuffer}}
    or any of the view types.
    
    When designing APIs that create and return a buffer, it is recommended
    to use the {{ArrayBuffer}} type rather than
    {{Uint8Array}}.
    
</div>

Attempting to [=get a reference to the bytes held by the buffer source|get a reference to=] or
[=get a copy of the bytes held by the buffer source|get a copy of the bytes held by a buffer source=]
when the {{ArrayBuffer}} has been [=detach|detached=]
will fail in a language binding-specific manner.

Note: See [[#es-buffer-source-types]] below for
how interacting with buffer source types works in the ECMAScript language binding.

<p class="issue">
    We should include an example of specification text that uses these types and terms.
</p>


<h4 oldids="dom-FrozenArray" id="idl-frozen-array" interface lt="FrozenArray|FrozenArray&lt;T&gt;">Frozen arrays — FrozenArray&lt;|T|&gt;</h4>

A <dfn id="dfn-frozen-array-type" export>frozen array type</dfn> is a parameterized
type whose values are references to objects that hold a fixed length array
of unmodifiable values.  The values in the array are of type |T|.

Since <a interface lt="FrozenArray">FrozenArray&lt;|T|&gt;</a> values
are references, they are unlike <a href="#idl-sequence">sequence types</a>,
which are lists of values that are passed by value.

There is no way to represent a constant frozen array value in IDL.

The [=type name=] of a frozen array
type is the concatenation of the type name for |T| and the string
“Array”.


<h3 id="idl-extended-attributes">Extended attributes</h3>

An <dfn id="dfn-extended-attribute" export>extended attribute</dfn> is an annotation
that can appear on
definitions,
[=interface members=],
[=dictionary members=],
and [=operation=] arguments, and
is used to control how language bindings will handle those constructs.
Extended attributes are specified with an
<emu-nt><a href="#prod-ExtendedAttributeList">ExtendedAttributeList</a></emu-nt>,
which is a square bracket enclosed, comma separated list of
<emu-nt><a href="#prod-ExtendedAttribute">ExtendedAttribute</a></emu-nt>s.

The <emu-nt><a href="#prod-ExtendedAttribute">ExtendedAttribute</a></emu-nt>
grammar symbol matches nearly any sequence of tokens, however the
[=extended attributes=]
defined in this document only accept a more restricted syntax.
Any extended attribute encountered in an
[=IDL fragment=] is
matched against the following six grammar symbols to determine
which form (or forms) it is in:

<table class="vert data">
    <tr>
        <th>Grammar symbol</th>
        <th>Form</th>
        <th>Example</th>
    </tr>
    <tr>
        <td>
            <emu-nt><a href="#prod-ExtendedAttributeNoArgs">ExtendedAttributeNoArgs</a></emu-nt>
        </td>
        <td>
            <dfn id="dfn-xattr-no-arguments" for="extended attribute" export>takes no arguments</dfn>
        </td>
        <td>
            <code>[Replaceable]</code>
        </td>
    </tr>
    <tr>
        <td>
            <emu-nt><a href="#prod-ExtendedAttributeArgList">ExtendedAttributeArgList</a></emu-nt>
        </td>
        <td>
            <dfn id="dfn-xattr-argument-list" for="extended attribute" export>takes an argument list</dfn>
        </td>
        <td>
            <code>[Constructor(double x, double y)]</code>
        </td>
    </tr>
    <tr>
        <td>
            <emu-nt><a href="#prod-ExtendedAttributeNamedArgList">ExtendedAttributeNamedArgList</a></emu-nt>
        </td>
        <td>
            <dfn id="dfn-xattr-named-argument-list" for="extended attribute" export>takes a named argument list</dfn>
        </td>
        <td>
            <code>[NamedConstructor=Image(DOMString src)]</code>
        </td>
    </tr>
    <tr>
        <td>
            <emu-nt><a href="#prod-ExtendedAttributeIdent">ExtendedAttributeIdent</a></emu-nt>
        </td>
        <td>
            <dfn id="dfn-xattr-identifier" for="extended attribute" export>takes an identifier</dfn>
        </td>
        <td>
            <code>[PutForwards=name]</code>
        </td>
    </tr>
    <tr>
        <td>
            <emu-nt><a href="#prod-ExtendedAttributeIdentList">ExtendedAttributeIdentList</a></emu-nt>
        </td>
        <td>
            <dfn id="dfn-xattr-identifier-list" for="extended attribute" export>takes an identifier list</dfn>
        </td>
        <td>
            <code>[Exposed=(Window,Worker)]</code>
        </td>
    </tr>
    
</table>

This specification defines a number of extended attributes that
are applicable to the ECMAScript language binding, which are described in
[[#es-extended-attributes]].
Each extended attribute definition will state which of the above
six forms are allowed.

<pre class="grammar" id="prod-ExtendedAttributeList">
    ExtendedAttributeList :
        "[" ExtendedAttribute ExtendedAttributes "]"
        ε
</pre>

<pre class="grammar" id="prod-ExtendedAttributes">
    ExtendedAttributes :
        "," ExtendedAttribute ExtendedAttributes
        ε
</pre>

<pre class="grammar" id="prod-ExtendedAttribute">
    ExtendedAttribute :
        "(" ExtendedAttributeInner ")" ExtendedAttributeRest
        "[" ExtendedAttributeInner "]" ExtendedAttributeRest
        "{" ExtendedAttributeInner "}" ExtendedAttributeRest
        Other ExtendedAttributeRest
</pre>

<pre class="grammar" id="prod-ExtendedAttributeRest">
    ExtendedAttributeRest :
        ExtendedAttribute
        ε
</pre>

<pre class="grammar" id="prod-ExtendedAttributeInner">
    ExtendedAttributeInner :
        "(" ExtendedAttributeInner ")" ExtendedAttributeInner
        "[" ExtendedAttributeInner "]" ExtendedAttributeInner
        "{" ExtendedAttributeInner "}" ExtendedAttributeInner
        OtherOrComma ExtendedAttributeInner
        ε
</pre>

<pre class="grammar" id="prod-Other">
    Other :
        integer
        float
        identifier
        string
        other
        "-"
        "-Infinity"
        "."
        "..."
        ":"
        ";"
        "&lt;"
        "="
        "&gt;"
        "?"
        "ByteString"
        "DOMString"
        "FrozenArray"
        "Infinity"
        "NaN"
        "RegExp"
        "USVString"
        "any"
        "boolean"
        "byte"
        "double"
        "false"
        "float"
        "long"
        "null"
        "object"
        "octet"
        "or"
        "optional"
        "sequence"
        "short"
        "true"
        "unsigned"
        "void"
        ArgumentNameKeyword
        BufferRelatedType
</pre>

<pre class="grammar" id="prod-OtherOrComma">
    OtherOrComma :
        Other
        ","
</pre>

<pre class="grammar" id="prod-IdentifierList">
    IdentifierList :
        identifier Identifiers
</pre>

<div data-fill-with="grammar-Identifiers"></div>

<pre class="grammar" id="prod-ExtendedAttributeNoArgs">
    ExtendedAttributeNoArgs :
        identifier
</pre>

<pre class="grammar" id="prod-ExtendedAttributeArgList">
    ExtendedAttributeArgList :
        identifier "(" ArgumentList ")"
</pre>

<pre class="grammar" id="prod-ExtendedAttributeIdent">
    ExtendedAttributeIdent :
        identifier "=" identifier
</pre>

<pre class="grammar" id="prod-ExtendedAttributeIdentList">
    ExtendedAttributeIdentList :
        identifier "=" "(" IdentifierList ")"
</pre>

<pre class="grammar" id="prod-ExtendedAttributeNamedArgList">
    ExtendedAttributeNamedArgList :
        identifier "=" identifier "(" ArgumentList ")"
</pre>


<h2 id="ecmascript-binding">ECMAScript binding</h2>

This section describes how definitions written with the IDL defined in
[[#idl]] correspond to particular constructs
in ECMAScript, as defined by the <cite>ECMAScript Language Specification 6th Edition</cite>
[[!ECMA-262]].

Objects defined in this section have internal properties as described in
ECMA-262 [=sections 9.1=] and
[=9.3.1=] unless otherwise specified, in which case one or
more of the following are redefined in accordance with the rules for exotic objects:
\[[Call]],
\[[Set]],
\[[DefineOwnProperty]],
\[[GetOwnProperty]],
\[[Delete]] and
\[[HasInstance]].

Other specifications may override the definitions
of any internal method of a [=platform object=]
that is an instance of an [=interface=].

Advisement: As overriding internal ECMAScript object methods is a low level operation and
can result in objects that behave differently from ordinary objects,
this facility should not be used unless necessary
for security or compatibility.  The expectation is that this will be used
for <a href="https://github.com/annevk/html-cross-origin-objects/">Location objects
and possibly WindowProxy objects</a>.

Unless otherwise specified, the \[[Extensible]] internal property
of objects defined in this section has the value <emu-val>true</emu-val>.

Unless otherwise specified, the \[[Prototype]] internal property
of objects defined in this section is the <emu-val>Object</emu-val> prototype object.

Some objects described in this section are defined to have a <dfn id="dfn-class-string" export>class string</dfn>,
which is the string to include in the string returned from Object.prototype.toString.
If an object has a class string, then the object must,
at the time it is created, have a property whose name is the [=@@toStringTag=] symbol
and whose value is the specified string.

<p class="issue">
    Should define whether [=@@toStringTag=] is writable, enumerable and configurable.
    All [=@@toStringTag=] properties in the ES6 spec are non-writable and non-enumerable,
    and configurable.
</p>

If an object is defined to be a <dfn id="dfn-function-object" export>function object</dfn>, then
it has characteristics as follows:

*   Its \[[Prototype]] internal property is
    [=%FunctionPrototype%=] unless otherwise specified.
*   Its \[[Get]] internal property is set as described in [=ECMA-262 section 9.1.8=].
*   Its \[[Construct]] internal property is set as described in [=ECMA-262 section 19.2.2.3=].
*   Its \@@hasInstance property is set as described in [=ECMA-262 section 19.2.3.8=], unless otherwise specified.

<p class="issue">
    The list above needs updating for the latest ES6 draft.
</p>

<p id="ecmascript-abstractop">
    Algorithms in this section use the conventions described in [=ECMA-262 section 5.2=], such as the use of steps and substeps, the use of mathematical
    operations, and so on.  The
    [=ToBoolean=],
    [=ToNumber=],
    [=ToUint16=],
    [=ToInt32=],
    [=ToUint32=],
    [=ToString=],
    [=ToObject=],
    [=IsAccessorDescriptor=] and
    [=IsDataDescriptor=] abstract operations and the
    [=Type|Type(x)=]
    notation referenced in this section are defined in ECMA-262 sections 6 and 7.
</p>

When an algorithm says to
<dfn lt="es throw" export id="ecmascript-throw">throw a <emu-val><i>Something</i>Error</emu-val></dfn>
then this means to construct a new ECMAScript <emu-val><i>Something</i>Error</emu-val> object
and to throw it, just as the algorithms in ECMA-262 do.

Note that algorithm steps can call in to other algorithms and abstract operations and
not explicitly handle exceptions that are thrown from them.  When an exception
is thrown by an algorithm or abstract operation and it is not explicitly
handled by the caller, then it is taken to end the algorithm and propagate out
to its caller, and so on.

<div class="example">
    
    Consider the following algorithm:
    
    <ol class="algorithm">
        1.  Let |x| be the ECMAScript value passed in to this algorithm.
        1.  Let |y| be the result of calling [=ToString=](|x|).
        1.  Return |y|.
    </ol>
    
    Since [=ToString=] can throw an exception (for example if passed the object
    <code>({ toString: function() { throw 1 } })</code>), and the exception is
    not handled in the above algorithm, if one is thrown then it causes this
    algorithm to end and for the exception to propagate out to its caller, if there
    is one.
    
</div>


<h3 id="es-environment">ECMAScript environment</h3>

In an ECMAScript implementation of a given set of
[=IDL fragments=],
there will exist a number of ECMAScript objects that correspond to
definitions in those [=IDL fragments=].
These objects are termed the <dfn id="dfn-initial-object" export>initial objects</dfn>,
and comprise the following:

*   [=interface objects=]
*   [=named constructors=]
*   [=interface prototype objects=]
*   [=named properties objects=]
*   [=iterator prototype objects=]
*   [=attribute getters=]
*   [=attribute setters=]
*   <a href="#es-operations">the <emu-val>Function</emu-val> objects that correspond to operations</a>
*   <a href="#es-stringifier">the <emu-val>Function</emu-val> objects that correspond to stringifiers</a>
*   <a href="#es-serializer">the <emu-val>Function</emu-val> objects that correspond to serializers</a>
*   <a href="#es-iterators">the <emu-val>Function</emu-val> objects that correspond to iterators</a>
*   [=default unforgeable valueOf functions=]
*   [=map size getters=]
*   [=DOMException constructor objects=]
*   [=DOMException prototype objects=]
*   [=named properties objects=]

Each [=Realms|ECMAScript global environment=] ([[!ECMA-262]], section 8.2)
must have its own unique set of each of
the [=initial objects=], created
before control enters any ECMAScript execution context associated with the
environment, but after the global object for that environment is created.  The \[[Prototype]]s
of all initial objects in a given global environment must come from
that same global environment.

<div class="example">
    
    In an HTML user agent, multiple global environments can exist when
    multiple frames or windows are created.  Each frame or window will have
    its own set of [=initial objects=],
    which the following HTML document demonstrates:
    
    <pre highlight="html">
        &lt;!DOCTYPE html&gt;
        &lt;title&gt;Different global environments&lt;/title&gt;
        &lt;iframe id=a&gt;&lt;/iframe&gt;
        &lt;script&gt;
        var iframe = document.getElementById("a");
        var w = iframe.contentWindow;              // The global object in the frame
        
        Object == w.Object;                        // Evaluates to false, per ECMA-262
        Node == w.Node;                            // Evaluates to false
        iframe instanceof w.Node;                  // Evaluates to false
        iframe instanceof w.Object;                // Evaluates to false
        iframe.appendChild instanceof Function;    // Evaluates to true
        iframe.appendChild instanceof w.Function;  // Evaluates to false
        &lt;/script&gt;
    </pre>
</div>

Unless otherwise specified, each ECMAScript global environment <dfn id="dfn-expose" for="ECMAScript global environment" export>exposes</dfn>
all [=interfaces=]
that the implementation supports.  If a given ECMAScript global environment does not
expose an interface, then the requirements given in
[[#es-interfaces]] are
not followed for that interface.

Note: This allows, for example, ECMAScript global environments for Web Workers to [=expose=]
different sets of supported interfaces from those exposed in environments
for Web pages.

Although at the time of this writing the ECMAScript specification does not reflect this,
every ECMAScript object must have an <dfn id="dfn-associated-realm" export>associated [=Realm=]</dfn>. The mechanisms
for associating objects with Realms are, for now, underspecified. However, we note that
in the case of [=platform objects=], the
associated Realm is equal to the object's [=relevant Realm=], and
for non-exotic function objects (i.e. not callable proxies, and not bound functions)
the associated Realm is equal to the value of the function object's \[[Realm]] internal
slot.


<h3 id="es-type-mapping">ECMAScript type mapping</h3>

This section describes how types in the IDL map to types in ECMAScript.

Each sub-section below describes how values of a given IDL type are represented
in ECMAScript.  For each IDL type, it is described how ECMAScript values are
<dfn id="dfn-convert-ecmascript-to-idl-value" export lt="converted to an IDL value|converted to IDL values">converted to an IDL value</dfn>
when passed to a [=platform object=] expecting that type, and how IDL values
of that type are <dfn id="dfn-convert-idl-to-ecmascript-value" export lt="converted to an ECMAScript value|converted to ECMAScript values">converted to ECMAScript values</dfn>
when returned from a platform object.


<h4 id="es-any">any</h4>

Since the IDL {{any}} type
is the union of all other IDL types, it can correspond to any
ECMAScript value type.

<p id="es-to-any">
    How to [=converted to an IDL value|convert an ECMAScript value=] to an IDL {{any}} value depends on the type of the
    ECMAScript value:
</p>

<dl class="switch">
     :  The <emu-val>undefined</emu-val> value
     :: The IDL value is an
        {{object}} reference
        to a special object that represents the ECMAScript
        <emu-val>undefined</emu-val> value.
     :  The <emu-val>null</emu-val> value
     :: The IDL value is the <emu-val>null</emu-val>
        {{object?}} reference.
     :  A <emu-val>Boolean</emu-val> value
     :: The IDL value is the
        {{boolean}}
        value that represents the same truth value.
     :  A <emu-val>Number</emu-val> value
     :: The IDL value is that which is obtained
        by following the rules for converting the
        <emu-val>Number</emu-val> to an IDL
        {{unrestricted double}} value,
        as described in [[#es-unrestricted-double]],.
     :  A <emu-val>String</emu-val> value
     :: The IDL value is that which is obtained
        by following the rules for converting the
        <emu-val>String</emu-val> to an IDL
        {{DOMString}} value,
        as described in [[#es-DOMString]],.
     :  An {{object}} value
     :: The IDL value is an
        {{object}} value that
        references the same object.
</dl>

<p id="any-to-es">
    An IDL {{any}} value is
    [=converted to an ECMAScript value=]
    as follows.  If the value is an {{object}}
    reference to a special object that represents an ECMAScript <emu-val>undefined</emu-val>
    value, then it is converted to the ECMAScript
    <emu-val>undefined</emu-val> value.  Otherwise,
    the rules for converting the [=specific type=]
    of the IDL {{any}} value
    as described in the remainder of this section are performed.
</p>


<h4 id="es-void">void</h4>

The only place that the {{void}} type may appear
in IDL is as the [=return type=] of an
[=operation=].  Functions on [=platform objects=]
that implement an operation whose IDL specifies a
{{void}} return type must return the
<emu-val>undefined</emu-val> value.

ECMAScript functions that implement an operation whose IDL
specifies a {{void}} return type
may return any value, which will be discarded.


<h4 id="es-boolean">boolean</h4>

<p id="es-to-boolean">
    An ECMAScript value |V| is
    [=converted=]
    to an IDL {{boolean}} value
    by running the following algorithm:
</p>

<ol class="algorithm">
    1.  Let |x| be the result of computing [=ToBoolean=](|V|).
    1.  Return the IDL {{boolean}} value that is the one that represents the same truth value as the ECMAScript <emu-val>Boolean</emu-val> value |x|.
</ol>

<p id="boolean-to-es">
    The IDL {{boolean}} value <emu-val>true</emu-val>
    is [=converted=] to
    the ECMAScript <emu-val>true</emu-val> value and the IDL {{boolean}}
    value <emu-val>false</emu-val> is converted to the ECMAScript
    <emu-val>false</emu-val> value.
</p>


<h4 id="es-byte">byte</h4>

<p id="es-to-byte">
    An ECMAScript value |V| is
    [=converted=]
    to an IDL {{byte}} value
    by running the following algorithm:
</p>

<ol class="algorithm">
    1.  Initialize |x| to [=ToNumber=](|V|).
    1.  If the conversion to an IDL value is being performed due to any of the following:
        *   |V| is being assigned to an [=attribute=] annotated with the [{{EnforceRange}}] [=extended attribute=],
        *   |V| is being passed as an [=operation=] argument annotated with the [{{EnforceRange}}] extended attribute, or
        *   |V| is being used as the value of a [=dictionary member=] annotated with the [{{EnforceRange}}] extended attribute,
        
        then:
        
        1.  If |x| is <emu-val>NaN</emu-val>, +∞, or −∞, then <a lt="es throw">throw a <emu-val>TypeError</emu-val></a>.
        1.  Set |x| to [=sign=](|x|) * [=floor=]([=abs=](|x|)).
        1.  If |x| &lt; −2<sup>7</sup> or |x| &gt; 2<sup>7</sup> − 1, then <a lt="es throw">throw a <emu-val>TypeError</emu-val></a>.
        1.  Return the IDL {{byte}} value that represents the same numeric value as |x|.
    1.  If |x| is not <emu-val>NaN</emu-val> and the conversion to an IDL value is being performed due to any of the following:
        *   |V| is being assigned to an [=attribute=] annotated with the [{{Clamp}}] [=extended attribute=],
        *   |V| is being passed as an [=operation=] argument annotated with the [{{Clamp}}] extended attribute, or
        *   |V| is being used as the value of a [=dictionary member=] annotated with the [{{Clamp}}] extended attribute,
        
        then:
        
        1.  Set |x| to min(max(|x|, −2<sup>7</sup>), 2<sup>7</sup> − 1).
        1.  Round |x| to the nearest integer, choosing the even integer if it lies halfway between two, and choosing +0 rather than −0.
        1.  Return the IDL {{byte}} value that represents the same numeric value as |x|.
    1.  If |x| is <emu-val>NaN</emu-val>, +0, −0, +∞, or −∞, then return the IDL {{byte}} value that represents 0.
    1.  Set |x| to [=sign=](|x|) * [=floor=]([=abs=](|x|)).
    1.  Set |x| to |x| [=modulo=] 2<sup>8</sup>.
    1.  If |x| ≥ 2<sup>7</sup>, return the IDL {{byte}} value that represents the same numeric value as |x| − 2<sup>8</sup>.
        Otherwise, return the IDL {{byte}} value that represents the same numeric value as |x|.
</ol>

<p id="byte-to-es">
    The result of [=converted to an ECMAScript value|converting=]
    an IDL {{byte}} value to an ECMAScript
    value is a <emu-val>Number</emu-val> that represents
    the same numeric value as the IDL {{byte}} value.
    The <emu-val>Number</emu-val> value will be an integer in the range [−128, 127].
</p>


<h4 id="es-octet">octet</h4>

<p id="es-to-octet">
    An ECMAScript value |V| is
    [=converted=]
    to an IDL {{octet}} value
    by running the following algorithm:
</p>

<ol class="algorithm">
    1.  Initialize |x| to [=ToNumber=](|V|).
    1.  If the conversion to an IDL value is being performed due to any of the following:
        *   |V| is being assigned to an [=attribute=] annotated with the [{{EnforceRange}}] [=extended attribute=],
        *   |V| is being passed as an [=operation=] argument annotated with the [{{EnforceRange}}] extended attribute, or
        *   |V| is being used as the value of a [=dictionary member=] annotated with the [{{EnforceRange}}] extended attribute,
        
        then:
        
        1.  If |x| is <emu-val>NaN</emu-val>, +∞, or −∞, then <a lt="es throw">throw a <emu-val>TypeError</emu-val></a>.
        1.  Set |x| to [=sign=](|x|) * [=floor=]([=abs=](|x|)).
        1.  If |x| &lt; 0 or |x| &gt; 2<sup>8</sup> − 1, then <a lt="es throw">throw a <emu-val>TypeError</emu-val></a>.
        1.  Return the IDL {{octet}} value that represents the same numeric value as |x|.
    1.  If |x| is not <emu-val>NaN</emu-val> and the conversion to an IDL value is being performed due to any of the following:
        *   |V| is being assigned to an [=attribute=] annotated with the [{{Clamp}}] [=extended attribute=],
        *   |V| is being passed as an [=operation=] argument annotated with the [{{Clamp}}] extended attribute, or
        *   |V| is being used as the value of a [=dictionary member=] annotated with the [{{Clamp}}] extended attribute,
        
        then:
        
        1.  Set |x| to min(max(|x|, 0), 2<sup>8</sup> − 1).
        1.  Round |x| to the nearest integer, choosing the even integer if it lies halfway between two, and choosing +0 rather than −0.
        1.  Return the IDL {{octet}} value that represents the same numeric value as |x|.
    1.  If |x| is <emu-val>NaN</emu-val>, +0, −0, +∞, or −∞, then return the IDL {{octet}} value that represents 0.
    1.  Set |x| to [=sign=](|x|) * [=floor=]([=abs=](|x|)).
    1.  Set |x| to |x| [=modulo=] 2<sup>8</sup>.
    1.  Return the IDL {{octet}} value that represents the same numeric value as |x|.
</ol>

<p id="octet-to-es">
    The result of [=converted to an ECMAScript value|converting=]
    an IDL {{octet}} value to an ECMAScript
    value is a <emu-val>Number</emu-val> that represents
    the same numeric value as the IDL
    {{octet}} value.
    The <emu-val>Number</emu-val> value will be an integer in the range [0, 255].
</p>


<h4 id="es-short">short</h4>

<p id="es-to-short">
    An ECMAScript value |V| is
    [=converted=]
    to an IDL {{short}} value
    by running the following algorithm:
</p>

<ol class="algorithm">
    1.  Initialize |x| to [=ToNumber=](|V|).
    1.  If the conversion to an IDL value is being performed due to any of the following:
        *   |V| is being assigned to an [=attribute=] annotated with the [{{EnforceRange}}] [=extended attribute=],
        *   |V| is being passed as an [=operation=] argument annotated with the [{{EnforceRange}}] extended attribute, or
        *   |V| is being used as the value of a [=dictionary member=] annotated with the [{{EnforceRange}}] extended attribute,
        
        then:
        
        1.  If |x| is <emu-val>NaN</emu-val>, +∞, or −∞, then <a lt="es throw">throw a <emu-val>TypeError</emu-val></a>.
        1.  Set |x| to [=sign=](|x|) * [=floor=]([=abs=](|x|)).
        1.  If |x| &lt; −2<sup>15</sup> or |x| &gt; 2<sup>15</sup> − 1, then <a lt="es throw">throw a <emu-val>TypeError</emu-val></a>.
        1.  Return the IDL {{short}} value that represents the same numeric value as |x|.
    1.  If |x| is not <emu-val>NaN</emu-val> and the conversion to an IDL value is being performed due to any of the following:
        *   |V| is being assigned to an [=attribute=] annotated with the [{{Clamp}}] [=extended attribute=],
        *   |V| is being passed as an [=operation=] argument annotated with the [{{Clamp}}] extended attribute, or
        *   |V| is being used as the value of a [=dictionary member=] annotated with the [{{Clamp}}] extended attribute,
        
        then:
        
        1.  Set |x| to min(max(|x|, −2<sup>15</sup>), 2<sup>15</sup> − 1).
        1.  Round |x| to the nearest integer, choosing the even integer if it lies halfway between two, and choosing +0 rather than −0.
        1.  Return the IDL {{short}} value that represents the same numeric value as |x|.
    1.  If |x| is <emu-val>NaN</emu-val>, +0, −0, +∞, or −∞, then return the IDL {{short}} value that represents 0.
    1.  Set |x| to [=sign=](|x|) * [=floor=]([=abs=](|x|)).
    1.  Set |x| to |x| [=modulo=] 2<sup>16</sup>.
    1.  If |x| ≥ 2<sup>15</sup>, return the IDL {{short}} value that represents the same numeric value as |x| − 2<sup>16</sup>.
        Otherwise, return the IDL {{short}} value that represents the same numeric value as |x|.
</ol>

<p id="short-to-es">
    The result of [=converted to an ECMAScript value|converting=]
    an IDL {{short}} value to an ECMAScript
    value is a <emu-val>Number</emu-val> that represents the
    same numeric value as the IDL
    {{short}} value.
    The <emu-val>Number</emu-val> value will be an integer in the range [−32768, 32767].
</p>


<h4 id="es-unsigned-short">unsigned short</h4>

<p id="es-to-unsigned-short">
    An ECMAScript value |V| is
    [=converted=]
    to an IDL {{unsigned short}} value
    by running the following algorithm:
</p>

<ol class="algorithm">
    1.  Initialize |x| to [=ToNumber=](|V|).
    1.  If the conversion to an IDL value is being performed due to any of the following:
        *   |V| is being assigned to an [=attribute=] annotated with the [{{EnforceRange}}] [=extended attribute=],
        *   |V| is being passed as an [=operation=] argument annotated with the [{{EnforceRange}}] extended attribute, or
        *   |V| is being used as the value of a [=dictionary member=] annotated with the [{{EnforceRange}}] extended attribute,
        
        then:
        
        1.  If |x| is <emu-val>NaN</emu-val>, +∞, or −∞, then <a lt="es throw">throw a <emu-val>TypeError</emu-val></a>.
        1.  Set |x| to [=sign=](|x|) * [=floor=]([=abs=](|x|)).
        1.  If |x| &lt; 0 or |x| &gt; 2<sup>16</sup> − 1, then <a lt="es throw">throw a <emu-val>TypeError</emu-val></a>.
        1.  Return the IDL {{unsigned short}} value that represents the same numeric value as |x|.
    1.  If |x| is not <emu-val>NaN</emu-val> and the conversion to an IDL value is being performed due to any of the following:
        *   |V| is being assigned to an [=attribute=] annotated with the [{{Clamp}}] [=extended attribute=],
        *   |V| is being passed as an [=operation=] argument annotated with the [{{Clamp}}] extended attribute, or
        *   |V| is being used as the value of a [=dictionary member=] annotated with the [{{Clamp}}] extended attribute,
        
        then:
        
        1.  Set |x| to min(max(|x|, 0), 2<sup>16</sup> − 1).
        1.  Round |x| to the nearest integer, choosing the even integer if it lies halfway between two, and choosing +0 rather than −0.
        1.  Return the IDL {{unsigned short}} value that represents the same numeric value as |x|.
    1.  Set |x| to [=ToUint16=](|x|).
    1.  Return the IDL {{unsigned short}} value that represents the same numeric value as |x|.
</ol>

<p id="unsigned-short-to-es">
    The result of [=converted to an ECMAScript value|converting=]
    an IDL {{unsigned short}} value to an ECMAScript
    value is a <emu-val>Number</emu-val> that
    represents the same numeric value as the IDL
    {{unsigned short}} value.
    The <emu-val>Number</emu-val> value will be an integer in the range [0, 65535].
</p>


<h4 id="es-long">long</h4>

<p id="es-to-long">
    An ECMAScript value |V| is
    [=converted=]
    to an IDL {{long}} value
    by running the following algorithm:
</p>

<ol class="algorithm">
    1.  Initialize |x| to [=ToNumber=](|V|).
    1.  If the conversion to an IDL value is being performed due to any of the following:
        *   |V| is being assigned to an [=attribute=] annotated with the [{{EnforceRange}}] [=extended attribute=],
        *   |V| is being passed as an [=operation=] argument annotated with the [{{EnforceRange}}] extended attribute, or
        *   |V| is being used as the value of a [=dictionary member=] annotated with the [{{EnforceRange}}] extended attribute,
        
        then:
        
        1.  If |x| is <emu-val>NaN</emu-val>, +∞, or −∞, then <a lt="es throw">throw a <emu-val>TypeError</emu-val></a>.
        1.  Set |x| to [=sign=](|x|) * [=floor=]([=abs=](|x|)).
        1.  If |x| &lt; −2<sup>31</sup> or |x| &gt; 2<sup>31</sup> − 1, then <a lt="es throw">throw a <emu-val>TypeError</emu-val></a>.
        1.  Return the IDL {{long}} value that represents the same numeric value as |x|.
    1.  If |x| is not <emu-val>NaN</emu-val> and the conversion to an IDL value is being performed due to any of the following:
        *   |V| is being assigned to an [=attribute=] annotated with the [{{Clamp}}] [=extended attribute=],
        *   |V| is being passed as an [=operation=] argument annotated with the [{{Clamp}}] extended attribute, or
        *   |V| is being used as the value of a [=dictionary member=] annotated with the [{{Clamp}}] extended attribute,
        
        then:
        
        1.  Set |x| to min(max(|x|, −2<sup>31</sup>), 2<sup>31</sup> − 1).
        1.  Round |x| to the nearest integer, choosing the even integer if it lies halfway between two, and choosing +0 rather than −0.
        1.  Return the IDL {{long}} value that represents the same numeric value as |x|.
    1.  Set |x| to [=ToInt32=](|x|).
    1.  Return the IDL {{long}} value that represents the same numeric value as |x|.
</ol>

<p id="long-to-es">
    The result of [=converted to an ECMAScript value|converting=]
    an IDL {{long}} value to an ECMAScript
    value is a <emu-val>Number</emu-val> that
    represents the same numeric value as the IDL
    {{long}} value.
    The <emu-val>Number</emu-val> value will be an integer in the range [−2147483648, 2147483647].
</p>


<h4 id="es-unsigned-long">unsigned long</h4>

<p id="es-to-unsigned-long">
    An ECMAScript value |V| is
    [=converted=]
    to an IDL {{unsigned long}} value
    by running the following algorithm:
</p>

<ol class="algorithm">
    1.  Initialize |x| to [=ToNumber=](|V|).
    1.  If the conversion to an IDL value is being performed due to any of the following:
        *   |V| is being assigned to an [=attribute=] annotated with the [{{EnforceRange}}] [=extended attribute=],
        *   |V| is being passed as an [=operation=] argument annotated with the [{{EnforceRange}}] extended attribute, or
        *   |V| is being used as the value of a [=dictionary member=] annotated with the [{{EnforceRange}}] extended attribute,
        
        then:
        
        1.  If |x| is <emu-val>NaN</emu-val>, +∞, or −∞, then <a lt="es throw">throw a <emu-val>TypeError</emu-val></a>.
        1.  Set |x| to [=sign=](|x|) * [=floor=]([=abs=](|x|)).
        1.  If |x| &lt; 0 or |x| &gt; 2<sup>32</sup> − 1, then <a lt="es throw">throw a <emu-val>TypeError</emu-val></a>.
        1.  Return the IDL {{unsigned long}} value that represents the same numeric value as |x|.
    1.  If |x| is not <emu-val>NaN</emu-val> and the conversion to an IDL value is being performed due to any of the following:
        *   |V| is being assigned to an [=attribute=] annotated with the [{{Clamp}}] [=extended attribute=],
        *   |V| is being passed as an [=operation=] argument annotated with the [{{Clamp}}] extended attribute, or
        *   |V| is being used as the value of a [=dictionary member=] annotated with the [{{Clamp}}] extended attribute,
        
        then:
        
        1.  Set |x| to min(max(|x|, 0), 2<sup>32</sup> − 1).
        1.  Round |x| to the nearest integer, choosing the even integer if it lies halfway between two, and choosing +0 rather than −0.
        1.  Return the IDL {{unsigned long}} value that represents the same numeric value as |x|.
    1.  Set |x| to [=ToUint32=](|x|).
    1.  Return the IDL {{unsigned long}} value that represents the same numeric value as |x|.
</ol>

<p id="unsigned-long-to-es">
    The result of [=converted to an ECMAScript value|converting=]
    an IDL {{unsigned long}} value to an ECMAScript
    value is a <emu-val>Number</emu-val> that
    represents the same numeric value as the IDL
    {{unsigned long}} value.
    The <emu-val>Number</emu-val> value will be an integer in the range [0, 4294967295].
</p>


<h4 id="es-long-long">long long</h4>

<p id="es-to-long-long">
    An ECMAScript value |V| is
    [=converted=]
    to an IDL {{long long}} value
    by running the following algorithm:
</p>

<ol class="algorithm">
    1.  Initialize |x| to [=ToNumber=](|V|).
    1.  If the conversion to an IDL value is being performed due to any of the following:
        *   |V| is being assigned to an [=attribute=] annotated with the [{{EnforceRange}}] [=extended attribute=],
        *   |V| is being passed as an [=operation=] argument annotated with the [{{EnforceRange}}] extended attribute, or
        *   |V| is being used as the value of a [=dictionary member=] annotated with the [{{EnforceRange}}] extended attribute,
        
        then:
        
        1.  If |x| is <emu-val>NaN</emu-val>, +∞, or −∞, then <a lt="es throw">throw a <emu-val>TypeError</emu-val></a>.
        1.  Set |x| to [=sign=](|x|) * [=floor=]([=abs=](|x|)).
        1.  If |x| &lt; −2<sup>53</sup> + 1 or |x| &gt; 2<sup>53</sup> − 1, then <a lt="es throw">throw a <emu-val>TypeError</emu-val></a>.
        1.  Return the IDL {{long long}} value that represents the same numeric value as |x|.
    1.  If |x| is not <emu-val>NaN</emu-val> and the conversion to an IDL value is being performed due to any of the following:
        *   |V| is being assigned to an [=attribute=] annotated with the [{{Clamp}}] [=extended attribute=],
        *   |V| is being passed as an [=operation=] argument annotated with the [{{Clamp}}] extended attribute, or
        *   |V| is being used as the value of a [=dictionary member=] annotated with the [{{Clamp}}] extended attribute,
        
        then:
        
        1.  Set |x| to min(max(|x|, −2<sup>53</sup> + 1), 2<sup>53</sup> − 1).
        1.  Round |x| to the nearest integer, choosing the even integer if it lies halfway between two, and choosing +0 rather than −0.
        1.  Return the IDL {{long long}} value that represents the same numeric value as |x|.
    1.  If |x| is <emu-val>NaN</emu-val>, +0, −0, +∞, or −∞, then return the IDL {{long long}} value that represents 0.
    1.  Set |x| to [=sign=](|x|) * [=floor=]([=abs=](|x|)).
    1.  Set |x| to |x| [=modulo=] 2<sup>64</sup>.
    1.  If |x| is greater than or equal to 2<sup>63</sup>, then set |x| to |x| − 2<sup>64</sup>.
    1.  Return the IDL {{long long}} value that represents the same numeric value as |x|.
</ol>

<p id="long-long-to-es">
    The result of [=converted to an ECMAScript value|converting=]
    an IDL {{long long}} value to an ECMAScript
    value is a <emu-val>Number</emu-val> value that
    represents the closest numeric value to the {{long long}},
    choosing the numeric value with an <em>even significand</em> if there are
    two [=equally close values=].
    If the {{long long}} is in the range
    [−2<sup>53</sup> + 1, 2<sup>53</sup> − 1], then the <emu-val>Number</emu-val>
    will be able to represent exactly the same value as the
    {{long long}}.
</p>


<h4 id="es-unsigned-long-long">unsigned long long</h4>

<p id="es-to-unsigned-long-long">
    An ECMAScript value |V| is
    [=converted=]
    to an IDL {{unsigned long long}} value
    by running the following algorithm:
</p>

<ol class="algorithm">
    1.  Initialize |x| to [=ToNumber=](|V|).
    1.  If the conversion to an IDL value is being performed due to any of the following:
        *   |V| is being assigned to an [=attribute=] annotated with the [{{EnforceRange}}] [=extended attribute=],
        *   |V| is being passed as an [=operation=] argument annotated with the [{{EnforceRange}}] extended attribute, or
        *   |V| is being used as the value of a [=dictionary member=] annotated with the [{{EnforceRange}}] extended attribute,
        
        then:
        
        1.  If |x| is <emu-val>NaN</emu-val>, +∞, or −∞, then <a lt="es throw">throw a <emu-val>TypeError</emu-val></a>.
        1.  Set |x| to [=sign=](|x|) * [=floor=]([=abs=](|x|)).
        1.  If |x| &lt; 0 or |x| &gt; 2<sup>53</sup> − 1, then <a lt="es throw">throw a <emu-val>TypeError</emu-val></a>.
        1.  Return the IDL {{unsigned long long}} value that represents the same numeric value as |x|.
    1.  If |x| is not <emu-val>NaN</emu-val> and the conversion to an IDL value is being performed due to any of the following:
        *   |V| is being assigned to an [=attribute=] annotated with the [{{Clamp}}] [=extended attribute=],
        *   |V| is being passed as an [=operation=] argument annotated with the [{{Clamp}}] extended attribute, or
        *   |V| is being used as the value of a [=dictionary member=] annotated with the [{{Clamp}}] extended attribute,
        
        then:
        
        1.  Set |x| to min(max(|x|, 0), 2<sup>53</sup> − 1).
        1.  Round |x| to the nearest integer, choosing the even integer if it lies halfway between two, and choosing +0 rather than −0.
        1.  Return the IDL {{unsigned long long}} value that represents the same numeric value as |x|.
    1.  If |x| is <emu-val>NaN</emu-val>, +0, −0, +∞, or −∞, then return the IDL {{unsigned long long}} value that represents 0.
    1.  Set |x| to [=sign=](|x|) * [=floor=]([=abs=](|x|)).
    1.  Set |x| to |x| [=modulo=] 2<sup>64</sup>.
    1.  Return the IDL {{unsigned long long}} value that represents the same numeric value as |x|.
</ol>

<p id="unsigned-long-long-to-es">
    The result of [=converted to an ECMAScript value|converting=]
    an IDL {{unsigned long long}} value to an ECMAScript
    value is a <emu-val>Number</emu-val> value that
    represents the closest numeric value to the {{unsigned long long}},
    choosing the numeric value with an <em>even significand</em> if there are
    two [=equally close values=].
    If the {{unsigned long long}} is less than or equal to 2<sup>53</sup> − 1,
    then the <emu-val>Number</emu-val> will be able to
    represent exactly the same value as the
    {{unsigned long long}}.
</p>


<h4 id="es-float">float</h4>

<p id="es-to-float">
    An ECMAScript value |V| is
    [=converted=]
    to an IDL {{float}} value
    by running the following algorithm:
</p>

<ol class="algorithm">
    1.  Let |x| be [=ToNumber=](|V|).
    1.  If |x| is <emu-val>NaN</emu-val>, <emu-val>+Infinity</emu-val> or
        <emu-val>−Infinity</emu-val>, then <a lt="es throw">throw a <emu-val>TypeError</emu-val></a>.
    1.  Let |S| be the set of finite IEEE 754 single-precision floating
        point values except −0, but with two special values added: 2<sup>128</sup> and
        −2<sup>128</sup>.
    1.  Let |y| be the number in |S| that is closest
        to |x|, selecting the number with an
        <em>even significand</em> if there are two [=equally close values=].
        (The two special values 2<sup>128</sup> and −2<sup>128</sup>
        are considered to have even significands for this purpose.)
    1.  If |y| is 2<sup>128</sup> or −2<sup>128</sup>, then <a lt="es throw">throw a <emu-val>TypeError</emu-val></a>.
    1.  If |y| is +0 and |x| is negative, return −0.
    1.  Return |y|.
</ol>

<p id="float-to-es">
    The result of [=converted to an ECMAScript value|converting=]
    an IDL {{float}} value to an ECMAScript
    value is the <emu-val>Number</emu-val> value that represents the same numeric value as the IDL
    {{float}} value.
</p>


<h4 id="es-unrestricted-float">unrestricted float</h4>

<p id="es-to-unrestricted-float">
    An ECMAScript value |V| is
    [=converted=]
    to an IDL {{unrestricted float}} value
    by running the following algorithm:
</p>

<ol class="algorithm">
    1.  Let |x| be [=ToNumber=](|V|).
    1.  If |x| is <emu-val>NaN</emu-val>, then return the IDL {{unrestricted float}} value that represents the IEEE 754 NaN value with the bit pattern 0x7fc00000 [[!IEEE-754]].
    1.  Let |S| be the set of finite IEEE 754 single-precision floating
        point values except −0, but with two special values added: 2<sup>128</sup> and
        −2<sup>128</sup>.
    1.  Let |y| be the number in |S| that is closest
        to |x|, selecting the number with an
        <em>even significand</em> if there are two [=equally close values=].
        (The two special values 2<sup>128</sup> and −2<sup>128</sup>
        are considered to have even significands for this purpose.)
    1.  If |y| is 2<sup>128</sup>, return +∞.
    1.  If |y| is −2<sup>128</sup>, return −∞.
    1.  If |y| is +0 and |x| is negative, return −0.
    1.  Return |y|.
</ol>

Note: Since there is only a single ECMAScript <emu-val>NaN</emu-val> value,
it must be canonicalized to a particular single precision IEEE 754 NaN value.  The NaN value
mentioned above is chosen simply because it is the quiet NaN with the lowest
value when its bit pattern is interpreted as an unsigned 32 bit integer.

<p id="unrestricted-float-to-es">
    The result of [=converted to an ECMAScript value|converting=]
    an IDL {{unrestricted float}} value to an ECMAScript
    value is a <emu-val>Number</emu-val>:
</p>

*   If the IDL {{unrestricted float}} value is a NaN,
    then the <emu-val>Number</emu-val> value is <emu-val>NaN</emu-val>.
*   Otherwise, the <emu-val>Number</emu-val> value is
    the one that represents the same numeric value as the IDL
    {{unrestricted float}} value.


<h4 id="es-double">double</h4>

<p id="es-to-double">
    An ECMAScript value |V| is
    [=converted=]
    to an IDL {{double}} value
    by running the following algorithm:
</p>

<ol class="algorithm">
    1.  Let |x| be [=ToNumber=](|V|).
    1.  If |x| is <emu-val>NaN</emu-val>, <emu-val>+Infinity</emu-val> or
        <emu-val>−Infinity</emu-val>, then <a lt="es throw">throw a <emu-val>TypeError</emu-val></a>.
    1.  Return the IDL {{double}} value
        that has the same numeric value as |x|.
</ol>

<p id="double-to-es">
    The result of [=converted to an ECMAScript value|converting=]
    an IDL {{double}} value to an ECMAScript
    value is the <emu-val>Number</emu-val> value that represents the
    same numeric value as the IDL {{double}} value.
</p>


<h4 id="es-unrestricted-double">unrestricted double</h4>

<p id="es-to-unrestricted-double">
    An ECMAScript value |V| is
    [=converted=]
    to an IDL {{unrestricted double}} value
    by running the following algorithm:
</p>

<ol class="algorithm">
    1.  Let |x| be [=ToNumber=](|V|).
    1.  If |x| is <emu-val>NaN</emu-val>, then return the IDL {{unrestricted double}} value that represents the IEEE 754 NaN value with the bit pattern 0x7ff8000000000000 [[!IEEE-754]].
    1.  Return the IDL {{unrestricted double}} value
        that has the same numeric value as |x|.
</ol>

Note: Since there is only a single ECMAScript <emu-val>NaN</emu-val> value,
it must be canonicalized to a particular double precision IEEE 754 NaN value.  The NaN value
mentioned above is chosen simply because it is the quiet NaN with the lowest
value when its bit pattern is interpreted as an unsigned 64 bit integer.

<p id="unrestricted-double-to-es">
    The result of [=converted to an ECMAScript value|converting=]
    an IDL {{unrestricted double}} value to an ECMAScript
    value is a <emu-val>Number</emu-val>:
</p>

*   If the IDL {{unrestricted double}} value is a NaN,
    then the <emu-val>Number</emu-val> value is <emu-val>NaN</emu-val>.
*   Otherwise, the <emu-val>Number</emu-val> value is
    the one that represents the same numeric value as the IDL
    {{unrestricted double}} value.


<h4 id="es-DOMString">DOMString</h4>

<p id="es-to-DOMString">
    An ECMAScript value |V| is
    [=converted=]
    to an IDL {{DOMString}} value
    by running the following algorithm:
</p>

<ol class="algorithm">
    1.  If |V| is <emu-val>null</emu-val>
        and the conversion to an IDL value is being performed due
        to any of the following:
        *   |V| is being passed as an [=operation=]
            argument that is annotated with [{{TreatNullAs}}],
        *   |V| is being assigned to an [=attribute=]
            annotated with [{{TreatNullAs}}],
        *   |V| is being returned from a [=user object=] implementation of an
            operation annotated with [{{TreatNullAs}}], or
        *   |V| is being returned from a [=user object=] implementation of an
            attribute annotated with [{{TreatNullAs}}],
        
        then return the {{DOMString}}
        value that represents the empty string.
    1.  Let |x| be [=ToString=](|V|).
    1.  Return the IDL {{DOMString}} value that represents the same sequence of code units as the one the ECMAScript <emu-val>String</emu-val> value |x| represents.
</ol>

<p id="DOMString-to-es">
    The result of [=converted to an ECMAScript value|converting=]
    an IDL {{DOMString}} value to an ECMAScript
    value is the <emu-val>String</emu-val>
    value that represents the same sequence of [=code units=] that the
    IDL {{DOMString}} represents.
</p>


<h4 id="es-ByteString">ByteString</h4>

<p id="es-to-ByteString">
    An ECMAScript value |V| is
    [=converted=]
    to an IDL {{ByteString}} value
    by running the following algorithm:
</p>

<ol class="algorithm">
    1.  Let |x| be [=ToString=](|V|).
    1.  If the value of any [=element=]
        of |x| is greater than 255, then <a lt="es throw">throw a <emu-val>TypeError</emu-val></a>.
    1.  Return an IDL {{ByteString}} value
        whose length is the length of |x|, and where the value of each element is
        the value of the corresponding element of |x|.
</ol>

<p id="ByteString-to-es">
    The result of [=converted to an ECMAScript value|converting=]
    an IDL {{ByteString}} value to an ECMAScript
    value is a <emu-val>String</emu-val>
    value whose length is the length of the {{ByteString}},
    and the value of each element of which is the value of the corresponding element
    of the {{ByteString}}.
</p>


<h4 id="es-USVString">USVString</h4>

<p id="es-to-USVString">
    An ECMAScript value |V| is
    [=converted=]
    to an IDL {{USVString}} value
    by running the following algorithm:
</p>

<ol class="algorithm">
    1.  Let |string| be the result of [=converted to an IDL value|converting=] |V|
        to a {{DOMString}}.
    1.  Return an IDL {{USVString}} value
        that is the result of [=obtain Unicode|converting string to a sequence of Unicode scalar values=].
</ol>

<p id="USVString-to-es">
    An IDL {{USVString}} value is
    [=converted=]
    to an ECMAScript value by running the following algorithm:
</p>

<ol class="algorithm">
    1.  Let |scalarValues| be the sequence of [=Unicode scalar values=] the {{USVString}} represents.
    1.  Let |string| be the sequence of [=code units=] that results from encoding |scalarValues| in UTF-16.
    1.  Return the <emu-val>String</emu-val> value that represents the same sequence of [=code units=] as |string|.
</ol>


<h4 id="es-object">object</h4>

IDL {{object}}
values are represented by ECMAScript <emu-val>Object</emu-val> values.

<p id="es-to-object">
    An ECMAScript value |V| is
    [=converted=]
    to an IDL {{object}} value
    by running the following algorithm:
</p>

<ol class="algorithm">
    1.  If [=Type=](|V|) is not Object, then <a lt="es throw">throw a <emu-val>TypeError</emu-val></a>.
    1.  Return the IDL {{object}} value that is a reference to the same object as |V|.
</ol>

<p id="object-to-es">
    The result of [=converted to an ECMAScript value|converting=]
    an IDL {{object}} value to an ECMAScript
    value is the <emu-val>Object</emu-val> value that represents a reference to the same object that the
    IDL {{object}} represents.
</p>


<h4 id="es-interface">Interface types</h4>

IDL <a href="#idl-interface">interface type</a>
values are represented by ECMAScript <emu-val>Object</emu-val> or
<emu-val>Function</emu-val> values.

<p id="es-to-interface">
    An ECMAScript value |V| is
    [=converted=]
    to an IDL <a href="#idl-interface">interface type</a> value
    by running the following algorithm (where |I| is the [=interface=]):
</p>

<ol class="algorithm">
    1.  If [=Type=](|V|) is not Object, then <a lt="es throw">throw a <emu-val>TypeError</emu-val></a>.
    1.  If |V| is a [=platform object=] that implements |I|, then return the IDL <a href="#idl-interface">interface type</a> value that represents a reference to that platform object.
    1.  If |V| is a [=user object=]
        that is considered to implement |I| according to the rules in
        [[#es-user-objects]],
        then return the IDL <a href="#idl-interface">interface type</a> value that represents a reference to that user object,
        with the [=incumbent script=]
        as the [=callback context=]. [[!HTML]]
    1.  <a lt="es throw">Throw a <emu-val>TypeError</emu-val></a>.
</ol>

<p id="interface-to-es">
    The result of [=converted to an ECMAScript value|converting=]
    an IDL <a href="#idl-interface">interface type</a>
    value to an ECMAScript value is the <emu-val>Object</emu-val>
    value that represents a reference to the same object that the IDL
    <a href="#idl-interface">interface type</a> value represents.
</p>


<h4 id="es-dictionary">Dictionary types</h4>

IDL <a href="#idl-dictionary">dictionary type</a> values are represented
by ECMAScript <emu-val>Object</emu-val> values.  Properties on
the object (or its prototype chain) correspond to [=dictionary members=].

<p id="es-to-dictionary">
    An ECMAScript value |V| is
    [=converted=]
    to an IDL <a href="#idl-dictionary">dictionary type</a> value
    by running the following algorithm (where |D| is the [=dictionary=]):
</p>

<ol class="algorithm">
    1.  If [=Type=](|V|) is not Undefined, Null or Object, then <a lt="es throw">throw a <emu-val>TypeError</emu-val></a>.
    1.  If |V| is a native <emu-val>RegExp</emu-val> object, then <a lt="es throw">throw a <emu-val>TypeError</emu-val></a>.
    1.  Let |dict| be an empty dictionary value of type |D|;
        every [=dictionary member=]
        is initially considered to be [=present|not present=].
    1.  Let |dictionaries| be a list consisting of |D| and all of |D|’s [=inherited dictionaries=],
        in order from least to most derived.
    1.  For each dictionary |dictionary| in |dictionaries|, in order:
        1.  For each dictionary member |member| declared on |dictionary|, in lexicographical order:
            1.  Let |key| be the [=identifier=] of |member|.
            1.  Let |value| be an ECMAScript value, depending on [=Type=](|V|):
                <dl class="switch">
                     :  Undefined
                     :  Null
                     :: |value| is <emu-val>undefined</emu-val>.
                     :  anything else
                     :: |value| is the result of calling the \[[Get]] internal method on |V| with property name |key|.
                </dl>
            1.  If |value| is not <emu-val>undefined</emu-val>, then:
                1.  Let |idlValue| be the result of [=converted to an IDL value|converting=] |value| to an IDL value whose type is the type |member| is declared to be of.
                1.  Set the dictionary member on |dict| with key name |key| to the value |idlValue|.  This dictionary member is considered to be [=present=].
            1.  Otherwise, if |value| is <emu-val>undefined</emu-val> but the [=dictionary member=] has a [=default value=], then:
                1.  Let |idlValue| be the dictionary member’s default value.
                1.  Set the dictionary member on |dict| with key name |key| to the value |idlValue|.  This dictionary member is considered to be [=present=].
            1.  Otherwise, if |value| is
                <emu-val>undefined</emu-val> and the
                [=dictionary member=] is a
                [=required dictionary member=], then throw a <emu-val>TypeError</emu-val>.
    1.  Return |dict|.
</ol>

Note: The order that [=dictionary members=] are looked
up on the ECMAScript object are not necessarily the same as the object’s property enumeration order.

<p id="dictionary-to-es">
    An IDL dictionary value |V| is
    [=converted=]
    to an ECMAScript <emu-val>Object</emu-val> value
    by running the following algorithm (where |D| is the [=dictionary=]):
</p>

<ol class="algorithm">
    1.  Let |O| be a new <emu-val>Object</emu-val> value created as if by the expression <code>({})</code>.
    1.  Let |dictionaries| be a list consisting of |D| and all of |D|’s [=inherited dictionaries=],
        in order from least to most derived.
    1.  For each dictionary |dictionary| in |dictionaries|, in order:
        1.  For each dictionary member |member| declared on |dictionary|, in lexicographical order:
            1.  Let |key| be the [=identifier=] of |member|.
            1.  If the dictionary member named |key| is [=present=] in |V|, then:
                1.  Let |idlValue| be the value of |member| on |V|.
                1.  Let |value| be the result of [=converted to an ECMAScript value|converting=] |idlValue| to an ECMAScript value.
                1.  Call [=CreateDataProperty=](|O|, |key|, |value|.
    1.  Return |O|.
</ol>


<h4 id="es-enumeration">Enumeration types</h4>

IDL <a href="#idl-enumeration">enumeration types</a> are represented by ECMAScript <emu-val>String</emu-val>
values.

<p id="es-to-enumeration">
    An ECMAScript value |V| is
    [=converted=]
    to an IDL [=enumeration|enumeration type=]
    value as follows (where |E| is the [=enumeration=]):
</p>

<ol class="algorithm">
    1.  Let |S| be the result of calling [=ToString=](|V|).
    1.  If |S| is not one of |E|’s [=enumeration values=], then <a lt="es throw">throw a <emu-val>TypeError</emu-val></a>.
    1.  Return the enumeration value of type |E| that is equal to |S|.
</ol>

<p id="enumeration-to-es">
    The result of [=converted to an ECMAScript value|converting=]
    an IDL [=enumeration|enumeration type=] value to an ECMAScript
    value is the <emu-val>String</emu-val>
    value that represents the same sequence of [=code units=] as
    the [=enumeration value=].
</p>


<h4 id="es-callback-function">Callback function types</h4>

IDL <a href="#idl-callback-function">callback function types</a> are represented by ECMAScript <emu-val>Function</emu-val>
objects, except in the [{{TreatNonObjectAsNull}}] case,
when they can be any object.

<p id="es-to-callback-function">
    An ECMAScript value |V| is
    [=converted=]
    to an IDL <a href="#idl-callback-function">callback function type</a> value
    by running the following algorithm:
</p>

<ol class="algorithm">
    1.  If the result of calling [=IsCallable=](|V|) is <emu-val>false</emu-val> and the conversion to an IDL value
        is not being performed due
        to |V| being assigned to an [=attribute=]
        whose type is a [=nullable type|nullable=]
        [=callback function=]
        that is annotated with [{{TreatNonObjectAsNull}}],
        then <a lt="es throw">throw a <emu-val>TypeError</emu-val></a>.
    1.  Return the IDL <a href="#idl-callback-function">callback
        function type</a> value that represents a reference to the same
        object that |V| represents,
        with the [=incumbent script=]
        as the [=callback context=]. [[!HTML]].
</ol>

<p id="callback-function-to-es">
    The result of [=converted to an ECMAScript value|converting=]
    an IDL <a href="#idl-callback-function">callback function type</a>
    value to an ECMAScript value is a reference to the same object
    that the IDL <a href="#idl-callback-function">callback function type</a> value represents.
</p>


<h4 id="es-nullable-type">Nullable types — |T|?</h4>

IDL [=nullable type=] values are represented
by values of either the ECMAScript type corresponding to the [=inner type|inner IDL type=], or
the ECMAScript <emu-val>null</emu-val> value.

<p id="es-to-nullable">
    An ECMAScript value |V| is
    [=converted=]
    to an IDL [=nullable type=] <code class="idl">|T|?</code>
    value (where |T| is the [=inner type=]) as follows:
</p>

<ol class="algorithm">
    1.  If [=Type=](|V|) is not Object, and
        the conversion to an IDL value is being performed due
        to |V| being assigned to an [=attribute=]
        whose type is a [=nullable type|nullable=]
        [=callback function=]
        that is annotated with [{{TreatNonObjectAsNull}}],
        then return the IDL
        [=nullable type=] <code class="idl">|T|?</code>
        value <emu-val>null</emu-val>.
    1.  Otherwise, if |V| is <emu-val>null</emu-val> or <emu-val>undefined</emu-val>, then return the IDL
        [=nullable type=] <code class="idl">|T|?</code>
        value <emu-val>null</emu-val>.
    1.  Otherwise, return the result of
        [=converted to an IDL value|converting=] |V|
        using the rules for the [=inner type|inner IDL type=] <code class="idl">T</code>.
</ol>

<p id="nullable-to-es">
    The result of [=converted to an ECMAScript value|converting=]
    an IDL [=nullable type=] value to an ECMAScript value is:
</p>

*   If the IDL [=nullable type=] <code class="idl">|T|?</code>
    value is <emu-val>null</emu-val>,
    then the ECMAScript value is <emu-val>null</emu-val>.
*   Otherwise, the ECMAScript value is the result of
    [=converted to an ECMAScript value|converting=]
    the IDL [=nullable type=] value
    to the [=inner type|inner IDL type=] <code class="idl">T</code>.


<h4 id="es-sequence">Sequences — sequence&lt;|T|&gt;</h4>

IDL <a interface lt="sequence">sequence&lt;|T|&gt;</a> values are represented by
ECMAScript <emu-val>Array</emu-val> values.

<p id="es-to-sequence">
    An ECMAScript value |V| is [=converted=]
    to an IDL <a interface lt="sequence">sequence&lt;|T|&gt;</a> value as follows:
</p>

<ol class="algorithm">
    1.  If |V| is not an object,
        <a lt="es throw">throw a <emu-val>TypeError</emu-val></a>.
    1.  If |V| is a native <emu-val>RegExp</emu-val> object,
        <a lt="es throw">throw a <emu-val>TypeError</emu-val></a>.
    1.  Let |method| be the result of
        [=GetMethod=](|V|, [=@@iterator=]).
    1.  [=ReturnIfAbrupt=](|method|).
    1.  If |method| is <emu-val>undefined</emu-val>,
        <a lt="es throw">throw a <emu-val>TypeError</emu-val></a>.
    1.  Return the result of
        .
</ol>

<p id="sequence-to-es">
    An IDL sequence value |S| of type
    <a interface lt="sequence">sequence&lt;|T|&gt;</a> is
    [=converted=]
    to an ECMAScript <emu-val>Array</emu-val> object as follows:
</p>

<ol class="algorithm">
    1.  Let |n| be the length of |S|.
    1.  Let |A| be a new <emu-val>Array</emu-val> object created as if by the expression <code>[]</code>.
    1.  Initialize |i| to be 0.
    1.  While |i| &lt; |n|:
        1.  Let |V| be the value in |S| at index |i|.
        1.  Let |E| be the result of [=converted to an ECMAScript value|converting=]
            |V| to an ECMAScript value.
        1.  Let |P| be the result of calling [=ToString=](|i|).
        1.  Call [=CreateDataProperty=](|A|, |P|, |E|).
        1.  Set |i| to |i| + 1.
    1.  Return |A|.
</ol>


<h5 id="create-sequence-from-iterable" dfn>Creating a sequence from an iterable</h5>

To create an IDL value of type <a interface lt="sequence">sequence&lt;|T|&gt;</a> given an
iterable |iterable| and an iterator getter
|method|, perform the following steps:

<ol class="algorithm">
    1.  Let |iter| be
        [=GetIterator=](|iterable|, |method|).
    1.  [=ReturnIfAbrupt=](|iter|).
    1.  Initialize |i| to be 0.
    1.  Repeat
        1.  Let |next| be [=IteratorStep=](|iter|).
        1.  [=ReturnIfAbrupt=](|next|).
        1.  If |next| is <emu-val>false</emu-val>,
            then return an IDL sequence value of type
            <a interface lt="sequence">sequence&lt;|T|&gt;</a>
            of length |i|, where the value of the element
            at index |j| is
            |S|<sub>|j|</sub>.
        1.  Let |nextItem| be
            [=IteratorValue=](|next|).
        1.  [=ReturnIfAbrupt=](|nextItem|).
        1.  Initialize |S|<sub>|i|</sub> to the result of
            [=converted to an IDL value|converting=]
            |nextItem| to an IDL value of type |T|.
        1.  Set |i| to |i| + 1.
</ol>

<div class="example">
    
    The following [=interface=] defines
    an [=attribute=] of a sequence
    type as well as an [=operation=]
    with an argument of a sequence type.
    
    <pre class="idl-example">
        interface Canvas {
        
          sequence&lt;DOMString&gt; getSupportedImageCodecs();
        
          void drawPolygon(sequence&lt;double&gt; coordinates);
          sequence&lt;double&gt; getLastDrawnPolygon();
        
          // ...
        };
    </pre>
    
    In an ECMAScript implementation of this interface, an <emu-val>Array</emu-val>
    object with elements of type <emu-val>String</emu-val> is used to
    represent a <code class="idl">sequence&lt;DOMString&gt;</code>, while an
    <emu-val>Array</emu-val> with elements of type <emu-val>Number</emu-val>
    represents a <code class="idl">sequence&lt;double&gt;</code>.  The
    <emu-val>Array</emu-val> objects are effectively passed by
    value; every time the <code>getSupportedImageCodecs()</code>
    function is called a new <emu-val>Array</emu-val> is
    returned, and whenever an <emu-val>Array</emu-val> is
    passed to <code>drawPolygon</code> no reference
    will be kept after the call completes.
    
        <pre highlight="js">
        // Obtain an instance of Canvas.  Assume that getSupportedImageCodecs()
        // returns a sequence with two DOMString values: "image/png" and "image/svg+xml".
        var canvas = getCanvas();
        
        // An Array object of length 2.
        var supportedImageCodecs = canvas.getSupportedImageCodecs();
        
        // Evaluates to "image/png".
        supportedImageCodecs[0];
        
        // Each time canvas.getSupportedImageCodecs() is called, it returns a
        // new Array object.  Thus modifying the returned Array will not
        // affect the value returned from a subsequent call to the function.
        supportedImageCodecs[0] = "image/jpeg";
        
        // Evaluates to "image/png".
        canvas.getSupportedImageCodecs()[0];
        
        // This evaluates to false, since a new Array object is returned each call.
        canvas.getSupportedImageCodecs() == canvas.getSupportedImageCodecs();
        
        // An Array of Numbers...
        var a = [0, 0, 100, 0, 50, 62.5];
        
        // ...can be passed to a platform object expecting a sequence&lt;double&gt;.
        canvas.drawPolygon(a);
        
        // Each element will be converted to a double by first calling ToNumber().
        // So the following call is equivalent to the previous one, except that
        // "hi" will be alerted before drawPolygon() returns.
        a = [false, '',
             { valueOf: function() { alert('hi'); return 100; } }, 0,
             '50', new Number(62.5)];
        canvas.drawPolygon(s);
        
        // Modifying an Array that was passed to drawPolygon() is guaranteed not to
        // have an effect on the Canvas, since the Array is effectively passed by value.
        a[4] = 20;
        var b = canvas.getLastDrawnPolygon();
        alert(b[4]);    // This would alert "50".
    </pre>
</div>


<h4 id="es-promise">Promise types — Promise&lt;|T|&gt;</h4>

IDL <a href="#idl-promise">promise type</a> values are
represented by ECMAScript <emu-val>Promise</emu-val>
objects.

<p id="es-to-promise">
    An ECMAScript value |V| is
    [=converted=]
    to an IDL <a interface lt="Promise">Promise&lt;|T|&gt;</a> value as follows:
</p>

<ol class="algorithm">
    1.  Let |resolve| be the original value of [=%Promise%=].resolve.
        <p class="issue">
            ECMAScript should grow a %Promise_resolve% well-known intrinsic object that can be referenced here.
        </p>
    1.  Let |promise| be the result of calling |resolve| with [=%Promise%=]
        as the <emu-val>this</emu-val> value and |V| as the single argument value.
    1.  Return the IDL <a href="#idl-promise">promise type</a> value that is a reference to the
        same object as |promise|.
</ol>

<p id="promise-to-es">
    The result of [=converted to an ECMAScript value|converting=]
    an IDL <a href="#idl-promise">promise type</a> value to an ECMAScript
    value is the <emu-val>Promise</emu-val> value that represents a reference to the same object that the
    IDL <a href="#idl-promise">promise type</a> represents.
</p>

One can <dfn id="dfn-perform-steps-once-promise-is-settled" export lt="upon settling">perform some steps once a promise is settled</dfn>.
There can be one or two sets of steps to perform, covering when the promise is fulfilled, rejected, or both.
When a specification says to perform some steps once a promise is settled, the following steps
must be followed:

<ol class="algorithm">
    1.  Let |promise| be the promise object of type <a interface lt="Promise">Promise&lt;|T|&gt;</a>.
    1.  Let |onFulfilled| be a new [=function object=] whose
        behavior when invoked is as follows:
        1.  If |T| is {{void}}, then:
            1.  Return the result of performing any steps that were required to be run if the promise was fulfilled.
        1.  Otherwise, |T| is a type other than {{void}}:
            1.  Let |V| be the first argument to |onFulfilled|.
            1.  Let |value| be the result of [=converted to an IDL value|converting=]
                |V| to an IDL value of type |T|.
            1.  If there are no steps that are required to be run if the promise was fulfilled, then
                return <emu-val>undefined</emu-val>.
            1.  Otherwise, return the result of performing any steps that were required to be run if the promise was fulfilled,
                with |value| as the promise’s value.
    1.  Let |onRejected| be a new [=function object=] whose
        behavior when invoked is as follows:
        1.  Let |R| be the first argument to |onRejected|.
        1.  Let |reason| be the result of [=converted to an IDL value|converting=]
            |R| to an IDL value of type {{any}}.
        1.  If there are no steps that are required to be run if the promise was rejected, then
            return <emu-val>undefined</emu-val>.
        1.  Otherwise, return the result of performing any steps that were required to be run if the promise was rejected,
            with |reason| as the rejection reason.
    1.  Let |then| be the result of calling the internal \[[Get]] method of |promise| with property name “then”.
    1.  If |then| is not [=callable=], then <a lt="es throw">throw a <emu-val>TypeError</emu-val></a>.
    1.  Return the result of calling |then| with |promise| as the <emu-val>this</emu-val> value and |onFulfilled| and |onRejected|
        as its two arguments.
</ol>

<p class="issue">
    Include an example of how to write spec text using this term.
</p>


<h4 id="es-union">Union types</h4>

IDL <a href="#idl-union">union type</a> values are
represented by ECMAScript values that correspond to the union’s
[=member types=].

<p id="es-to-union">
    To [=converted to an IDL value|convert an ECMAScript value=] |V| to an IDL <a href="#idl-union">union type</a>
    value is done as follows:
</p>

<ol class="algorithm">
    1.  If the [=union type=]
        [=includes a nullable type=] and
        |V| is <emu-val>null</emu-val> or <emu-val>undefined</emu-val>,
        then return the IDL value <emu-val>null</emu-val>.
    1.  Let |types| be the [=flattened member types=]
        of the [=union type=].
    1.  If |V| is <emu-val>null</emu-val> or
        <emu-val>undefined</emu-val>, and
        |types| includes a
        <a href="#idl-dictionary">dictionary type</a>, then return the
        result of
        [=converted to an IDL value|converting=]
        |V| to that dictionary type.
    1.  If |V| is a [=platform object=], then:
        1.  If |types| includes an <a href="#idl-interface">interface type</a> that |V|
            implements, then return the IDL value that is a reference to the object |V|.
        1.  If |types| includes {{object}}, then return the IDL value
            that is a reference to the object |V|.
    1.  If |V| is a native <emu-val>RegExp</emu-val> object, then:
        1.  If |types| includes {{RegExp}}, then return the
            result of [=converted to an IDL value|converting=]
            |V| to {{RegExp}}.
        1.  If |types| includes {{object}}, then return the IDL value
            that is a reference to the object |V|.
    1.  If |V| is a [=DOMException=] platform object, then:
        1.  If |types| includes {{DOMException}} or
            {{Error!!interface}}, then return the
            result of [=converted to an IDL value|converting=]
            |V| to that type.
        1.  If |types| includes {{object}}, then return the IDL value
            that is a reference to the object |V|.
    1.  If |V| is a native <emu-val>Error</emu-val> object (that is, it has an \[[ErrorData]] [=internal slot=]), then:
        1.  If |types| includes {{Error!!interface}}, then return the
            result of [=converted to an IDL value|converting=]
            |V| to {{Error!!interface}}.
        1.  If |types| includes {{object}}, then return the IDL value
            that is a reference to the object |V|.
    1.  If |V| is an object with an \[[ArrayBufferData]] [=internal slot=], then:
        1.  If |types| includes {{ArrayBuffer}}, then return the
            result of [=converted to an IDL value|converting=]
            |V| to {{ArrayBuffer}}.
        1.  If |types| includes {{object}}, then return the IDL value
            that is a reference to the object |V|.
    1.  If |V| is an object with a \[[DataView]] [=internal slot=], then:
        1.  If |types| includes {{DataView}}, then return the
            result of [=converted to an IDL value|converting=]
            |V| to {{DataView}}.
        1.  If |types| includes {{object}}, then return the IDL value
            that is a reference to the object |V|.
    1.  If |V| is an object with a \[[TypedArrayName]] [=internal slot=], then:
        1.  If |types| includes a [=typed array type=]
            whose name is the value of |V|’s \[[TypedArrayName]] [=internal slot=], then return the
            result of [=converted to an IDL value|converting=]
            |V| to that type.
        1.  If |types| includes {{object}}, then return the IDL value
            that is a reference to the object |V|.
    1.  If [=IsCallable=](|V|) is true, then:
        1.  If |types| includes a [=callback function=]
            type, then return the result of
            [=converted to an IDL value|converting=]
            |V| to that callback function type.
        1.  If |types| includes {{object}}, then return the IDL value
            that is a reference to the object |V|.
    1.  If |V| is any kind of object except for
        a native <emu-val>RegExp</emu-val> object, then:
        1.  If |types| includes a <a href="#idl-sequence">sequence type</a>, then
            1.  Let |method| be the result of
                [=GetMethod=](|V|, [=@@iterator=]).
            1.  [=ReturnIfAbrupt=](|method|).
            1.  If |method| is not
                <emu-val>undefined</emu-val>,
                return the result of
                .
        1.  If |types| includes a <a href="#idl-frozen-array">frozen array type</a>, then
            1.  Let |method| be the result of
                [=GetMethod=](|V|, [=@@iterator=]).
            1.  [=ReturnIfAbrupt=](|method|).
            1.  If |method| is not
                <emu-val>undefined</emu-val>,
                return the result of
                [=Creating a frozen array from an iterable|creating a frozen array of that type from V and method=].
        1.  If |types| includes a <a href="#idl-dictionary">dictionary type</a>, then return the
            result of [=converted to an IDL value|converting=]
            |V| to that dictionary type.
        1.  If |types| includes a [=callback interface=]
            type, then return the result of
            [=converted to an IDL value|converting=]
            |V| to that interface type.
        1.  If |types| includes {{object}}, then return the IDL value
            that is a reference to the object |V|.
    1.  If |V| is a <emu-val>Boolean</emu-val> value, then:
        1.  If |types| includes a {{boolean}},
            then return the result of [=converted to an IDL value|converting=]
            |V| to {{boolean}}.
    1.  If |V| is a <emu-val>Number</emu-val> value, then:
        1.  If |types| includes a [=numeric type=],
            then return the result of [=converted to an IDL value|converting=]
            |V| to that [=numeric type=].
    1.  If |types| includes a [=string type=],
        then return the result of
        [=converted to an IDL value|converting=]
        |V| to that type.
    1.  If |types| includes a [=numeric type=],
        then return the result of [=converted to an IDL value|converting=]
        |V| to that [=numeric type=].
    1.  If |types| includes a {{boolean}},
        then return the result of [=converted to an IDL value|converting=]
        |V| to {{boolean}}.
    1.  <a lt="es throw">Throw a <emu-val>TypeError</emu-val></a>.
</ol>

<p id="union-to-es">
    An IDL union type value is
    [=converted to an ECMAScript value=]
    as follows.  If the value is an {{object}}
    reference to a special object that represents an ECMAScript <emu-val>undefined</emu-val>
    value, then it is converted to the ECMAScript
    <emu-val>undefined</emu-val> value.  Otherwise,
    the rules for converting the [=specific type=]
    of the IDL union type value as described in this section ([[#es-type-mapping]]).
</p>


<h4 id="es-RegExp">RegExp</h4>

IDL {{RegExp}} values are represented by
ECMAScript <emu-val>RegExp</emu-val> objects.

<p id="es-to-RegExp">
    An ECMAScript value |V| is
    [=converted=]
    to an IDL {{RegExp}} value
    by running the following algorithm:
</p>

<ol class="algorithm">
    1.  If [=Type=](|V|) is not Object,
        or |V| is not a native <emu-val>RegExp</emu-val> object,
        then set |V| to be a newly created <emu-val>RegExp</emu-val> object created as if by the
        expression <code>new RegExp(|V|)</code>, where <code>RegExp</code> is the standard built-in constructor with that name
        from the [=current global environment=].
        
        Note: Note that this can result in an exception being thrown, if |V|, when converted to a string,
        does not have valid regular expression syntax.
        
    1.  Return the IDL {{RegExp}} value that is a reference to the same object as |V|.
</ol>

<p id="RegExp-to-es">
    The result of [=converted to an ECMAScript value|converting=]
    an IDL {{RegExp}} value to an ECMAScript
    value is the <emu-val>RegExp</emu-val> value that represents a reference to the same object that the
    IDL {{RegExp}} represents.
</p>


<h4 id="es-Error">Error</h4>

IDL {{Error!!interface}} values are represented
by native ECMAScript <emu-val>Error</emu-val> objects and
platform objects for [=DOMExceptions=].

<p id="es-to-Error">
    An ECMAScript value |V| is
    [=converted=]
    to an IDL <span class="Error">Error</span> value
    by running the following algorithm:
</p>

<ol class="algorithm">
    1.  If [=Type=](|V|) is not Object,
        or |V| does not have an \[[ErrorData]] [=internal slot=], then <a lt="es throw">throw a <emu-val>TypeError</emu-val></a>.
    1.  Return the IDL {{Error!!interface}} value that is a reference to the same object as |V|.
</ol>

<p id="Error-to-es">
    The result of [=converted to an ECMAScript value|converting=]
    an IDL {{Error!!interface}} value to an ECMAScript
    value is the <emu-val>Error</emu-val> value that represents a reference to the same object that the
    IDL {{Error!!interface}} represents.
</p>


<h4 id="es-DOMException">DOMException</h4>

IDL {{DOMException}} values are represented
by platform objects for [=DOMExceptions=].

<p id="es-to-DOMException">
    An ECMAScript value |V| is
    [=converted=]
    to an IDL {{DOMException}} value
    by running the following algorithm:
</p>

<ol class="algorithm">
    1.  If [=Type=](|V|) is not Object,
        or |V| is not a platform object that represents a [=DOMException=], then <a lt="es throw">throw a <emu-val>TypeError</emu-val></a>.
    1.  Return the IDL {{DOMException}} value that is a reference to the same object as |V|.
</ol>

<p id="DOMException-to-es">
    The result of [=converted to an ECMAScript value|converting=]
    an IDL {{DOMException}} value to an ECMAScript
    value is the <emu-val>Object</emu-val> value that represents a reference to the same object that the
    IDL {{DOMException}} represents.
</p>


<h4 id="es-buffer-source-types">Buffer source types</h4>

Values of the IDL [=buffer source types=]
are represented by objects of the corresponding ECMAScript class.

<p id="es-to-buffer-source">
    An ECMAScript value |V| is
    [=converted=]
    to an IDL {{ArrayBuffer}} value
    by running the following algorithm:
</p>

<ol class="algorithm">
    1.  If [=Type=](|V|) is not Object,
        or |V| does not have an \[[ArrayBufferData]] [=internal slot=],
        or [=IsDetachedBuffer=](|V|) is true,
        then <a lt="es throw">throw a <emu-val>TypeError</emu-val></a>.
    1.  Return the IDL {{ArrayBuffer}} value that is a reference to the same object as |V|.
</ol>

<p id="buffer-source-to-es">
    An ECMAScript value |V| is
    [=converted=]
    to an IDL {{DataView}} value
    by running the following algorithm:
</p>

<ol class="algorithm">
    1.  If [=Type=](|V|) is not Object,
        or |V| does not have a \[[DataView]] [=internal slot=],
        then <a lt="es throw">throw a <emu-val>TypeError</emu-val></a>.
    1.  Return the IDL {{DataView}} value that is a reference to the same object as |V|.
</ol>

An ECMAScript value |V| is
[=converted=]
to an IDL {{Int8Array}},
{{Int16Array}},
{{Int32Array}},
{{Uint8Array}},
{{Uint16Array}},
{{Uint32Array}},
{{Uint8ClampedArray}},
{{Float32Array}} or
{{Float64Array}} value
by running the following algorithm:

<ol class="algorithm">
    1.  Let |T| be the IDL type |V| is being converted to.
    1.  If [=Type=](|V|) is not Object,
        or |V| does not have a \[[TypedArrayName]] [=internal slot=]
        with a value equal to the name of |T|,
        then <a lt="es throw">throw a <emu-val>TypeError</emu-val></a>.
    1.  Return the IDL value of type |T| that is a reference to the same object as |V|.
</ol>

The result of [=converted to an ECMAScript value|converting=]
an IDL value of any [=buffer source type=]
to an ECMAScript value is the <emu-val>Object</emu-val> value that represents
a reference to the same object that the IDL value represents.

When [=get a reference to the bytes held by the buffer source|getting a reference to=]
or [=get a copy of the bytes held by the buffer source|getting a copy of the bytes held by a buffer source=]
that is an ECMAScript <emu-val>ArrayBuffer</emu-val>, <emu-val>DataView</emu-val>
or typed array object, these steps must be followed:

<ol class="algorithm">
    1.  Let |O| be the ECMAScript object that is the buffer source.
    1.  Initialize |arrayBuffer| to |O|.
    1.  Initialize |offset| to 0.
    1.  Initialize |length| to 0.
    1.  If |O| has a \[[ViewedArrayBuffer]] [=internal slot=], then:
        1.  Set |arrayBuffer| to the value of |O|’s \[[ViewedArrayBuffer]] [=internal slot=].
        1.  If |arrayBuffer| is <emu-val>undefined</emu-val>, then
            <a lt="es throw">throw a <emu-val>TypeError</emu-val></a>.
        1.  Set |offset| to the value of |O|’s \[[ByteOffset]] [=internal slot=].
        1.  Set |length| to the value of |O|’s \[[ByteLength]] [=internal slot=].
    1.  Otherwise, set |length| to the value of |O|’s \[[ArrayBufferByteLength]] [=internal slot=].
    1.  If [=IsDetachedBuffer=](|O|), then
        <a lt="es throw">throw a <emu-val>TypeError</emu-val></a>.
    1.  Let |data| be the value of |O|’s \[[ArrayBufferData]] [=internal slot=].
    1.  Return a reference to or copy of (as required) the |length| bytes in |data|
        starting at byte offset |offset|.
</ol>

To [=detach=] an {{ArrayBuffer}},
these steps must be followed:

<ol class="algorithm">
    1.  Let |O| be the ECMAScript object that is the {{ArrayBuffer}}.
    1.  [=DetachArrayBuffer=](|O|).
</ol>


<h4 id="es-frozen-array">Frozen arrays — FrozenArray&lt;|T|&gt;</h4>

Values of frozen array types are represented by frozen ECMAScript
<emu-val>Array</emu-val> object references.

An ECMAScript value |V| is
[=converted=]
to an IDL <a interface lt="FrozenArray">FrozenArray&lt;|T|&gt;</a> value
by running the following algorithm:

<ol class="algorithm">
    1.  Let |values| be the result of
        [=converted to an IDL value|converting=]
        |V| to IDL type <a interface lt="sequence">sequence&lt;|T|&gt;</a>.
    1.  Return the result of
        [=create a frozen array|creating a frozen array=]
        from |values|.
</ol>

To <dfn id="dfn-create-frozen-array" export>create a frozen array</dfn> from a sequence
of values of type |T|, follow these steps:

<ol class="algorithm">
    1.  Let |array| be the result of
        [=converted to an ECMAScript value|converting=]
        the sequence of values to an ECMAScript value.
    1.  Perform [=SetIntegrityLevel=](|array|, <code>"frozen"</code>).
    1.  Return |array|.
</ol>

The result of [=converted to an ECMAScript value|converting=]
an IDL <a interface lt="FrozenArray">FrozenArray&lt;|T|&gt;</a> value to an ECMAScript
value is the <emu-val>Object</emu-val> value that represents a reference
to the same object that the IDL <a interface lt="FrozenArray">FrozenArray&lt;|T|&gt;</a> represents.


<h5 id="create-frozen-array-from-iterable" dfn>Creating a frozen array from an iterable</h5>

To create an IDL value of type <a interface lt="FrozenArray">FrozenArray&lt;|T|&gt;</a> given an
iterable |iterable| and an iterator getter
|method|, perform the following steps:

<ol class="algorithm">
    1.  Let |values| be the result of
        .
    1.  Return the result of [=create a frozen array|creating a frozen array=] from |values|.
</ol>


<h3 id="es-extended-attributes">ECMAScript-specific extended attributes</h3>

This section defines a number of
[=extended attributes=]
whose presence affects only the ECMAScript binding.


<h4 id="Clamp" extended-attribute lt="Clamp">[Clamp]</h4>

If the [{{Clamp}}]
[=extended attribute=]
appears on an [=operation=] argument,
writable [=attribute=] or
[=dictionary member=]
whose type is one of the [=integer types=],
it indicates that when an ECMAScript <emu-val>Number</emu-val> is
converted to the IDL type, out of range values will be clamped to the range
of valid values, rather than using the operators that use a modulo operation
([=ToInt32=], [=ToUint32=], etc.).

The [{{Clamp}}]
extended attribute must
[=takes no arguments|take no arguments=].

The [{{Clamp}}] extended attribute
must not appear on a [=read only=]
attribute, or an attribute, operation argument or dictionary member
that is not of an integer type.  It also must not
be used in conjunction with the [{{EnforceRange}}]
extended attribute.

See the rules for converting ECMAScript values to the various IDL integer
types in [[#es-type-mapping]]
for the specific requirements that the use of
[{{Clamp}}] entails.

<div class="example">
    
    In the following [=IDL fragment=],
    two [=operations=] are declared that
    take three {{octet}} arguments; one uses
    the [{{Clamp}}] [=extended attribute=]
    on all three arguments, while the other does not:
    
    <pre class="idl-example">
        interface GraphicsContext {
          void setColor(octet red, octet green, octet blue);
          void setColorClamped([Clamp] octet red, [Clamp] octet green, [Clamp] octet blue);
        };
    </pre>
    
    In an ECMAScript implementation of the IDL, a call to setColorClamped with
    <emu-val>Number</emu-val> values that are out of range for an
    {{octet}} are clamped to the range [0, 255].
    
    <pre highlight="js">
        // Get an instance of GraphicsContext.
        var context = getGraphicsContext();
        
        // Calling the non-[Clamp] version uses ToUint8 to coerce the Numbers to octets.
        // This is equivalent to calling setColor(255, 255, 1).
        context.setColor(-1, 255, 257);
        
        // Call setColorClamped with some out of range values.
        // This is equivalent to calling setColorClamped(0, 255, 255).
        context.setColorClamped(-1, 255, 257);
    </pre>
</div>


<h4 id="Constructor" extended-attribute lt="Constructor">[Constructor]</h4>

If the [{{Constructor}}]
[=extended attribute=]
appears on an [=interface=], it indicates that
the [=interface object=] for this interface
will have an \[[Construct]] internal method,
allowing objects implementing the interface to be constructed.

Multiple [{{Constructor}}] extended
attributes may appear on a given interface.

The [{{Constructor}}]
extended attribute must either
[=takes no arguments|take no arguments=] or
[=takes an argument list|take an argument list=].
The bare form, <code>[Constructor]</code>, has the same meaning as
using an empty argument list, <code>[Constructor()]</code>.  For each
[{{Constructor}}] extended attribute
on the interface, there will be a way to construct an object that implements
the interface by passing the specified arguments.

The prose definition of a constructor must
either return an IDL value of a type corresponding to the interface
the [{{Constructor}}]
extended attribute appears on, or throw an exception.

The [{{Constructor}}] and
[{{NoInterfaceObject}}]
extended attributes must not be specified on the same interface.

The [{{Constructor}}] extended attribute
must not be used on a [=callback interface=].

See [[#es-interface-call]] for details on how a constructor
for an interface is to be implemented.

<div class="example">
    
    The following IDL defines two interfaces.  The second has the
    [{{Constructor}}] extended
    attribute, while the first does not.
    
    <pre class="idl-example">
        interface NodeList {
          Node item(unsigned long index);
          readonly attribute unsigned long length;
        };
        
        [Constructor,
         Constructor(double radius)]
        interface Circle {
          attribute double r;
          attribute double cx;
          attribute double cy;
          readonly attribute double circumference;
        };
    </pre>
    
    An ECMAScript implementation supporting these interfaces would
    have a \[[Construct]] property on the
    <code class="idl">Circle</code> interface object which would
    return a new object that implements the interface.  It would take
    either zero or one argument.  The
    <code class="idl">NodeList</code> interface object would not
    have a \[[Construct]] property.
    
    <pre highlight="js">
        var x = new Circle();      // The uses the zero-argument constructor to create a
                                   // reference to a platform object that implements the
                                   // Circle interface.
        
        var y = new Circle(1.25);  // This also creates a Circle object, this time using
                                   // the one-argument constructor.
        
        var z = new NodeList();    // This would throw a TypeError, since no
                                   // [Constructor] is declared.
    </pre>
</div>


<h4 id="EnforceRange" extended-attribute lt="EnforceRange">[EnforceRange]</h4>

If the [{{EnforceRange}}]
[=extended attribute=]
appears on an [=operation=] argument,
writable [=regular attribute=] or
[=dictionary member=]
whose type is one of the [=integer types=],
it indicates that when an ECMAScript <emu-val>Number</emu-val> is
converted to the IDL type, out of range values will cause an exception to
be thrown, rather than converted to being a valid value using the operators that use a modulo operation
([=ToInt32=], [=ToUint32=], etc.).  The <emu-val>Number</emu-val>
will be rounded towards zero before being checked against its range.

The [{{EnforceRange}}]
extended attribute must
[=takes no arguments|take no arguments=].

The [{{EnforceRange}}] extended attribute
must not appear on a [=read only=]
attribute, a [=static attribute=],
or an attribute, operation argument or dictionary member
that is not of an integer type.  It also must not
be used in conjunction with the [{{Clamp}}]
extended attribute.

See the rules for converting ECMAScript values to the various IDL integer
types in [[#es-type-mapping]]
for the specific requirements that the use of
[{{EnforceRange}}] entails.

<div class="example">
    
    In the following [=IDL fragment=],
    two [=operations=] are declared that
    take three {{octet}} arguments; one uses
    the [{{EnforceRange}}] [=extended attribute=]
    on all three arguments, while the other does not:
    
    <pre class="idl-example">
        interface GraphicsContext {
          void setColor(octet red, octet green, octet blue);
          void setColorEnforcedRange([EnforceRange] octet red, [EnforceRange] octet green, [EnforceRange] octet blue);
        };
    </pre>
    
    In an ECMAScript implementation of the IDL, a call to setColorEnforcedRange with
    <emu-val>Number</emu-val> values that are out of range for an
    {{octet}} will result in an exception being
    thrown.
    
    <pre highlight="js">
        // Get an instance of GraphicsContext.
        var context = getGraphicsContext();
        
        // Calling the non-[EnforceRange] version uses ToUint8 to coerce the Numbers to octets.
        // This is equivalent to calling setColor(255, 255, 1).
        context.setColor(-1, 255, 257);
        
        // When setColorEnforcedRange is called, Numbers are rounded towards zero.
        // This is equivalent to calling setColor(0, 255, 255).
        context.setColorEnforcedRange(-0.9, 255, 255.2);
        
        // The following will cause a TypeError to be thrown, since even after
        // rounding the first and third argument values are out of range.
        context.setColorEnforcedRange(-1, 255, 256);
    </pre>
</div>


<h4 id="Exposed" extended-attribute lt="Exposed">[Exposed]</h4>

If the [{{Exposed}}]
[=extended attribute=]
appears on an [=interface=],
[=partial interface=], or
an individual [=interface member=],
it indicates that the interface or interface member is exposed
on a particular set of global interfaces, rather than the default of
being exposed only on the [=primary global interface=].

The [{{Exposed}}]
[=extended attribute=]
must either
[=takes an identifier|take an identifier=] or
[=takes an identifier list|take an identifier list=].
Each of the identifiers mentioned must be
a [=global name=].

Every construct that the [{{Exposed}}]
[=extended attribute=]
can be specified on has an <dfn id="dfn-exposure-set" export>exposure set</dfn>,
which is a set of [=interfaces=]
defining which global environments the construct can be used in.
The [=exposure set=]
for a given construct is defined as follows:

*   If the [{{Exposed}}]
    [=extended attribute=]
    is specified on the construct, then the [=exposure set=]
    is the set of all interfaces that have a [=global name=]
    that is listed in the extended attribute's argument.
*   If the [{{Exposed}}]
    [=extended attribute=]
    does not appear on a construct, then its
    [=exposure set=] is defined
    implicitly, depending on the type of construct:
    
    <dl class="switch">
         :  interface
         :: The [=exposure set=] of the interface
            only contains the
            [=primary global interface=].
         :  partial interface
         :: The [=exposure set=] of the partial
            interface is the [=exposure set=] of the original
            interface definition.
         :  interface member
         :: The [=exposure set=] of the interface member
            is the [=exposure set=] of the interface or
            partial interface the member is declared on.
    </dl>

If [{{Exposed}}] appears on an
[=overloaded=] [=operation=],
then it must appear identically on all overloads.

The [{{Exposed}}] extended attribute
must not be specified on both an interface
member and a partial interface definition the interface member is declared on.

If [{{Exposed}}] appears on both an interface
and one of its interface members, then the interface member's
[=exposure set=]
must be a subset of the interface's
[=exposure set=].

An interface's [=exposure set=]
must be a subset of the
[=exposure set=] of all
of the interface's [=consequential interfaces=].

If an interface |X|
[=inherits=] from another interface
|Y| then the
[=exposure set=] of
|X| must be a subset of the
[=exposure set=] of
|Y|.

An [=interface=] or
[=interface member=]
is <dfn id="dfn-exposed" export>exposed</dfn> in a given ECMAScript global environment if
the ECMAScript global object implements an interface that is in the
interface or interface member's
[=exposure set=],
and either:

*   the [=relevant settings object=] for the ECMAScript global object is a [=secure context=]; or
*   the interface or interface member is not [=available only in secure contexts=].

Note: Since it is not possible for the [=relevant settings object=]
for an ECMAScript global object to change whether it is a
[=secure context=] or not over time, an implementation's
decision to create properties for an interface or interface member
can be made once, at the time the
[=initial objects=]
are created.

See
[[#es-interfaces]],
[[#es-constants]],
[[#es-attributes]],
[[#es-operations]] and
[[#es-iterators]]
for the specific requirements that the use of
[{{Exposed}}] entails.

<div class="example">
    
    [{{Exposed}}]
    is intended to be used to control whether interfaces or individual interface
    members are available for use only in workers, only in the <code class="idl">Window</code>,
    or in both.
    
    The following IDL fragment shows how that might be achieved:
    
    <pre class="idl-example">
        [PrimaryGlobal]
        interface Window {
          ...
        };
        
        // By using the same identifier Worker for both SharedWorkerGlobalScope
        // and DedicatedWorkerGlobalScope, both can be addressed in an [Exposed]
        // extended attribute at once.
        [Global=Worker]
        interface SharedWorkerGlobalScope : WorkerGlobalScope {
          ...
        };
        
        [Global=Worker]
        interface DedicatedWorkerGlobalScope : WorkerGlobalScope {
          ...
        };
        
        // MathUtils is available for use in workers and on the main thread.
        [Exposed=(Window,Worker)]
        interface MathUtils {
          static double someComplicatedFunction(double x, double y);
        };
        
        // WorkerUtils is only available in workers.  Evaluating WorkerUtils
        // in the global scope of a worker would give you its interface object, while
        // doing so on the main thread will give you a ReferenceError.
        [Exposed=Worker]
        interface WorkerUtils {
          static void setPriority(double x);
        };
        
        // Node is only available on the main thread.  Evaluating Node
        // in the global scope of a worker would give you a ReferenceError.
        interface Node {
          ...
        };
    </pre>
</div>


<h4 id="ImplicitThis" extended-attribute lt="ImplicitThis">[ImplicitThis]</h4>

If the [{{ImplicitThis}}]
[=extended attribute=]
appears on an [=interface=],
it indicates that when a <emu-val>Function</emu-val> corresponding
to one of the interface’s [=operations=]
is invoked with the <emu-val>null</emu-val> or <emu-val>undefined</emu-val>
value as the <emu-val>this</emu-val> value, that the ECMAScript global
object will be used as the <emu-val>this</emu-val> value instead.
This is regardless of whether the calling code is in strict mode.

The [{{ImplicitThis}}]
extended attribute must
[=takes no arguments|take no arguments=].

See [[#es-operations]]
for the specific requirements that the use of
[{{ImplicitThis}}] entails.

Note: The [{{ImplicitThis}}]
[=extended attribute=]
is intended for use on the <code class="idl">Window</code>
[=interface=] as defined
in HTML5 ([[HTML5]], section 5.2).

<div class="example">
    
    In the following example, the <code class="idl">Window</code>
    [=interface=] is defined
    with the [{{ImplicitThis}}]
    [=extended attribute=].
    
    <pre class="idl-example">
        [ImplicitThis]
        interface Window {
          ...
          attribute DOMString name;
          void alert(DOMString message);
        };
    </pre>
    
    Since the <code class="idl">Window</code> object is used as
    the ECMAScript global object, calls to its functions can be made
    without an explicit object, even in strict mode:
    
    <pre highlight="js">
        "use strict";
        
        window.alert("hello");      // Calling alert with an explicit window object works.
        alert("hello");             // This also works, even though we are in strict mode.
        alert.call(null, "hello");  // As does passing null explicitly as the this value.
        
        // This does not apply to getters for attributes on the interface, though.
        // The following will throw a TypeError.
        Object.getOwnPropertyDescriptor(Window.prototype, "name").get.call(null);
    </pre>
</div>


<h4 oldids="PrimaryGlobal" id="Global" extended-attribute lt="Global|PrimaryGlobal" dfn>[Global] and [PrimaryGlobal]</h4>

If the [{{Global}}]
or [{{PrimaryGlobal}}]
[=extended attribute=]
appears on an [=interface=],
it indicates that objects implementing this interface can
be used as the global object in an ECMAScript environment,
and that the structure of the prototype chain and how
properties corresponding to [=interface members=]
will be reflected on the prototype objects will be different from other
interfaces.  Specifically:

1.  Any <a href="#idl-named-properties">named properties</a>
    will be exposed on an object in the prototype chain – the
    [=named properties object=] –
    rather than on the object itself.
1.  [=Interface members=] from the
    [=interface=] (or
    [=consequential interfaces=])
    will correspond to properties on the object itself rather than on
    [=interface prototype objects=].

<div class="note">
    
    Placing named properties on an object in the prototype chain
    is done so that variable declarations and bareword assignments
    will shadow the named property with a property on the global
    object itself.
    
    Placing properties corresponding to interface members on
    the object itself will mean that common feature detection
    methods like the following will work:
    
    <pre highlight="js">
        var indexedDB = window.indexedDB || window.webkitIndexedDB ||
                        window.mozIndexedDB || window.msIndexedDB;
        
        var requestAnimationFrame = window.requestAnimationFrame ||
                                    window.mozRequestAnimationFrame || ...;
    </pre>
    
    Because of the way variable declarations are handled in
    ECMAScript, the code above would result in the <code>window.indexedDB</code>
    and <code>window.requestAnimationFrame</code> evaluating
    to <code>undefined</code>, as the shadowing variable
    property would already have been created before the
    assignment is evaluated.
    
</div>

If the [{{Global}}] or
[{{PrimaryGlobal}}]
[=extended attributes=]
is used on an [=interface=], then:

*   The interface must not define a [=named property setter=].
*   The interface must not also be declared with the [{{OverrideBuiltins}}]
    extended attribute.
*   The interface must not [=inherit=] from another interface with the
    [{{OverrideBuiltins}}] extended attribute.
*   Any other interface must not [=inherit=] from it.

If [{{Global}}] or [{{PrimaryGlobal}}] is specified on
a [=partial interface=]
definition, then that partial interface definition must
be the part of the interface definition that defines
the [=named property getter=].

The [{{Global}}] and [{{PrimaryGlobal}}]
[=extended attribute=] must not
be used on an [=interface=] that can have more
than one object implementing it in the same ECMAScript global environment.

Note: This is because the [=named properties object=],
which exposes the named properties, is in the prototype chain, and it would not make
sense for more than one object’s named properties to be exposed on an object that
all of those objects inherit from.

If an interface is declared with the [{{Global}}] or
[{{PrimaryGlobal}}]
[=extended attribute=], then
there must not be more than one
[=interface member=] across
the interface and its [=consequential interfaces=]
with the same [=identifier=].
There also must not be more than
one [=stringifier=],
more than one [=serializer=],
or more than one [=iterable declaration=],
[=maplike declaration=] or
[=setlike declaration=]
across those interfaces.

Note: This is because all of the members of the interface and its consequential
interfaces get flattened down on to the object that implements the interface.

The [{{Global}}] and
[{{PrimaryGlobal}}] extended attributes
can also be used to give a name to one or more global interfaces,
which can then be referenced by the [{{Exposed}}]
extended attribute.

The [{{Global}}] and
[{{PrimaryGlobal}}]
extended attributes must either
[=takes no arguments|take no arguments=]
or [=takes an identifier list|take an identifier list=].

If the [{{Global}}] or
[{{PrimaryGlobal}}]
[=extended attribute=]
is declared with an identifier list argument, then those identifiers are the interface’s
<dfn id="dfn-global-name" export>global names</dfn>; otherwise, the interface has
a single global name, which is the interface's identifier.

Note: The identifier argument list exists so that more than one global interface can
be addressed with a single name in an [{{Exposed}}]
[=extended attribute=].

The [{{Global}}] and
[{{PrimaryGlobal}}]
[=extended attributes=]
must not be declared on the same
interface.  The [{{PrimaryGlobal}}]
extended attribute must be declared on
at most one interface.  The interface [{{PrimaryGlobal}}]
is declared on, if any, is known as the <dfn id="dfn-primary-global-interface" export>primary global interface</dfn>.

See [[#named-properties-object]],
[[#getownproperty]] and
[[#defineownproperty]]
for the specific requirements that the use of
[{{Global}}] and [{{PrimaryGlobal}}]
entails for named properties,
and [[#es-constants]],
[[#es-attributes]] and
[[#es-operations]]
for the requirements relating to the location of properties
corresponding to [=interface members=].

<div class="example">
    
    The [{{PrimaryGlobal}}]
    [=extended attribute=] is intended
    to be used by the <code class="idl">Window</code> interface as defined in
    HTML5 ([[HTML5]], section 5.2).  ([{{Global}}]
    is intended to be used by worker global interfaces.)
    The <code class="idl">Window</code> interface exposes frames as properties on the <code class="idl">Window</code>
    object.  Since the <code class="idl">Window</code> object also serves as the
    ECMAScript global object, variable declarations or assignments to the named properties
    will result in them being replaced by the new value.  Variable declarations for
    attributes will not create a property that replaces the existing one.
    
    <pre class="idl-example">
        [PrimaryGlobal]
        interface Window {
          getter any (DOMString name);
          attribute DOMString name;
          // ...
        };
    </pre>
    
    The following HTML document illustrates how the named properties on the
    <code class="idl">Window</code> object can be shadowed, and how
    the property for an attribute will not be replaced when declaring
    a variable of the same name:
    
    <pre highlight="html">
        &lt;!DOCTYPE html&gt;
        &lt;title&gt;Variable declarations and assignments on Window&lt;/title&gt;
        &lt;iframe name=abc&gt;&lt;/iframe&gt;
        &lt;!-- Shadowing named properties --&gt;
        &lt;script&gt;
          window.abc;    // Evaluates to the iframe's Window object.
          abc = 1;       // Shadows the named property.
          window.abc;    // Evaluates to 1.
        &lt;/script&gt;
        
        &lt;!-- Preserving properties for IDL attributes --&gt;
        &lt;script&gt;
          Window.prototype.def = 2;         // Places a property on the prototype.
          window.hasOwnProperty("length");  // Evaluates to true.
          length;                           // Evaluates to 1.
          def;                              // Evaluates to 2.
        &lt;/script&gt;
        &lt;script&gt;
          var length;                       // Variable declaration leaves existing property.
          length;                           // Evaluates to 1.
          var def;                          // Variable declaration creates shadowing property.
          def;                              // Evaluates to undefined.
        &lt;/script&gt;
    </pre>
</div>


<h4 id="LegacyArrayClass" extended-attribute lt="LegacyArrayClass">[LegacyArrayClass]</h4>

If the [{{LegacyArrayClass}}]
[=extended attribute=]
appears on an [=interface=]
that is not defined to [=inherit=]
from another, it indicates that the internal \[[Prototype]]
property of its [=interface prototype object=]
will be the <emu-val>Array</emu-val> prototype object rather than
the <emu-val>Object</emu-val> prototype object.  This allows
<emu-val>Array</emu-val> methods to be used more easily
with objects implementing the interface.

The [{{LegacyArrayClass}}] extended attribute
must [=takes no arguments|take no arguments=].
It must not be used on an interface that
has any [=inherited interfaces=].

Note: Interfaces using [{{LegacyArrayClass}}] will
need to define a “length” [=attribute=]
of type {{unsigned long}} that exposes the length
of the array-like object, in order for the inherited <emu-val>Array</emu-val>
methods to operate correctly.  Such interfaces would typically also
[=support indexed properties=],
which would provide access to the array elements.

See [[#interface-prototype-object]] for the
specific requirements that the use of [{{LegacyArrayClass}}]
entails.

<div class="example">
    
    The following [=IDL fragment=]
    defines two [=interfaces=]
    that use [{{LegacyArrayClass}}].
    
    <pre class="idl-example">
        [LegacyArrayClass]
        interface ItemList {
          attribute unsigned long length;
          getter object getItem(unsigned long index);
          setter object setItem(unsigned long index, object item);
        };
        
        [LegacyArrayClass]
        interface ImmutableItemList {
          readonly attribute unsigned long length;
          getter object getItem(unsigned long index);
        };
    </pre>
    
    In an ECMAScript implementation of the above two interfaces,
    with appropriate definitions for getItem, setItem and removeItem,
    <emu-val>Array</emu-val> methods to inspect and
    modify the array-like object can be used.
    
    <pre highlight="js">
        var list = getItemList();  // Obtain an instance of ItemList.
        
        list.concat();             // Clone the ItemList into an Array.
        list.pop();                // Remove an item from the ItemList.
        list.unshift({ });         // Insert an item at index 0.
    </pre>
    
    <code class="idl">ImmutableItemList</code> has a read only
    length [=attribute=]
    and no indexed property [=indexed property setters|setter=].  The
    mutating <emu-val>Array</emu-val> methods will generally not
    succeed on objects implementing <code class="idl">ImmutableItemList</code>.
    The exact behavior depends on the definition of [=the Array methods themselves=] ([[!ECMA-262]], section 22.1.3).
    
</div>


<h4 id="LegacyUnenumerableNamedProperties" extended-attribute lt="LegacyUnenumerableNamedProperties">[LegacyUnenumerableNamedProperties]</h4>

If the [{{LegacyUnenumerableNamedProperties}}]
[=extended attribute=]
appears on a [=interface=]
that [=support named properties|supports named properties=],
it indicates that all the interface's named properties are unenumerable.

The [{{LegacyUnenumerableNamedProperties}}]
extended attribute must
[=takes no arguments|take no arguments=]
and must not appear on an interface
that does not define a [=named property getter=].

If the [{{LegacyUnenumerableNamedProperties}}]
extended attribute is specified on an interface, then it applies to all its derived interfaces and
must not be specified on any of them.

See [[#property-enumeration]]
for the specific requirements that the use of
[{{LegacyUnenumerableNamedProperties}}]
entails.


<h4 id="LenientSetter" extended-attribute lt="LenientSetter">[LenientSetter]</h4>

If the [{{LenientSetter}}]
[=extended attribute=]
appears on a [=read only=]
[=regular attribute=],
it indicates that a no-op setter will be generated for the attribute’s
accessor property.  This results in erroneous assignments to the property
in strict mode to be ignored rather than causing an exception to be thrown.

<div class="advisement">
    
    Specifications should not use [{{LenientSetter}}]
    unless required for compatibility reasons.  Pages have been observed
    where authors have attempted to polyfill an IDL attribute by assigning
    to the property, but have accidentally done so even if the property
    exists.  In strict mode, this would cause an exception to be thrown,
    potentially breaking page.  Without [{{LenientSetter}}],
    this could prevent a browser from shipping the feature.
    
    Specification authors who
    wish to use this feature are strongly advised to discuss this on the
    <a href="mailto:public-script-coord@w3.org">public-script-coord@w3.org</a>
    mailing list before proceeding.
    
</div>

The [{{LenientThis}}] extended attribute
must
[=takes no arguments|take no arguments=].
It must not be used on anything other than
a [=read only=]
[=regular attribute=].

An attribute with the [{{LenientSetter}}]
extended attribute must not also be declared
with the [{{PutForwards}}]
or [{{Replaceable}}] extended attributes.

See the <a href="#es-attributes">Attributes</a> section for how
[{{LenientSetter}}]
is to be implemented.

<div class="example">
    
    The following IDL fragment defines an interface that uses the
    [{{LenientSetter}}] extended
    attribute.
    
    <pre class="idl-example">
        interface Example {
          [LenientSetter] readonly attribute DOMString x;
          readonly attribute DOMString y;
        };
    </pre>
    
    An ECMAScript implementation that supports this interface will
    have a setter on the accessor property that correspond to x,
    which allows any assignment to be ignored in strict mode.
    
    <pre highlight="js">
        "use strict";
        
        var example = getExample();  // Get an instance of Example.
        
        // Fine; while we are in strict mode, there is a setter that is a no-op.
        example.x = 1;
        
        // Throws a TypeError, since we are in strict mode and there is no setter.
        example.y = 1;
    </pre>
</div>


<h4 id="LenientThis" extended-attribute lt="LenientThis">[LenientThis]</h4>

If the [{{LenientThis}}]
[=extended attribute=]
appears on a [=regular attribute=],
it indicates that invocations of the attribute’s getter or setter
with a <emu-val>this</emu-val> value that is not an
object that implements the [=interface=]
on which the attribute appears will be ignored.

The [{{LenientThis}}] extended attribute
must
[=takes no arguments|take no arguments=].
It must not be used on a
[=static attribute=].

Advisement: Specifications should not use [{{LenientThis}}]
unless required for compatibility reasons.  Specification authors who
wish to use this feature are strongly advised to discuss this on the
<a href="mailto:public-script-coord@w3.org">public-script-coord@w3.org</a>
mailing list before proceeding.

See the <a href="#es-attributes">Attributes</a> section for how
[{{LenientThis}}]
is to be implemented.

<div class="example">
    
    The following IDL fragment defines an interface that uses the
    [{{LenientThis}}] extended
    attribute.
    
    <pre class="idl-example">
        interface Example {
          [LenientThis] attribute DOMString x;
          attribute DOMString y;
        };
    </pre>
    
    An ECMAScript implementation that supports this interface will
    allow the getter and setter of the accessor property that corresponds
    to x to be invoked with something other than an <code class="idl">Example</code>
    object.
    
    <pre highlight="js">
        var example = getExample();  // Get an instance of Example.
        var obj = { };
        
        // Fine.
        example.x;
        
        // Ignored, since the this value is not an Example object and [LenientThis] is used.
        Object.getOwnPropertyDescriptor(Example.prototype, "x").get.call(obj);
        
        // Also ignored, since Example.prototype is not an Example object and [LenientThis] is used.
        Example.prototype.x;
        
        // Throws a TypeError, since Example.prototype is not an Example object.
        Example.prototype.y;
    </pre>
</div>


<h4 id="NamedConstructor" extended-attribute lt="NamedConstructor">[NamedConstructor]</h4>

If the [{{NamedConstructor}}]
[=extended attribute=]
appears on an [=interface=],
it indicates that the ECMAScript global object will have a property with the
specified name whose value is a constructor function that can
create objects that implement the interface.
Multiple [{{NamedConstructor}}] extended
attributes may appear on a given interface.

The [{{NamedConstructor}}]
extended attribute must either
[=takes an identifier|take an identifier=] or
[=takes a named argument list|take a named argument list=].
The first form, <code>[NamedConstructor=<emu-nt><a href="#prod-identifier">identifier</a></emu-nt>]</code>, has the same meaning as
using an empty argument list, <code>[NamedConstructor=<emu-nt><a href="#prod-identifier">identifier</a></emu-nt>()]</code>.  For each
[{{NamedConstructor}}] extended attribute
on the interface, there will be a way to construct an object that implements
the interface by passing the specified arguments to the constructor function
that is the value of the aforementioned property.

The identifier used for the named constructor must not
be the same as that used by an [{{NamedConstructor}}]
extended attribute on another interface, must not
be the same as an identifier of an interface
that has an [=interface object=],
and must not be one of the
[=reserved identifiers=].

The [{{NamedConstructor}}] extended attribute
must not be used on a [=callback interface=].

See [[#named-constructors]] for details on how named constructors
are to be implemented.

<div class="example">
    
    The following IDL defines an interface that uses the
    [{{NamedConstructor}}] extended
    attribute.
    
    <pre class="idl-example">
        [NamedConstructor=Audio,
         NamedConstructor=Audio(DOMString src)]
        interface HTMLAudioElement : HTMLMediaElement {
          // ...
        };
    </pre>
    
    An ECMAScript implementation that supports this interface will
    allow the construction of <code class="idl">HTMLAudioElement</code>
    objects using the <code class="idl">Audio</code> constructor.
    
    <pre highlight="js">
        typeof Audio;                   // Evaluates to 'function'.
        
        var a1 = new Audio();           // Creates a new object that implements
                                        // HTMLAudioElement, using the zero-argument
                                        // constructor.
        
        var a2 = new Audio('a.flac');   // Creates an HTMLAudioElement using the
                                        // one-argument constructor.
    </pre>
</div>


<h4 id="NewObject" extended-attribute lt="NewObject">[NewObject]</h4>

If the [{{NewObject}}]
[=extended attribute=]
appears on a [=regular operation|regular=]
or [=static operations|static=]
[=operation=],
then it indicates that when calling the operation,
a reference to a newly created object
must always be returned.

The [{{NewObject}}]
extended attribute must
[=takes no arguments|take no arguments=].

The [{{NewObject}}]
extended attribute must not
be used on anything other than a [=regular operation|regular=]
or [=static operations|static=]
[=operation=]
whose [=return type=]
is an <a href="#idl-interface">interface type</a> or
a [=promise type=].

<div class="example">
    
    As an example, this extended attribute is suitable for use on
    the <a href="http://dom.spec.whatwg.org/#dom-document-createelement">createElement</a>
    operation on the <a href="http://dom.spec.whatwg.org/#document"><code class="idl">Document</code></a>
    interface ([[DOM]], section 6.5),
    since a new object should always be returned when
    it is called.
    
    <pre class="idl-example">
        interface Document : Node {
          [NewObject] Element createElement(DOMString localName);
          ...
        };
    </pre>
</div>


<h4 id="NoInterfaceObject" extended-attribute lt="NoInterfaceObject">[NoInterfaceObject]</h4>

If the [{{NoInterfaceObject}}]
[=extended attribute=]
appears on an [=interface=],
it indicates that an
[=interface object=]
will not exist for the interface in the ECMAScript binding.

Advisement: The [{{NoInterfaceObject}}] extended attribute
should not be used on interfaces that are not
solely used as [=supplemental interfaces|supplemental=] interfaces,
unless there are clear Web compatibility reasons for doing so.  Specification authors who
wish to use this feature are strongly advised to discuss this on the
<a href="mailto:public-script-coord@w3.org">public-script-coord@w3.org</a>
mailing list before proceeding.

The [{{NoInterfaceObject}}] extended attribute
must [=takes no arguments|take no arguments=].

If the [{{NoInterfaceObject}}] extended attribute
is specified on an interface, then the [{{Constructor}}]
extended attribute must not also be specified on that interface.
A [{{NamedConstructor}}] extended attribute is fine,
however.

The [{{NoInterfaceObject}}] extended attribute
must not be specified on an interface that has any
[=static operations=] defined on it.

The [{{NoInterfaceObject}}] extended attribute
must not be specified on a [=callback interface=]
unless it has a [=constant=] declared on it.
This is because callback interfaces without constants never have
[=interface objects=].

An interface that does not have the [{{NoInterfaceObject}}] extended
attribute specified must not inherit
from an interface that has the [{{NoInterfaceObject}}] extended
attribute specified.

See [[#es-interfaces]]
for the specific requirements that the use of
[{{NoInterfaceObject}}] entails.

<div class="example">
    
    The following [=IDL fragment=] defines two interfaces, one whose interface object
    is exposed on the ECMAScript global object, and one whose isn’t:
    
    <pre class="idl-example">
        interface Storage {
          void addEntry(unsigned long key, any value);
        };
        
        [NoInterfaceObject]
        interface Query {
          any lookupEntry(unsigned long key);
        };
    </pre>
    
    An ECMAScript implementation of the above IDL would allow
    manipulation of <code class="idl">Storage</code>’s
    prototype, but not <code class="idl">Query</code>’s.
    
    <pre highlight="js">
        typeof Storage;                        // evaluates to "object"
        
        // Add some tracing alert() call to Storage.addEntry.
        var fn = Storage.prototype.addEntry;
        Storage.prototype.addEntry = function(key, value) {
          alert('Calling addEntry()');
          return fn.call(this, key, value);
        };
        
        typeof Query;                          // evaluates to "undefined"
        var fn = Query.prototype.lookupEntry;  // exception, Query isn’t defined
    </pre>
</div>


<h4 id="OverrideBuiltins" extended-attribute lt="OverrideBuiltins">[OverrideBuiltins]</h4>

If the [{{OverrideBuiltins}}]
[=extended attribute=]
appears on an [=interface=],
it indicates that for a [=platform object=] implementing the interface,
properties corresponding to all of
the object’s [=supported property names=]
will appear to be on the object,
regardless of what other properties exist on the object or its
prototype chain.  This means that named properties will always shadow
any properties that would otherwise appear on the object.
This is in contrast to the usual behavior, which is for named properties
to be exposed only if there is no property with the
same name on the object itself or somewhere on its prototype chain.

The [{{OverrideBuiltins}}]
extended attribute must
[=takes no arguments|take no arguments=]
and must not appear on an interface
that does not define a [=named property getter=]
or that also is declared with the [{{Global}}]
or [{{PrimaryGlobal}}]
extended attribute.  If the extended attribute is specified on
a [=partial interface=]
definition, then that partial interface definition must
be the part of the interface definition that defines
the [=named property getter=].

See [[#indexed-and-named-properties]]
and [[#defineownproperty]]
for the specific requirements that the use of
[{{OverrideBuiltins}}] entails.

<div class="example">
    
    The following [=IDL fragment=]
    defines two [=interfaces=],
    one that has a [=named property getter=]
    and one that does not.
    
    <pre class="idl-example">
        interface StringMap {
          readonly attribute unsigned long length;
          getter DOMString lookup(DOMString key);
        };
        
        [OverrideBuiltins]
        interface StringMap2 {
          readonly attribute unsigned long length;
          getter DOMString lookup(DOMString key);
        };
    </pre>
    
    In an ECMAScript implementation of these two interfaces,
    getting certain properties on objects implementing
    the interfaces will result in different values:
    
    <pre highlight="js">
        // Obtain an instance of StringMap.  Assume that it has "abc", "length" and
        // "toString" as supported property names.
        var map1 = getStringMap();
        
        // This invokes the named property getter.
        map1.abc;
        
        // This fetches the "length" property on the object that corresponds to the
        // length attribute.
        map1.length;
        
        // This fetches the "toString" property from the object's prototype chain.
        map1.toString;
        
        // Obtain an instance of StringMap2.  Assume that it also has "abc", "length"
        // and "toString" as supported property names.
        var map2 = getStringMap2();
        
        // This invokes the named property getter.
        map2.abc;
        
        // This also invokes the named property getter, despite the fact that the "length"
        // property on the object corresponds to the length attribute.
        map2.length;
        
        // This too invokes the named property getter, despite the fact that "toString" is
        // a property in map2's prototype chain.
        map2.toString;
    </pre>
</div>


<h4 id="PutForwards" extended-attribute lt="PutForwards">[PutForwards]</h4>

If the [{{PutForwards}}]
[=extended attribute=]
appears on a [=read only=]
[=regular attribute=] declaration whose type is
an <a href="#idl-interface">interface type</a>,
it indicates that assigning to the attribute will have specific behavior.
Namely, the assignment is “forwarded” to the attribute (specified by
the extended attribute argument) on the object that is currently
referenced by the attribute being assigned to.

The [{{PutForwards}}] extended
attribute must [=takes an identifier|take an identifier=].
Assuming that:

*   |A| is the [=attribute=]
    on which the [{{PutForwards}}]
    extended attribute appears,
*   |I| is the [=interface=]
    on which |A| is declared,
*   |J| is the <a href="#idl-interface">interface type</a>
    that |A| is declared to be of, and
*   |N| is the [=identifier=]
    argument of the extended attribute,

then there must be another
[=attribute=] |B|
declared on |J| whose [=identifier=]
is |N|.  Assignment of a value to the attribute |A|
on an object implementing |I| will result in that value
being assigned to attribute |B| of the object that |A|
references, instead.

Note that [{{PutForwards}}]-annotated
[=attributes=] can be
chained.  That is, an attribute with the [{{PutForwards}}]
[=extended attribute=]
can refer to an attribute that itself has that extended attribute.
There must not exist a cycle in a
chain of forwarded assignments.  A cycle exists if, when following
the chain of forwarded assignments, a particular attribute on
an [=interface=] is
encountered more than once.

An attribute with the [{{PutForwards}}]
extended attribute must not also be declared
with the [{{LenientSetter}}] or
[{{Replaceable}}] extended attributes.

The [{{PutForwards}}]
extended attribute must not be used
on an [=attribute=] that
is not [=read only=].

The [{{PutForwards}}] extended attribute
must not be used on a
[=static attribute=].

The [{{PutForwards}}] extended attribute
must not be used on an attribute declared on
a [=callback interface=].

See the <a href="#es-attributes">Attributes</a> section for how
[{{PutForwards}}]
is to be implemented.

<div class="example">
    
    The following [=IDL fragment=] defines interfaces for names and people.
    The [{{PutForwards}}] extended
    attribute is used on the <code class="idl">name</code> attribute
    of the <code class="idl">Person</code> interface to indicate
    that assignments to that attribute result in assignments to the
    <code class="idl">full</code> attribute of the
    <code class="idl">Person</code> object:
    
    <pre class="idl-example">
        interface Name {
          attribute DOMString full;
          attribute DOMString family;
          attribute DOMString given;
        };
        
        interface Person {
          [PutForwards=full] readonly attribute Name name;
          attribute unsigned short age;
        };
    </pre>
    
    In the ECMAScript binding, this would allow assignments to the
    “name” property:
    
    <pre highlight="js">
        var p = getPerson();           // Obtain an instance of Person.
        
        p.name = 'John Citizen';       // This statement...
        p.name.full = 'John Citizen';  // ...has the same behavior as this one.
    </pre>
</div>


<h4 id="Replaceable" extended-attribute lt="Replaceable">[Replaceable]</h4>

If the [{{Replaceable}}]
[=extended attribute=]
appears on a [=read only=]
[=regular attribute=],
it indicates that setting the corresponding property on the
[=platform object=] will result in
an own property with the same name being created on the object
which has the value being assigned.  This property will shadow
the accessor property corresponding to the attribute, which
exists on the [=interface prototype object=].

The [{{Replaceable}}]
extended attribute must
[=takes no arguments|take no arguments=].

An attribute with the [{{Replaceable}}]
extended attribute must not also be declared
with the [{{LenientSetter}}] or
[{{PutForwards}}] extended attributes.

The [{{Replaceable}}]
extended attribute must not be used
on an [=attribute=] that
is not [=read only=].

The [{{Replaceable}}] extended attribute
must not be used on a
[=static attribute=].

The [{{Replaceable}}] extended attribute
must not be used on an attribute declared on
a [=callback interface=].

See [[#es-attributes]]
for the specific requirements that the use of
[{{Replaceable}}] entails.

<div class="example">
    
    The following [=IDL fragment=]
    defines an [=interface=]
    with an [=operation=]
    that increments a counter, and an [=attribute=]
    that exposes the counter’s value, which is initially 0:
    
    <pre class="idl-example">
        interface Counter {
          [Replaceable] readonly attribute unsigned long value;
          void increment();
        };
    </pre>
    
    Assigning to the “value” property
    on a [=platform object=] implementing <code class="idl">Counter</code>
    will shadow the property that corresponds to the
    [=attribute=]:
    
    <pre highlight="js">
        var counter = getCounter();                              // Obtain an instance of Counter.
        counter.value;                                           // Evaluates to 0.
        
        counter.hasOwnProperty("value");                         // Evaluates to false.
        Object.getPrototypeOf(counter).hasOwnProperty("value");  // Evaluates to true.
        
        counter.increment();
        counter.increment();
        counter.value;                                           // Evaluates to 2.
        
        counter.value = 'a';                                     // Shadows the property with one that is unrelated
                                                                 // to Counter::value.
        
        counter.hasOwnProperty("value");                         // Evaluates to true.
        
        counter.increment();
        counter.value;                                           // Evaluates to 'a'.
        
        delete counter.value;                                    // Reveals the original property.
        counter.value;                                           // Evaluates to 3.
    </pre>
</div>


<h4 id="SameObject" extended-attribute lt="SameObject">[SameObject]</h4>

If the [{{SameObject}}]
[=extended attribute=]
appears on a [=read only=]
[=attribute=], then it
indicates that when getting the value of the attribute on a given
object, the same value must always
be returned.

The [{{SameObject}}]
extended attribute must
[=takes no arguments|take no arguments=].

The [{{SameObject}}]
extended attribute must not
be used on anything other than a [=read only=]
[=attribute=]
whose type is an <a href="#idl-interface">interface type</a>
or {{object}}.

<div class="example">
    
    As an example, this extended attribute is suitable for use on
    the <a href="http://dom.spec.whatwg.org/#dom-document-implementation">implementation</a>
    attribute on the <a href="http://dom.spec.whatwg.org/#document"><code class="idl">Document</code></a>
    interface ([[DOM]], section 6.5),
    since the same object is always returned for a given
    <code class="idl">Document</code> object.
    
    <pre class="idl-example">
        interface Document : Node {
          [SameObject] readonly attribute DOMImplementation implementation;
          ...
        };
    </pre>
</div>


<h4 id="SecureContext" extended-attribute lt="SecureContext">[SecureContext]</h4>

If the [{{SecureContext}}]
[=extended attribute=]
appears on an [=interface=],
[=partial interface=],
an individual [=interface member=],
it indicates that the interface or interface member is exposed
only within a
<a href="https://w3c.github.io/webappsec-secure-contexts/#secure-context">secure context</a>
([[!SECURE-CONTEXTS]], section 2).

The [{{SecureContext}}]
extended attribute must
[=takes no arguments|take no arguments=].

The [{{SecureContext}}]
extended attribute must not
be used on anything other than an
[=interface=],
[=partial interface=], or
an individual [=interface member=].

Whether a construct that the [{{SecureContext}}]
[=extended attribute=]
can be specified on is <dfn id="dfn-available-only-in-secure-contexts" export>available only in secure contexts</dfn>
is defined as follows:

*   If the [{{SecureContext}}]
    [=extended attribute=]
    is specified on the construct, then it is
    [=available only in secure contexts=].
*   Otherwise, if the [{{SecureContext}}]
    [=extended attribute=]
    does not appear on a construct, then whether it is
    [=available only in secure contexts=]
    depends on the type of construct:
    
    <dl class="switch">
         :  interface
         :: The interface or dictionary is not
            [=available only in secure contexts=].
         :  partial interface
         :: The partial interface is [=available only in secure contexts=]
            if and only if the original interface definition is.
         :  interface member
         :: The interface member is [=available only in secure contexts=]
            if and only if the interface or partial interface the member is declared on is.
    </dl>

Note: Whether a construct is
[=available only in secure contexts=]
influences whether it is [=exposed=] in a given
ECMAScript global environment.

If [{{SecureContext}}] appears on an
[=overloaded=] [=operation=],
then it must appear on all overloads.

The [{{SecureContext}}] extended attribute
must not be specified on both an interface
member and the interface or partial interface definition the
interface member is declared on.

An interface without the [{{SecureContext}}] extended attribute
must not [=inherit=] from another interface
that does specify [{{SecureContext}}].

<div class="example">
    
    The following [=IDL fragment=] defines an interface
    with one [=operation=] that is executable from all
    contexts, and two which are executable only from secure contexts.
    
    <pre class="idl-example">
        interface PowerfulFeature {
          // This call will succeed in all contexts.
          Promise &lt;Result&gt; calculateNotSoSecretResult();
        
          // This operation will not be exposed to a non-secure context. In such a context,
          // there will be no "calculateSecretResult" property on PowerfulFeature.prototype.
          [SecureContext] Promise&lt;Result&gt; calculateSecretResult();
        
          // The same applies here: the attribute will not be exposed to a non-secure context,
          // and in a non-secure context there will be no "secretBoolean" property on
          // PowerfulFeature.prototype.
          [SecureContext] readonly attribute boolean secretBoolean;
        };
    </pre>
</div>


<h4 id="TreatNonObjectAsNull" extended-attribute lt="TreatNonObjectAsNull">[TreatNonObjectAsNull]</h4>

If the [{{TreatNonObjectAsNull}}]
[=extended attribute=]
appears on a [=callback function=],
then it indicates that any value assigned to an [=attribute=]
whose type is a [=nullable type|nullable=]
[=callback function=]
that is not an object will be converted to
the <emu-val>null</emu-val> value.

Advisement: Specifications should not use [{{TreatNonObjectAsNull}}]
unless required to specify the behavior of legacy APIs or for consistency with these
APIs.  Specification authors who
wish to use this feature are strongly advised to discuss this on the
<a href="mailto:public-script-coord@w3.org">public-script-coord@w3.org</a>
mailing list before proceeding.  At the time of writing, the only known
valid use of [{{TreatNonObjectAsNull}}]
is for the [=callback functions=] used as the type
of <a href="http://www.w3.org/TR/2011/WD-html5-20110525/webappapis.html#event-handler-attributes">event handler IDL attributes</a>
([[HTML5]], section 6.1.6.1)
such as <code>onclick</code> and <code>onerror</code>.

See [[#es-nullable-type]]
for the specific requirements that the use of
[{{TreatNonObjectAsNull}}] entails.

<div class="example">
    
    The following [=IDL fragment=] defines an interface that has one
    attribute whose type is a [{{TreatNonObjectAsNull}}]-annotated
    [=callback function=] and another whose type is a
    [=callback function=] without the [=extended attribute=]:
    
    <pre class="idl-example">
        callback OccurrenceHandler = void (DOMString details);
        
        [TreatNonObjectAsNull]
        callback ErrorHandler = void (DOMString details);
        
        interface Manager {
          attribute OccurrenceHandler? handler1;
          attribute ErrorHandler? handler2;
        };
    </pre>
    
    In an ECMAScript implementation, assigning a value that is not
    an object (such as a <emu-val>Number</emu-val> value)
    to handler1 will have different behavior from that when assigning
    to handler2:
    
    <pre highlight="js">
        var manager = getManager();  // Get an instance of Manager.
        
        manager.handler1 = function() { };
        manager.handler1;            // Evaluates to the function.
        
        try {
          manager.handler1 = 123;    // Throws a TypeError.
        } catch (e) {
        }
        
        manager.handler2 = function() { };
        manager.handler2;            // Evaluates to the function.
        
        manager.handler2 = 123;
        manager.handler2;            // Evaluates to null.
    </pre>
</div>


<h4 id="TreatNullAs" extended-attribute lt="TreatNullAs">[TreatNullAs]</h4>

If the [{{TreatNullAs}}]
[=extended attribute=]
appears on an [=attribute=]
or [=operation=] argument whose type is
{{DOMString}},
it indicates that a <emu-val>null</emu-val> value
assigned to the attribute or passed as the operation argument will be
handled differently from its default handling.  Instead of being stringified
to “null”, which is the default,
it will be converted to the empty string “”.

If [{{TreatNullAs}}] is specified on
an operation itself, and that operation is on a [=callback interface=],
then it indicates that a <a href="#es-user-objects">user object implementing the interface</a> will have the return
value of the function that implements the operation handled in the same way as for operation arguments
and attributes, as above.

The [{{TreatNullAs}}]
extended attribute must [=takes an identifier|take the identifier=]
<code>EmptyString</code>.

The [{{TreatNullAs}}] extended attribute
must not be specified on an operation argument,
attribute or operation return value whose type is not {{DOMString}}.

Note: This means that even an attribute of type <code class="idl">DOMString?</code> must not
use [{{TreatNullAs}}], since <emu-val>null</emu-val>
is a valid value of that type.

The [{{TreatNullAs}}] extended attribute
also must not be specified on an operation on
a non-callback interface.

See [[#es-DOMString]]
for the specific requirements that the use of
[{{TreatNullAs}}] entails.

<div class="example">
    
    The following [=IDL fragment=] defines an interface that has one
    attribute with the [{{TreatNullAs}}]
    extended attribute, and one operation with an argument that has
    the extended attribute:
    
    <pre class="idl-example">
        interface Dog {
          attribute DOMString name;
          [TreatNullAs=EmptyString] attribute DOMString owner;
        
          boolean isMemberOfBreed([TreatNullAs=EmptyString] DOMString breedName);
        };
    </pre>
    
    An ECMAScript implementation implementing the <code class="idl">Dog</code>
    interface would convert a <emu-val>null</emu-val> value
    assigned to the “owner” property or passed as the
    argument to the <code>isMemberOfBreed</code> function
    to the empty string rather than <code>"null"</code>:
    
    <pre highlight="js">
        var d = getDog();         // Assume d is a platform object implementing the Dog
                                  // interface.
        
        d.name = null;            // This assigns the string "null" to the .name
                                  // property.
        
        d.owner = null;           // This assigns the string "" to the .owner property.
        
        d.isMemberOfBreed(null);  // This passes the string "" to the isMemberOfBreed
                                  // function.
    </pre>
</div>


<h4 id="Unforgeable" extended-attribute lt="Unforgeable">[Unforgeable]</h4>

If the [{{Unforgeable}}]
[=extended attribute=]
appears on a non-[=Static attributes|static=]
[=attribute=]
or non-[=static operations|static=]
[=operations=], it indicates
that the attribute or operation will be reflected as an ECMAScript property in
a way that means its behavior cannot be modified and that performing
a property lookup on the object will always result in the attribute’s
property value being returned.  In particular, the property will be
non-configurable and will exist as an own property on the object
itself rather than on its prototype.

If the [{{Unforgeable}}]
[=extended attribute=]
appears on an [=interface=],
it indicates that all of the non-[=Static attributes|static=]
[=attributes=]
and non-[=static operations|static=]
[=operations=] declared on
that interface and its [=consequential interfaces=]
will be similarly reflected as own ECMAScript properties on objects
that implement the interface, rather than on the prototype.

An attribute or operation is said to be <dfn id="dfn-unforgeable-on-an-interface" export>unforgeable</dfn>
on a given interface |A| if any of the following are true:

*   The attribute or operation is declared on |A| or one
    of |A|’s [=consequential interfaces=],
    and is annotated with the [{{Unforgeable}}]
    [=extended attribute=].
*   The attribute or operation is declared on |A| or one
    of |A|’s [=consequential interfaces=],
    and that interface is annotated with the [{{Unforgeable}}]
    [=extended attribute=].
*   There exists an interface |B|, which is either |A| or one of
    |A|’s [=consequential interfaces=],
    |B| is annotated with the [{{Unforgeable}}]
    [=extended attribute=],
    and the attribute or operation is declared on one of |B|’s consequential interfaces.

The [{{Unforgeable}}]
extended attribute must
[=takes no arguments|take no arguments=].

The [{{Unforgeable}}]
extended attribute must not appear on
anything other than an [=attribute=],
non-[=static operations|static=] [=operation=]
or an [=interface=].  If it does
appear on an [=operation=], then
it must appear on all operations with
the same [=identifier=] on that interface.

If an attribute or operation |X| is [=unforgeable=]
on an interface |A|, and |A| is one of the
[=inherited interfaces=]
of another interface |B|, then |B| and all of its
[=consequential interfaces=]
must not have a non-static attribute or
[=regular operation=] with the same
[=identifier=] as |X|.

Note: For example, the following is disallowed:

See [[#es-attributes]],
[[#es-operations]],
[[#es-platform-objects]],
[[#indexed-and-named-properties]] and
[[#defineownproperty]]
for the specific requirements that the use of
[{{Unforgeable}}] entails.

<div class="example">
    
    The following [=IDL fragment=] defines
    an interface that has two [=attributes=],
    one of which is designated as [{{Unforgeable}}]:
    
    <pre class="idl-example">
        interface System {
          [Unforgeable] readonly attribute DOMString username;
          readonly attribute long long loginTime;
        };
    </pre>
    
    In an ECMAScript implementation of the interface, the username attribute will be exposed as a non-configurable property on the
    object itself:
    
    <pre highlight="js">
        var system = getSystem();                      // Get an instance of System.
        
        system.hasOwnProperty("username");             // Evaluates to true.
        system.hasOwnProperty("loginTime");            // Evaluates to false.
        System.prototype.hasOwnProperty("username");   // Evaluates to false.
        System.prototype.hasOwnProperty("loginTime");  // Evaluates to true.
        
        try {
          // This call would fail, since the property is non-configurable.
          Object.defineProperty(system, "username", { value: "administrator" });
        } catch (e) { }
        
        // This defineProperty call would succeed, because System.prototype.loginTime
        // is configurable.
        var forgedLoginTime = 5;
        Object.defineProperty(System.prototype, "loginTime", { value: forgedLoginTime });
        
        system.loginTime;  // So this now evaluates to forgedLoginTime.
    </pre>
</div>


<h4 id="Unscopable" extended-attribute lt="Unscopable">[Unscopable]</h4>

If the [{{Unscopable}}]
[=extended attribute=]
appears on a [=regular attribute=]
or [=regular operation=], it
indicates that an object that implements an interface with the given
interface member will not include its property name in any object
environment record with it as its base object.  The result of this is
that bare identifiers matching the property name will not resolve to
the property in a <code>with</code> statement.  This is achieved by
including the property name on the
[=interface prototype object=]’s
[=@@unscopables=] property’s value.

The [{{Unscopable}}]
extended attribute must
[=takes no arguments|take no arguments=].

The [{{Unscopable}}]
extended attribute must not appear on
anything other than a [=regular attribute=]
or [=regular operation=].

See [[#interface-prototype-object]]
for the specific requirements that the use of
[{{Unscopable}}] entails.

<div class="note">
    
    For example, with the following IDL:
    
    <pre class="idl-example example">
        interface Thing {
          void f();
          [Unscopable] g();
        };
    </pre>
    
    the “f” property an be referenced with a bare identifier
    in a <code>with</code> statement but the “g” property cannot:
    
    <pre highlight="js">
        var thing = getThing();  // An instance of Thing
        with (thing) {
          f;                     // Evaluates to a Function object.
          g;                     // Throws a ReferenceError.
        }
    </pre>
</div>


<h3 id="es-security">Security</h3>

Certain algorithms in the sections below are defined to
<dfn id="dfn-perform-a-security-check" export>perform a security check</dfn> on a given
object.  This check is used to determine whether a given
[=operation=] invocation or
[=attribute=] access should be
allowed.  The security check takes the following four inputs:

1.  the [=platform object=] on
    which the operation invocation or attribute access is being done,
1.  the ECMAScript global environment associated with the
    <emu-val>Function</emu-val> object that implements the
    operation or attribute,
1.  the [=identifier=]
    of the operation or attribute, and
1.  the type of the <emu-val>Function</emu-val> object –
    “method” (when it corresponds to an IDL operation), or
    “getter” or “setter” (when it corresponds to the
    getter or setter function of an IDL attribute).

Note: The expectation is that the HTML specification defines how a
security check is performed, and that it will either throw an
appropriate exception or return normally. [[!HTML]]


<h3 id="es-overloads">Overload resolution algorithm</h3>

In order to define how overloaded function invocations are resolved, the
<dfn id="dfn-overload-resolution-algorithm" export>overload resolution algorithm</dfn>
is defined.  Its input is an [=effective overload set=],
|S|, and a list of ECMAScript values, |arg|<sub>0..|n|−1</sub>.
Its output is a pair consisting of the [=operation=] or
[=extended attribute=] of one of |S|’s entries
and a list of IDL values or the special value “missing”.  The algorithm behaves as follows:

<ol class="algorithm">
    1.  Let |maxarg| be the length of the longest type list of the entries in |S|.
    1.  Initialize |argcount| to be min(|maxarg|, |n|).
    
    1.  Remove from |S| all entries whose type list is not of length |argcount|.
    
    1.  If |S| is empty, then <a lt="es throw">throw a <emu-val>TypeError</emu-val></a>.
    
    1.  Initialize |d| to −1.
    
    1.  Initialize |method| to
        <emu-val>undefined</emu-val>.
    
    1.  If there is more than one entry in |S|, then set
        |d| to be the [=distinguishing argument index=]
        for the entries of |S|.
    
    1.  Initialize |values| to be an empty list, where each entry will be either an IDL value or the special value “missing”.
    
    1.  Initialize |i| to 0.
    
    1.  While |i| &lt; |d|:
        1.  Let |V| be |arg|<sub>|i|</sub>.
        1.  Let |type| be the type at index |i| in the type list of any entry in |S|.
            
            Note: All entries in |S| at this point have the same type and [=optionality value=] at index |i|.
            
        1.  Let |optionality| be the value at index |i| in the list of [=optionality values=] of any entry in |S|.
        1.  If |optionality| is “optional” and |V| is <emu-val>undefined</emu-val>, then:
            1.  If the argument at index |i| is declared with a [=default value=],
                then append to |values| that default value.
            1.  Otherwise, append to |values| the special value “missing”.
        1.  Otherwise, append to |values| the result of [=converted to an IDL value|converting=]
            |V| to IDL type |type|.
        1.  Set |i| to |i| + 1.
    
    1.  If |i| = |d|, then:
        1.  Let |V| be |arg|<sub>|i|</sub>.
            
            Note: This is the argument that will be used to resolve which overload is selected.
            
        1.  If |V| is <emu-val>undefined</emu-val>, and there is an entry in |S|
            whose list of [=optionality values=] has “optional” at index |i|,
            then remove from |S| all other entries.
        
        1.  Otherwise: if |V| is <emu-val>null</emu-val> or <emu-val>undefined</emu-val>,
            and there is an entry in |S| that has one of the following types at position |i| of its type list,
            *   a [=nullable type=]
            *   a <a href="#idl-dictionary">dictionary type</a>
            *   a [=union type=] that
                [=includes a nullable type=] or that
                has a <a href="#idl-dictionary">dictionary type</a> in its [=flattened member types|flattened members=]
            
            then remove from |S| all other entries.
        
        1.  Otherwise: if |V| is a [=platform object=], and
            there is an entry in |S| that has one of the following types at position |i| of its type list,
            *   an <a href="#idl-interface">interface type</a> that |V| implements
            *   {{object}}
            *   a [=nullable type|nullable=] version of any of the above types
            *   a [=union type=] or a [=nullable type|nullable=] union type
                that has one of the above types in its [=flattened member types=]
            
            then remove from |S| all other entries.
        
        1.  Otherwise: if |V| is a <emu-val>RegExp</emu-val> object and
            there is an entry in |S| that has one of the following types at position |i| of its type list,
            *   {{RegExp}}
            *   {{object}}
            *   a [=nullable type|nullable=] version of either of the above types
            *   a [=union type=] or [=nullable type|nullable=] union type
                that has one of the above types in its [=flattened member types=]
            
            then remove from |S| all other entries.
        
        1.  Otherwise: if |V| is a <emu-val>RegExp</emu-val> object and
            there is an entry in |S| that has one of the following types at position |i| of its type list,
            *   {{RegExp}}
            *   {{object}}
            *   a [=nullable type|nullable=] version of either of the above types
            *   a [=union type=] or [=nullable type|nullable=] union type
                that has one of the above types in its [=flattened member types=]
            
            then remove from |S| all other entries.
        
        1.  Otherwise: if |V| is a [=DOMException=] platform object and
            there is an entry in |S| that has one of the following types at position |i| of its type list,
            *   {{DOMException}}
            *   {{Error!!interface}}
            *   {{object}}
            *   a [=nullable type|nullable=] version of either of the above types
            *   a [=union type=] or [=nullable type|nullable=] union type
                that has one of the above types in its [=flattened member types=]
            
            then remove from |S| all other entries.
        
        1.  Otherwise: if |V| is an <emu-val>Error</emu-val> object (that is, it has an \[[ErrorData]] [=internal slot=]) and
            there is an entry in |S| that has one of the following types at position |i| of its type list,
            *   {{Error!!interface}}
            *   {{object}}
            *   a [=nullable type|nullable=] version of either of the above types
            *   a [=union type=] or [=nullable type|nullable=] union type
                that has one of the above types in its [=flattened member types=]
            
            then remove from |S| all other entries.
        
        1.  Otherwise: if |V| is an object with an \[[ArrayBufferData]] [=internal slot=] and
            there is an entry in |S| that has one of the following types at position |i| of its type list,
            *   {{ArrayBuffer}}
            *   {{object}}
            *   a [=nullable type|nullable=] version of either of the above types
            *   a [=union type=] or [=nullable type|nullable=] union type
                that has one of the above types in its [=flattened member types=]
            
            then remove from |S| all other entries.
        
        1.  Otherwise: if |V| is an object with a \[[DataView]] [=internal slot=] and
            there is an entry in |S| that has one of the following types at position |i| of its type list,
            *   {{DataView}}
            *   {{object}}
            *   a [=nullable type|nullable=] version of either of the above types
            *   a [=union type=] or [=nullable type|nullable=] union type
                that has one of the above types in its [=flattened member types=]
            
            then remove from |S| all other entries.
        
        1.  Otherwise: if |V| is an object with a \[[TypedArrayName]] [=internal slot=] and
            there is an entry in |S| that has one of the following types at position |i| of its type list,
            *   a [=typed array type=] whose name
                is equal to the value of |V|’s \[[TypedArrayName]] [=internal slot=]
            *   {{object}}
            *   a [=nullable type|nullable=] version of either of the above types
            *   a [=union type=] or [=nullable type|nullable=] union type
                that has one of the above types in its [=flattened member types=]
            
            then remove from |S| all other entries.
        
        1.  Otherwise: if [=IsCallable=](|V|) is true,
            and there is an entry in |S| that has one of the following types at position |i| of its type list,
            *   a [=callback function=] type
            *   {{object}}
            *   a [=nullable type|nullable=] version of any of the above types
            *   a [=union type=] or [=nullable type|nullable=] union type
                that has one of the above types in its [=flattened member types=]
            
            then remove from |S| all other entries.
        
        1.  Otherwise: if |V| is any kind of object except for
            a native <emu-val>RegExp</emu-val> object, and
            there is an entry in |S| that has one of the
            following types at position |i| of its type list,
            *   a <a href="#idl-sequence">sequence type</a>
            *   a <a href="#idl-frozen-array">frozen array type</a>
            *   a [=nullable type|nullable=] version of any of the above types
            *   a [=union type=] or [=nullable type|nullable=] union type
                that has one of the above types in its [=flattened member types=]
            
            and after performing the following steps,
            
            1.  Let |method| be the result of
                [=GetMethod=](|V|, [=@@iterator=]).
            1.  [=ReturnIfAbrupt=](|method|).
            
            |method| is not <emu-val>undefined</emu-val>, then remove from |S| all
            other entries.
        
        1.  Otherwise: if |V| is any kind of object except for
            a native <emu-val>RegExp</emu-val> object, and
            there is an entry in |S| that has one of the following types at position |i| of its type list,
            *   a [=callback interface=] type
            *   a <a href="#idl-dictionary">dictionary type</a>
            *   {{object}}
            *   a [=nullable type|nullable=] version of any of the above types
            *   a [=union type=] or [=nullable type|nullable=] union type
                that has one of the above types in its [=flattened member types=]
            
            then remove from |S| all other entries.
        
        1.  Otherwise: if |V| is a <emu-val>Boolean</emu-val> value,
            and there is an entry in |S| that has one of the following types at position |i| of its type list,
            *   {{boolean}}
            *   a [=nullable type|nullable=] {{boolean}}
            *   a [=union type=] or [=nullable type|nullable=] union type
                that has one of the above types in its [=flattened member types=]
            
            then remove from |S| all other entries.
        
        1.  Otherwise: if |V| is a <emu-val>Number</emu-val> value,
            and there is an entry in |S| that has one of the following types at position |i| of its type list,
            *   a [=numeric type=]
            *   a [=nullable type|nullable=] [=numeric type=]
            *   a [=union type=] or [=nullable type|nullable=] union type
                that has one of the above types in its [=flattened member types=]
            
            then remove from |S| all other entries.
        
        1.  Otherwise: if there is an entry in |S| that has one of the following types at position |i| of its type list,
            *   a [=string type=]
            *   a [=nullable type|nullable=] version of any of the above types
            *   a [=union type=] or [=nullable type|nullable=] union type
                that has one of the above types in its [=flattened member types=]
            
            then remove from |S| all other entries.
        
        1.  Otherwise: if there is an entry in |S| that has one of the following types at position |i| of its type list,
            *   a [=numeric type=]
            *   a [=nullable type|nullable=] [=numeric type=]
            *   a [=union type=] or [=nullable type|nullable=] union type
                that has one of the above types in its [=flattened member types=]
            
            then remove from |S| all other entries.
        
        1.  Otherwise: if there is an entry in |S| that has one of the following types at position |i| of its type list,
            *   {{boolean}}
            *   a [=nullable type|nullable=] {{boolean}}
            *   a [=union type=] or [=nullable type|nullable=] union type
                that has one of the above types in its [=flattened member types=]
            
            then remove from |S| all other entries.
        
        1.  Otherwise: if there is an entry in |S| that has {{any}} at position |i|
            of its type list,
            then remove from |S| all other entries.
        
        1.  Otherwise:
            <a lt="es throw">throw a <emu-val>TypeError</emu-val></a>.
    
    1.  Let |callable| be the [=operation=] or [=extended attribute=]
        of the single entry in |S|.
    
    1.  If |i| = |d| and |method| is not <emu-val>undefined</emu-val>, then
        1.  Let |V| be |arg|<sub>|i|</sub>.
        1.  Let |T| be the type at index |i| in the
            type list of the remaining entry in |S|.
        1.  If |T| is a <a href="#idl-sequence">sequence type</a>, then
            append to |values| the result of
            .
        1.  Otherwise, |T| is a <a href="#idl-frozen-array">frozen array type</a>.
            Append to |values| the result of
            [=Creating a frozen array from an iterable|creating a frozen array of type T from V and method=].
        1.  Set |i| to |i| + 1.
    
    1.  While |i| &lt; |argcount|:
        1.  Let |V| be |arg|<sub>|i|</sub>.
        1.  Let |type| be the type at index |i| in the type list of the remaining entry in |S|.
        1.  Let |optionality| be the value at index |i| in the list of [=optionality values=] of the remaining entry in |S|.
        1.  If |optionality| is “optional” and |V| is <emu-val>undefined</emu-val>, then:
            1.  If the argument at index |i| is declared with a [=default value=],
                then append to |values| that default value.
            1.  Otherwise, append to |values| the special value “missing”.
        1.  Otherwise, append to |values| the result of
            [=converted to an IDL value|converting=] |V| to IDL type |type|.
        1.  Set |i| to |i| + 1.
    
    1.  While |i| is less than the number of arguments |callable| is declared to take:
        1.  If |callable|’s argument at index |i| is declared with a [=default value=],
            then append to |values| that default value.
        1.  Otherwise, if |callable|’s argument at index |i| is not variadic, then append to |values| the special value “missing”.
        1.  Set |i| to |i| + 1.
    
    1.  Return the pair &lt;|callable|, |values|&gt;.
</ol>

<div class="note">
    
    The overload resolution algorithm performs both the identification
    of which overloaded operation, constructor, etc. is being called,
    and the conversion of the ECMAScript argument values to their
    corresponding IDL values.  Informally, it operates as follows.
    
    First, the selection of valid overloads is done by considering
    the number of ECMAScript arguments that were passed in to the function:
    
    *   If there are more arguments passed in than the longest
        overload argument list, then they are ignored.
    *   After ignoring these trailing arguments, only overloads
        that can take this exact number of arguments are considered.
        If there are none, then a <emu-val>TypeError</emu-val> is thrown.
    
    Once we have a set of possible overloads with the right number
    of arguments, the ECMAScript values are converted from left to right.
    The nature of the restrictions on overloading means that if we
    have multiple possible overloads at this point, then there will
    be one position in the argument list that will be used to
    distinguish which overload we will finally select; this is
    the [=distinguishing argument index=].
    
    We first convert the arguments to the left of the distinguishing
    argument.  (There is a requirement that an argument to the left of
    the distinguishing argument index has the same type as in the other
    overloads, at the same index.) Then we inspect the type of the
    ECMAScript value that is passed in at the distinguishing argument
    index to determine which IDL type it may correspond to.
    This allows us to select the final overload that will
    be invoked.  If the value passed in is <emu-val>undefined</emu-val>
    and there is an overload with an optional argument at this position, then
    we will choose that overload.  If there is no valid overload for the type of
    value passed in here, then we throw a <emu-val>TypeError</emu-val>.
    The inspection of the value at the distinguishing argument index does not have any side effects;
    the only side effects that come from running the overload resolution
    algorithm are those that come from converting the ECMAScript values
    to IDL values.
    
    At this point, we have determined which overload to use.  We now
    convert the remaining arguments, from the distinguishing argument onwards,
    again ignoring any additional arguments that were ignored due to being passed
    after the last possible argument.
    
    When converting an optional argument’s ECMAScript value to its equivalent IDL value,
    <emu-val>undefined</emu-val> will be converted into
    the [=default value|optional argument’s default value=],
    if it has one, or a special value “missing” otherwise.
    
    Optional arguments corresponding to a final, variadic argument do not treat
    <emu-val>undefined</emu-val> as a special “missing” value, however.
    The <emu-val>undefined</emu-val> value is converted to the type
    of variadic argument as would be done for a non-optional argument.
    
</div>


<h3 id="es-interfaces">Interfaces</h3>

For every [=interface=] that
is [=exposed=] in a given
ECMAScript global environment and:

*   is a [=callback interface=]
    that has [=constants=] declared on it, or
*   is a non-callback [=interface=]
    that is not declared with the [{{NoInterfaceObject}}]
    [=extended attribute=],

a corresponding property must exist on the
ECMAScript environment's global object.
The name of the property is the [=identifier=] of the interface,
and its value is an object called the <dfn id="dfn-interface-object" export>interface object</dfn>.

The property has the attributes <span class="descriptor">{ \[[Writable]]: <emu-val>true</emu-val>, \[[Enumerable]]: <emu-val>false</emu-val>, \[[Configurable]]: <emu-val>true</emu-val> }</span>.
The characteristics of an interface object are described in [[#interface-object]].

In addition, for every [{{NamedConstructor}}]
extended attribute on an [=exposed=] interface, a corresponding property must
exist on the ECMAScript global object.  The name of the property is the
<emu-nt><a href="#prod-identifier">identifier</a></emu-nt> that occurs directly after the
“<emu-t>=</emu-t>”, and its value is an object called a
<dfn id="dfn-named-constructor" export>named constructor</dfn>, which allows
construction of objects that implement the interface.  The property has the
attributes <span class="descriptor">{ \[[Writable]]: <emu-val>true</emu-val>, \[[Enumerable]]: <emu-val>false</emu-val>, \[[Configurable]]: <emu-val>true</emu-val> }</span>.
The characteristics of a named constructor are described in
[[#named-constructors]].


<h4 id="interface-object">Interface object</h4>

The interface object for a given non-callback [=interface=]
is a [=function object=].
It has properties that correspond to
the [=constants=] and
[=static operations=]
defined on that interface, as described in sections
[[#es-constants]] and
[[#es-operations]].

The \[[Prototype]] internal property of
an interface object for a non-callback interface is determined as
follows:

1.  If the interface inherits from some other interface, the value
    of \[[Prototype]] is the interface
    object for that other interface.
1.  If the interface doesn't inherit from any other interface,
    the value of \[[Prototype]] is
    [=%FunctionPrototype%=].

An interface object for a non-callback interface must have a property named “prototype”
with attributes
<span class="descriptor">{ \[[Writable]]: <emu-val>false</emu-val>, \[[Enumerable]]: <emu-val>false</emu-val>, \[[Configurable]]: <emu-val>false</emu-val> }</span>
whose value is an object called the <dfn id="dfn-interface-prototype-object" export>interface prototype object</dfn>.  This object has properties
that correspond to the [=regular attributes=] and
[=regular operations=] defined on the interface,
and is described in more detail in
[[#interface-prototype-object]].

Note: Since an interface object for a non-callback interface is a [=function object=] the <code>typeof</code> operator will return
"function" when applied to
such an interface object.

The internal \[[Prototype]] property
of an interface object for a callback interface must be
the Object.prototype object.

Note: Remember that interface objects for callback interfaces only exist if they have
[=constants=] declared on them;
when they do exist, they are not [=function objects=].


<h5 id="es-interface-call">Interface object \[[Call]] method</h5>

If the [=interface=] is declared with a
[{{Constructor}}] [=extended attribute=],
then the [=interface object=]
can be called as a function to create an object that implements that
interface.  Interfaces that do not have a constructor will throw
an exception when called as a function.

The internal \[[Call]] method
of the interface object behaves as follows, assuming
|arg|<sub>0..|n|−1</sub> is the list
of argument values passed to the constructor, and |I|
is the [=interface=]:

<ol class="algorithm">
    1.  If |I| was not declared with a [{{Constructor}}]
        [=extended attribute=], then
        <a lt="es throw">throw a <emu-val>TypeError</emu-val></a>.
    1.  Let |id| be the identifier of interface |I|.
    1.  Initialize |S| to the
        [=effective overload set=]
        for constructors with [=identifier=]
        |id| on [=interface=]
        |I| and with argument count |n|.
    1.  Let &lt;|constructor|, |values|&gt; be the result of passing |S| and
        |arg|<sub>0..|n|−1</sub> to the
        [=overload resolution algorithm=].
    1.  Let |R| be the result of performing the actions listed in the description of
        |constructor| with |values| as the argument values.
    1.  Return the result of [=converted to an ECMAScript value|converting=]
        |R| to an ECMAScript <a href="#idl-interface">interface type</a> value
        |I|.
</ol>

If the internal \[[Call]] method
of the [=interface object=]
returns normally, then it must
return an object that implements interface |I|.
This object also must be
associated with the ECMAScript global environment associated
with the interface object.

Interface objects for non-callback interfaces must have a property named “length”
with attributes <span class="descriptor">{ \[[Writable]]: <emu-val>false</emu-val>, \[[Enumerable]]: <emu-val>false</emu-val>, \[[Configurable]]: <emu-val>true</emu-val> }</span>
whose value is a <emu-val>Number</emu-val>.
If the [{{Constructor}}]
[=extended attribute=]
does not appear on the interface definition, then the value is 0.
Otherwise, the value is determined as follows:

<ol class="algorithm">
    1.  Let |id| be the identifier of interface |I|.
    1.  Initialize |S| to the
        [=effective overload set=]
        for constructors with
        [=identifier=]
        |id| on [=interface=]
        |I| and with argument count 0.
    1.  Return the length of the shortest argument list of the entries in |S|.
</ol>

All interface objects must have a
property named “name” with attributes <span class="descriptor">{ \[[Writable]]: <emu-val>false</emu-val>, \[[Enumerable]]: <emu-val>false</emu-val>, \[[Configurable]]: <emu-val>true</emu-val> }</span>
whose value is the identifier of the corresponding interface.


<h5 id="es-interface-hasinstance">Interface object \[[HasInstance]] method</h5>

The internal \[[HasInstance]] method of every
[=interface object=]
|A| must behave as follows,
assuming |V| is the object
argument passed to \[[HasInstance]]:

<ol class="algorithm">
    1.  If |V| is not an object, return <emu-val>false</emu-val>.
    1.  Let |O| be the result of calling the \[[Get]] method of |A| with property name “prototype”.
    1.  If |O| is not an object, <a lt="es throw">throw a <emu-val>TypeError</emu-val></a> exception.
    1.  If |V| is a platform object that implements the
        interface for which |O| is the [=interface prototype object=],
        return <emu-val>true</emu-val>.
    1.  Repeat:
        1.  Set |V| to the value of the \[[Prototype]] internal property of |V|.
        1.  If |V| is <emu-val>null</emu-val>, return <emu-val>false</emu-val>.
        1.  If |O| and |V| refer to the same object,
            return <emu-val>true</emu-val>.
</ol>


<h4 id="named-constructors">Named constructors</h4>

A [=named constructor=]
that exists due to one or more
[{{NamedConstructor}}]
[=extended attributes=]
with a given [=identifier=]
is a [=function object=].
It must have a \[[Call]]
internal property, which allows construction of objects that
implement the interface on which the
[{{NamedConstructor}}]
extended attributes appear.  It behaves as follows, assuming
|arg|<sub>0..|n|−1</sub> is the list
of argument values passed to the constructor, |id|
is the identifier of the constructor specified in the
extended attribute [=takes a named argument list|named argument list=],
and |I| is the [=interface=]
on which the [{{NamedConstructor}}]
extended attribute appears:

<ol class="algorithm">
    1.  Initialize |S| to the
        [=effective overload set=]
        for constructors with [=identifier=]
        |id| on [=interface=]
        |I| and with argument count |n|.
    1.  Let &lt;|constructor|, |values|&gt; be the result of passing |S| and
        |arg|<sub>0..|n|−1</sub> to the
        [=overload resolution algorithm=].
    1.  Let |R| be the result of performing the actions listed in the description of
        |constructor| with |values| as the argument values.
    1.  Return the result of [=converted to an ECMAScript value|converting=]
        |R| to an ECMAScript
        <a href="#idl-interface">interface type</a> value
        |I|.
</ol>

If the internal \[[Call]] method
of the [=named constructor=]
returns normally, then it must
return an object that implements interface |I|.
This object also must be
associated with the ECMAScript global environment associated
with the [=named constructor=].

A named constructor must have a property named “length”
with attributes <span class="descriptor">{ \[[Writable]]: <emu-val>false</emu-val>, \[[Enumerable]]: <emu-val>false</emu-val>, \[[Configurable]]: <emu-val>true</emu-val> }</span>
whose value is a <emu-val>Number</emu-val> determined as follows:

<ol class="algorithm">
    1.  Initialize |S| to the
        [=effective overload set=]
        for constructors with
        [=identifier=]
        |id| on [=interface=]
        |I| and with argument count 0.
    1.  Return the length of the shortest argument list of the entries in |S|.
</ol>

A named constructor must have a property named “name”
with attributes <span class="descriptor">{ \[[Writable]]: <emu-val>false</emu-val>, \[[Enumerable]]: <emu-val>false</emu-val>, \[[Configurable]]: <emu-val>true</emu-val> }</span>
whose value is the identifier used for the named constructor.

A named constructor must also have a property named
“prototype” with attributes
<span class="descriptor">{ \[[Writable]]: <emu-val>false</emu-val>, \[[Enumerable]]: <emu-val>false</emu-val>, \[[Configurable]]: <emu-val>false</emu-val> }</span>
whose value is the [=interface prototype object=]
for the [=interface=] on which the
[{{NamedConstructor}}]
[=extended attribute=]
appears.


<h4 id="interface-prototype-object">Interface prototype object</h4>

There must exist an
[=interface prototype object=] for every non-callback [=interface=]
defined, regardless of whether the interface was declared with the
[{{NoInterfaceObject}}]
[=extended attribute=].
The interface prototype object for a particular interface has
properties that correspond to the [=regular attributes=]
and [=regular operations=]
defined on that interface.  These properties are described in more detail in
sections [[#es-attributes]] and
[[#es-operations]].

As with the [=interface object=],
the interface prototype object also has properties that correspond to the
[=constants=] defined on that
interface, described in [[#es-operations]].

If the [{{NoInterfaceObject}}]
extended attribute was not specified on the interface, then
the interface prototype object must
also have a property named “constructor” with attributes
<span class="descriptor">{ \[[Writable]]: <emu-val>true</emu-val>, \[[Enumerable]]: <emu-val>false</emu-val>, \[[Configurable]]: <emu-val>true</emu-val> }</span> whose value
is a reference to the interface object for the interface.

The [=interface prototype object=]
for a given interface |A| must have an internal
\[[Prototype]] property whose value is returned from
the following steps:

<ol class="algorithm">
    1.  If |A| is declared with the [{{Global}}]
        or [{{PrimaryGlobal}}]
        [=extended attribute=], and |A|
        [=support named properties|supports named properties=], then
        return the [=named properties object=]
        for |A|, as defined in [[#named-properties-object]].
    1.  Otherwise, if |A| is declared to inherit from another
        interface, then return the
        [=interface prototype object=]
        for the inherited interface.
    1.  Otherwise, if |A| is declared with the [{{LegacyArrayClass}}]
        extended attribute, then return [=%ArrayPrototype%=].
    1.  Otherwise, return [=%ObjectPrototype%=].
        ([[!ECMA-262]], section 15.2.4).
</ol>

<div class="note">
    
    The [=interface prototype object=]
    of an [=interface=] that is defined with
    the [{{NoInterfaceObject}}]
    [=extended attribute=]
    will be accessible if the interface is used as a
    [=supplemental interfaces|non-supplemental interface=].
    For example, with the following IDL:
    
    <pre class="idl-example example">
        [NoInterfaceObject]
        interface Foo {
        };
        
        partial interface Window {
          attribute Foo foo;
        };
    </pre>
    
    it is not possible to access the interface prototype object through
    the [=interface object=]
    (since it does not exist as <code>window.Foo</code>).  However, an instance
    of <code class="idl">Foo</code> can expose the interface prototype
    object by gettings its internal \[[Prototype]]
    property value – <code>Object.getPrototypeOf(window.foo)</code> in
    this example.
    
    If the interface is used solely as a
    [=supplemental interface=],
    then there will be no way to access its interface prototype object, since no
    object will have the interface prototype object as its internal
    \[[Prototype]] property value.  In such cases,
    it is an acceptable optimization for this object not to exist.
    
</div>

If the interface or any of its [=consequential interfaces=]
has any [=interface member=] declared with
the [{{Unscopable}}] extended attribute,
then there must be a property on the
interface prototype object whose name is the [=@@unscopables=] symbol
and whose value is an object created as follows:

<ol class="algorithm">
    1.  Let |object| be a new object created as if by the expression <code>({})</code>.
    1.  For each of the aforementioned [=interface members=]
        declared with the [{{Unscopable}}] extended attribute,
        call [=CreateDataProperty=](|object|,
        the [=identifier=] of the
        interface member, <emu-val>true</emu-val>).
    1.  Return |object|.
</ol>

The [=class string=] of an
[=interface prototype object=]
is the concatenation of the [=interface=]’s
[=identifier=] and the string
“Prototype”.


<h4 id="named-properties-object">Named properties object</h4>

For every [=interface=] declared with the
[{{Global}}] or
[{{PrimaryGlobal}}]
[=extended attribute=]
that [=support named properties|supports named properties=],
there must exist an object known as the
<dfn id="dfn-named-properties-object" export>named properties object</dfn> for that
interface.

The [=named properties object=]
for a given interface |A| must have an internal
\[[Prototype]] property whose value is returned from
the following steps:

<ol class="algorithm">
    1.  If |A| is declared to inherit from another interface, then return the
        [=interface prototype object=]
        for the inherited interface.
    1.  Otherwise, if |A| is declared with the [{{LegacyArrayClass}}]
        extended attribute, then return [=%ArrayPrototype%=].
    1.  Otherwise, return [=%ObjectPrototype%=].
</ol>

The [=class string=] of a
[=named properties object=]
is the concatenation of the [=interface=]’s
[=identifier=] and the string
“Properties”.


<h5 id="named-properties-object-getownproperty">Named properties object \[[GetOwnProperty]] method</h5>

The internal \[[GetOwnProperty]] method of every
[=named properties object=]
must behave as follows when called with object |O|
and property name |P|:

<ol class="algorithm">
    1.  Let |A| be the [=interface=] for the
        [=named properties object=] |O|.
    1.  Let |object| be the sole object from |O|’s ECMAScript global environment that implements |A|.
        
        Note: For example, if the [=interface=] is the <code class="idl">Window</code>
        interface as defined in HTML5 ([[HTML5]], section 5.2), then the sole object
        will be this global environment’s window object.
        
    1.  If the result of running the [=named property visibility algorithm=] with
        property name |P| and object |object| is true, then:
        1.  Let |operation| be the operation used to declare the named property getter.
        
        1.  Let |value| be an uninitialized variable.
        1.  If |operation| was defined without an [=identifier=], then
            set |value| to the result of performing the steps listed in the interface description to
            [=determine the value of a named property=]
            with |P| as the name.
        1.  Otherwise, |operation| was defined with an identifier.  Set |value| to the result
            of performing the steps listed in the description of |operation| with |P| as the only argument value.
        
        1.  Let |desc| be a newly created [=Property Descriptor=] with no fields.
        1.  Set |desc|.\[[Value]] to the result of [=converted to an ECMAScript value|converting=]
            |value| to an ECMAScript value.
        1.  If |A| implements an interface with the
            [{{LegacyUnenumerableNamedProperties}}]
            [=extended attribute=],
            then set |desc|.\[[Enumerable]] to <emu-val>false</emu-val>,
            otherwise set it to <emu-val>true</emu-val>.
        1.  Set |desc|.\[[Writable]] to <emu-val>true</emu-val> and
            |desc|.\[[Configurable]] to <emu-val>true</emu-val>.
        1.  Return |desc|.
    
    1.  Return the result of calling the [=default [[GetOwnProperty]] internal method=] on |O| passing |P| as the argument.
</ol>


<h5 id="named-properties-object-defineownproperty">Named properties object \[[DefineOwnProperty]] method</h5>

The internal \[[DefineOwnProperty]] method of every
[=named properties object=]
must behave as follows when called with object |O|
and property name |P|.
The term <span id="Reject">“Reject”</span> is used in the same sense as that defined in ECMA-262, namely, to mean “If |Throw| is
<emu-val>true</emu-val>, then <a lt="es throw">throw a <emu-val>TypeError</emu-val></a> exception,
otherwise return <emu-val>false</emu-val>”.

<ol class="algorithm">
    1.  <a href="#Reject">Reject</a>.
</ol>


<h5 id="named-properties-object-delete">Named properties object \[[Delete]] method</h5>

The internal \[[Delete]] method of every
[=named properties object=]
must behave as follows when called with object |O| and
property name |P|.

<ol class="algorithm">
    1.  Return <emu-val>false</emu-val>.
</ol>


<h4 id="es-constants">Constants</h4>

For each [=exposed=]
[=constant=] defined on
an [=interface=] |A|, there
must be a corresponding property.
The property has the following characteristics:

*   The name of the property is the [=identifier=] of the [=constant=].
*   The location of the property is determined as follows:
    *   If the interface was declared with the [{{Global}}] or [{{PrimaryGlobal}}] extended attribute,
        then the property exists on the single object that implements the interface.
    *   Otherwise, if the interface is a [=consequential interface=]
        of a [{{Global}}]- or [{{PrimaryGlobal}}] annotated interface, then
        the property exists on the single object that implements the [{{Global}}]- or
        [{{PrimaryGlobal}}]-annotated interface as well as on
        the consequential interface’s [=interface prototype object=].
    *   Otherwise, the property exists solely on the interface’s [=interface prototype object=].
*   The value of the property is that which is obtained by [=converted to an ECMAScript value|converting=] the [=constant=]’s IDL value to an ECMAScript value.
*   The property has attributes <span class="descriptor">{ \[[Writable]]: <emu-val>false</emu-val>, \[[Enumerable]]: <emu-val>true</emu-val>, \[[Configurable]]: <emu-val>false</emu-val> }</span>.

In addition, a property with the same characteristics must
exist on the [=interface object=], if
that object exists.


<h4 id="es-attributes">Attributes</h4>

For each [=exposed=]
[=attribute=] of the
[=interface=], whether it
was declared on the interface itself or one of its
[=consequential interfaces=],
there must exist a corresponding property.
The characteristics of this property are as follows:

*   The name of the property is the [=identifier=] of the [=attribute=].
*   The location of the property is determined as follows:
    *   If the attribute is a [=static attribute=],
        then there is a single corresponding property and it exists on the interface’s [=interface object=].
    *   Otherwise, if the attribute is [=unforgeable=] on
        the interface or if the interface was declared with the [{{Global}}] or [{{PrimaryGlobal}}] extended attribute,
        then the property exists on every object that implements the interface.
    *   Otherwise, if the interface is a [=consequential interface=]
        of a [{{Global}}]- or [{{PrimaryGlobal}}]-annotated interface, then
        the property exists on the single object that implements the [{{Global}}]- or
        [{{PrimaryGlobal}}]-annotated interface as well as on
        the consequential interface’s [=interface prototype object=].
    *   Otherwise, the property exists solely on the interface’s [=interface prototype object=].
*   The property has attributes <span class="descriptor">{ \[[Get]]: |G|, \[[Set]]: |S|, \[[Enumerable]]: <emu-val>true</emu-val>, \[[Configurable]]: |configurable| }</span>,
    where:
    *   |configurable| is <emu-val>false</emu-val> if the attribute was
        declared with the [{{Unforgeable}}] extended attribute and <emu-val>true</emu-val> otherwise;
    *   |G| is the [=attribute getter=], defined below; and
    *   |S| is the [=attribute setter=], also defined below.
*   The <dfn id="dfn-attribute-getter" export>attribute getter</dfn> is a <emu-val>Function</emu-val>
    object whose behavior when invoked is as follows:
    <ol class="algorithm">
        1.  Let |idlValue| be an IDL value determined as follows.
        1.  If the [=attribute=] is a [=regular attribute=], then:
            1.  Let |I| be the [=interface=]
                whose [=interface prototype object=]
                this property corresponding to the attribute appears on.
                
                Note: This means that even if an implements statement was used to make
                an attribute available on the interface, |I| is the interface
                on the left hand side of the implements statement, and not the one
                that the attribute was originally declared on.
                
            1.  Let |O| be the <strong>this</strong> value.
            1.  If |O| is a [=platform object=],
                then [=perform a security check=], passing:
                *   the platform object |O|,
                *   the ECMAScript global environment associated with this <emu-val>Function</emu-val> that
                    implements the [=attribute getter=],
                *   the [=identifier=] of the [=attribute=], and
                *   the type “getter”.
            1.  If |O| is not a [=platform object=] that implements |I|, then:
                1.  If the [=attribute=] was specified with the
                    [{{LenientThis}}] [=extended attribute=],
                    then return <emu-val>undefined</emu-val>.
                1.  Otherwise, <a lt="es throw">throw a <emu-val>TypeError</emu-val></a>.
            1.  Set |idlValue| to be the result of performing the actions listed in the description of the attribute that occur when getting
                (or those listed in the description of the inherited attribute, if this attribute is declared to
                [=inherit its getter=]),
                with |O| as the object.
        1.  Otherwise, the attribute is a [=static attribute=].
            Set |idlValue| to be the result of performing the actions listed in the description of the attribute that occur when getting.
        1.  Let |V| be the result of [=converted to an ECMAScript value|converting=]
            |idlValue| to an ECMAScript value.
        1.  Return |V|.
    </ol>
    
    The value of the <emu-val>Function</emu-val> object’s “length”
    property is the <emu-val>Number</emu-val> value <emu-val>0</emu-val>.
    
    The value of the <emu-val>Function</emu-val> object’s “name”
    property is a <emu-val>String</emu-val> whose value is the
    concatenation of “get ” and the identifier of the attribute.
    
*   The <dfn id="dfn-attribute-setter" export>attribute setter</dfn> is <emu-val>undefined</emu-val>
    if the attribute is declared <code>readonly</code> and does not have a
    [{{LenientThis}}], [{{PutForwards}}] or
    [{{Replaceable}}]
    [=extended attribute=] declared on it.
    Otherwise, it is a <emu-val>Function</emu-val> object whose behavior when invoked is as follows:
    <ol class="algorithm">
        1.  If no arguments were passed to the <emu-val>Function</emu-val>, then
            <a lt="es throw">throw a <emu-val>TypeError</emu-val></a>.
        1.  Let |V| be the value of the first argument passed to the <emu-val>Function</emu-val>.
        1.  If the [=attribute=] is a [=regular attribute=], then:
            1.  Let |I| be the [=interface=]
                whose [=interface prototype object=]
                this property corresponding to the attribute appears on.
            1.  Let |O| be the <strong>this</strong> value.
            1.  If |O| is a [=platform object=],
                then [=perform a security check=], passing:
                *   the platform object |O|,
                *   the ECMAScript global environment associated with this <emu-val>Function</emu-val> that
                    implements the [=attribute setter=],
                *   the [=identifier=] of the [=attribute=], and
                *   the type “setter”.
            1.  Let |validThis| be <emu-val>true</emu-val> if |O| is a
                [=platform object=] that implements |I|, or
                <emu-val>false</emu-val> otherwise.
            1.  If |validThis| is <emu-val>false</emu-val> and the
                [=attribute=] was not specified with the
                [{{LenientThis}}] [=extended attribute=],
                then <a lt="es throw">throw a <emu-val>TypeError</emu-val></a>.
            1.  If the attribute is declared with a [{{Replaceable}}]
                extended attribute, then:
                1.  Let |P| be the identifier of the attribute.
                1.  Call [=CreateDataProperty=](|O|, |P|, |V|).
                1.  Return <emu-val>undefined</emu-val>.
            1.  If |validThis| is <emu-val>false</emu-val>, then return <emu-val>undefined</emu-val>.
            1.  If the attribute is declared with a [{{LenientSetter}}]
                extended attribute, then return <emu-val>undefined</emu-val>.
            1.  If the attribute is declared with a [{{PutForwards}}]
                extended attribute, then:
                1.  Let |Q| be the result of calling the \[[Get]] method
                    on |O| using the identifier of the attribute as the property name.
                1.  If |Q| is not an object, then <a lt="es throw">throw a <emu-val>TypeError</emu-val></a>.
                1.  Let |A| be the attribute identified by the [{{PutForwards}}] extended attribute.
                1.  Call the \[[Put]] method on |Q|
                    using the identifier of |A| as the property name and |V| as the value.
                1.  Return <emu-val>undefined</emu-val>.
        1.  Let |idlValue| be an IDL value determined as follows:
            *   If the type of the attribute is an [=enumeration=], then:
                1.  Let |S| be the result of calling [=ToString=](|V|).
                1.  If |S| is not one of the [=enumeration values|enumeration’s values=], then return <emu-val>undefined</emu-val>.
                1.  The value of |idlValue| is the enumeration value equal to |S|.
            *   Otherwise, the type of the attribute is not an [=enumeration=].
                The value of |idlValue| is the result of [=converted to an IDL value|converting=]
                |V| to an IDL value.
        1.  If the attribute is a regular attribute, then perform the actions listed in the description of the attribute that occur when setting,
            with |O| as the object and |idlValue| as the value.
        1.  Otherwise, the attribute is a [=static attribute=].
            Perform the actions listed in the description of the attribute that occur when setting with |idlValue| as the value.
        1.  Return <emu-val>undefined</emu-val>.
    </ol>
    
    The value of the <emu-val>Function</emu-val> object’s “length”
    property is the <emu-val>Number</emu-val> value <emu-val>1</emu-val>.
    
    The value of the <emu-val>Function</emu-val> object’s “name”
    property is a <emu-val>String</emu-val> whose value is the
    concatenation of “set ” and the identifier of the attribute.
    
Note: Although there is only a single property for an IDL attribute, since
accessor property getters and setters are passed a <emu-val>this</emu-val>
value for the object on which property corresponding to the IDL attribute is
accessed, they are able to expose instance-specific data.

Note: Note that attempting to assign to a property corresponding to a
[=read only=] [=attribute=]
results in different behavior depending on whether the script doing so is in strict mode.
When in strict mode, such an assignment will result in a <emu-val>TypeError</emu-val>
being thrown.  When not in strict mode, the assignment attempt will be ignored.


<h4 id="es-operations">Operations</h4>

For each unique [=identifier=]
of an [=exposed=] [=operation=]
defined on the [=interface=], there
must exist a corresponding property,
unless the [=effective overload set=]
for that [=identifier=] and [=operation=]
and with an argument count of 0 has no entries.

The characteristics of this property are as follows:

*   The name of the property is the [=identifier=].
*   The location of the property is determined as follows:
    *   If the operation is [=static operations|static=], then
        the property exists on the [=interface object=].
    *   Otherwise, if the operation is [=unforgeable=] on
        the interface or if the interface was declared with the [{{Global}}] or [{{PrimaryGlobal}}] extended attribute,
        then the property exists on every object that implements the interface.
    *   Otherwise, if the interface is a [=consequential interface=]
        of a [{{Global}}]- or [{{PrimaryGlobal}}]-annotated interface, then
        the property exists on the single object that implements the [{{Global}}]- or
        [{{PrimaryGlobal}}]-annotated interface as well as on
        the consequential interface’s [=interface prototype object=].
    *   Otherwise, the property exists solely on the interface’s [=interface prototype object=].
*   The property has attributes
    <span class="descriptor">{ \[[Writable]]: |B|, \[[Enumerable]]: <emu-val>true</emu-val>, \[[Configurable]]: |B| }</span>,
    where |B| is <emu-val>false</emu-val> if the operation is
    [=unforgeable=] on the interface,
    and <emu-val>true</emu-val> otherwise.
*   The value of the property is a <emu-val>Function</emu-val> object whose
    behavior is as follows,
    assuming |id| is the
    [=identifier=],
    |arg|<sub>0..|n|−1</sub> is the list
    of argument values passed to the function:
    <ol class="algorithm">
        1.  Try running the following steps:
            1.  Let |I| be the [=interface=]
                whose [=interface prototype object=]
                (or [=interface object=], for a static
                operation) this property corresponding to the operation appears on.
                
                Note: This means that even if an implements statement was used to make
                an operation available on the interface, |I| is the interface
                on the left hand side of the implements statement, and not the one
                that the operation was originally declared on.
                
            1.  Let |O| be a value determined as follows:
                *   If the operation is a static operation, then |O| is <emu-val>null</emu-val>.
                *   Otherwise, if the [=interface=] on which the
                    [=operation=] appears has an
                    [{{ImplicitThis}}] [=extended attribute=],
                    and the <emu-val>this</emu-val> value is <emu-val>null</emu-val>
                    or <emu-val>undefined</emu-val>, then |O| is
                    the ECMAScript global object associated with the <emu-val>Function</emu-val> object.
                *   Otherwise, if the <emu-val>this</emu-val> value is not <emu-val>null</emu-val>,
                    then |O| is the <emu-val>this</emu-val> value.
                *   Otherwise, <a lt="es throw">throw a <emu-val>TypeError</emu-val></a>.
            1.  If |O| is a [=platform object=],
                then [=perform a security check=], passing:
                *   the platform object |O|,
                *   the ECMAScript global environment associated with this <emu-val>Function</emu-val> that
                    implements the [=operation=],
                *   the [=identifier=] of the [=operation=], and
                *   the type “method”.
            1.  If |O| is not <emu-val>null</emu-val> and is also not a [=platform object=]
                that implements interface |I|, <a lt="es throw">throw a <emu-val>TypeError</emu-val></a>.
            1.  Initialize |S| to the
                [=effective overload set=]
                for [=regular operations=]
                (if the operation is a regular operation) or for
                [=static operations=]
                (if the operation is a static operation) with
                [=identifier=]
                |id| on [=interface=]
                |I| and with argument count |n|.
            1.  Let &lt;|operation|, |values|&gt; be the result of passing |S| and
                |arg|<sub>0..|n|−1</sub> to the
                [=overload resolution algorithm=].
            1.  Let |R| be the result of performing (on |O|, if the operation
                is not a static operation) the actions listed in the description of
                |operation| with |values| as the argument values.
            1.  Return the result of [=converted to an ECMAScript value|converting=]
                |R| to an ECMAScript value of
                the type |op| is declared to return.
            
            And then, if an exception was thrown:
            
            1.  If the operation has a [=return type=]
                that is a <a href="#idl-promise">promise type</a>, then:
                1.  Let |reject| be the initial value of [=%Promise%=].reject.
                1.  Return the result of calling |reject| with [=%Promise%=] as the
                    <emu-val>this</emu-val> object and the exception as the single
                    argument value.
            1.  Otherwise, end these steps and allow the exception to propagate.
    </ol>
*   The value of the <emu-val>Function</emu-val> object’s “length”
    property is a <emu-val>Number</emu-val> determined as follows:
    <ol class="algorithm">
        1.  Let |S| be the
            [=effective overload set=]
            for [=regular operations=]
            (if the operation is a regular operation) or for
            [=static operations=]
            (if the operation is a static operation) with
            [=identifier=]
            |id| on [=interface=]
            |I| and with argument count 0.
        1.  Return the length of the shortest argument list of the entries in |S|.
    </ol>
*   The value of the <emu-val>Function</emu-val> object’s “name”
    property is a <emu-val>String</emu-val> whose value is the
    identifier of the operation.


<h5 id="es-stringifier">Stringifiers</h5>

If the [=interface=]
has an [=exposed=]
[=stringifier=], then
there must exist a property with
the following characteristics:

*   The name of the property is “toString”.
*   If the [=stringifier=] is
    [=unforgeable=] on the interface
    or if the interface was declared with the [{{Global}}] or [{{PrimaryGlobal}}] extended attribute,
    then the property exists on every object that implements the interface.
    Otherwise, the property exists on the [=interface prototype object=].
*   The property has attributes <span class="descriptor">{ \[[Writable]]: |B|, \[[Enumerable]]: <emu-val>true</emu-val>, \[[Configurable]]: |B| }</span>,
    where |B| is <emu-val>false</emu-val> if the stringifier is
    [=unforgeable=] on the interface,
    and <emu-val>true</emu-val> otherwise.
*   The value of the property is a <emu-val>Function</emu-val> object, which behaves as follows:
    
    <ol class="algorithm">
        1.  Let |O| be the result of calling [=ToObject=] on the <emu-val>this</emu-val> value.
        1.  If |O| is a [=platform object=],
            then [=perform a security check=], passing:
            *   the platform object |O|,
            *   the ECMAScript global environment associated with this <emu-val>Function</emu-val> that
                implements the [=stringifier=],
            *   the [=identifier=] of the [=stringifier=], and
            *   the type “method”.
        1.  If |O| is not an object that implements the [=interface=]
            on which the stringifier was declared, then <a lt="es throw">throw a <emu-val>TypeError</emu-val></a>.
        1.  Let |V| be an uninitialized variable.
        1.  Depending on where <code>stringifier</code> was specified:
            <dl class="switch">
                 :  on an [=attribute=]
                 :: Set |V| to the result of performing the actions listed in the description of the attribute that occur when getting
                    (or those listed in the description of the inherited attribute, if this attribute is declared to
                    [=inherit its getter=]),
                    with |O| as the object.
                 :  on an [=operation=] with an identifier
                 :: Set |V| to the result of performing the actions listed in the description
                    of the operation, using |O| as the <emu-val>this</emu-val> value
                    and passing no arguments.
                 :  on an [=operation=] with no identifier
                 :: Set |V| to the result of performing the [=stringification behavior=]
                    of the interface.
            </dl>
        1.  Return the result of [=converted to an ECMAScript value|converting=] |V| to a <emu-val>String</emu-val> value.
    </ol>
*   The value of the <emu-val>Function</emu-val> object’s “length”
    property is the <emu-val>Number</emu-val> value <emu-val>0</emu-val>.
*   The value of the <emu-val>Function</emu-val> object’s “name”
    property is the <emu-val>String</emu-val> value “toString”.


<h5 id="es-serializer">Serializers</h5>

If the [=interface=]
has an [=exposed=]
[=serializer=], then
a property must exist
whose name is “toJSON”,
with attributes <span class="descriptor">{ \[[Writable]]: <emu-val>true</emu-val>, \[[Enumerable]]: <emu-val>true</emu-val>, \[[Configurable]]: <emu-val>true</emu-val> }</span>
and whose value is a
<emu-val>Function</emu-val> object.

The location of the property is determined as follows:

*   If the interface was declared with the [{{Global}}] or [{{PrimaryGlobal}}] extended attribute,
    then the property exists on the single object that implements the interface.
*   Otherwise, if the interface is a [=consequential interface=]
    of a [{{Global}}]- or [{{PrimaryGlobal}}]-annotated interface, then
    the property exists on the single object that implements the [{{Global}}]- or
    [{{PrimaryGlobal}}]-annotated interface as well as on
    the consequential interface’s [=interface prototype object=].
*   Otherwise, the property exists solely on the interface’s [=interface prototype object=].

The property’s <emu-val>Function</emu-val> object, when invoked,
must behave as follows:

<ol class="algorithm">
    1.  Let |O| be the result of calling [=ToObject=] on the <emu-val>this</emu-val> value.
    1.  If |O| is a [=platform object=],
        then [=perform a security check=], passing:
        *   the platform object |O|,
        *   the ECMAScript global environment associated with this <emu-val>Function</emu-val> that
            implements the [=serializer=],
        *   the [=identifier=] of the [=serializer=], and
        *   the type “method”.
    1.  If |O| is not an object that implements the [=interface=]
        on which the serializer was declared, then <a lt="es throw">throw a <emu-val>TypeError</emu-val></a>.
    1.  Depending on how <code>serializer</code> was specified:
        <dl class="switch">
             :  on an [=operation=] with an identifier
             :: <ol class="algorithm">
                    1.  Return the result of performing the actions listed in the description of the
                        operation, using |O| as the <emu-val>this</emu-val> value
                        and passing no arguments.
                </ol>
             :  as a keyword, either with or without a [=serialization pattern=]
             :: <ol class="algorithm">
                    1.  Let |S| be the [=serialized value=] that is the result of invoking the [=serialization behavior=] of the
                        [=interface=] for object |O|.
                    1.  Return the result of [=convert a serialized value to an ECMAScript value|converting=]
                        |S| to an ECMAScript value.
                </ol>
        </dl>
</ol>

The value of the <emu-val>Function</emu-val> object’s “length”
property is the <emu-val>Number</emu-val> value <emu-val>0</emu-val>.

The value of the <emu-val>Function</emu-val> object’s “name”
property is the <emu-val>String</emu-val> value “toJSON”.

The following steps define how to <dfn id="dfn-convert-serialized-value-to-ecmascript-value" export>convert a serialized value to an ECMAScript value</dfn>:

<ol class="algorithm">
    1.  Let |S| be the [=serialized value=].
    1.  Depending on the type of |S|:
        <dl class="switch">
             :  a map
             :: <ol class="algorithm">
                    1.  Let |O| be a new object created as if by the expression <code>({})</code>.
                    1.  For each entry in |S|, in the order they were added to the map:
                        1.  Let |V| be the result of [=convert a serialized value to an ECMAScript value|converting=]
                            the value of the entry to an ECMAScript value.
                        1.  Let |P| be the entry’s key.
                        1.  Call [=CreateDataProperty=](|O|, |P|, |V|).
                    1.  Return |O|.
                </ol>
             :  a list
             :: <ol class="algorithm">
                    1.  Let |A| be a new <emu-val>Array</emu-val> object created as if by the expression <code>[]</code>.
                    1.  Let |index| be 0.
                    1.  While |index| is less than the number of elements in |S|:
                        1.  Let |V| be the result of [=convert a serialized value to an ECMAScript value|converting=]
                            the value of the element in |S| at index |index| to an ECMAScript value.
                        1.  Let |P| be [=ToString=](|index|).
                        1.  Call [=CreateDataProperty=](|O|, |P|, |V|).
                    1.  Return |A|.
                </ol>
             :  any other serialized value
             :: <ol class="algorithm">
                    1.  Let |V| be the result of [=converted to an ECMAScript value|converting=]
                        |S| to an ECMAScript value.
                    1.  Return |V|.
                </ol>
        </dl>
</ol>


<h4 id="es-iterators">Common iterator behavior</h4>


<h5 id="es-iterator">@@iterator</h5>

If the [=interface=]
has any of the following:

*   an [=iterable declaration=]
*   an [=indexed property getter=]
    and an [=integer types|integer-typed=]
    [=attribute=] named
    “length”
*   a [=maplike declaration=]
*   a [=setlike declaration=]

then a property must exist
whose name is the [=@@iterator=] symbol,
with attributes <span class="descriptor">{ \[[Writable]]: <emu-val>true</emu-val>, \[[Enumerable]]: <emu-val>false</emu-val>, \[[Configurable]]: <emu-val>true</emu-val> }</span>
and whose value is a [=function object=].

The location of the property is determined as follows:

*   If the interface was declared with the [{{Global}}] or [{{PrimaryGlobal}}] extended attribute,
    then the property exists on the single object that implements the interface.
*   Otherwise, if the interface is a [=consequential interface=]
    of a [{{Global}}]- or [{{PrimaryGlobal}}]-annotated interface, then
    the property exists on the single object that implements the [{{Global}}]- or
    [{{PrimaryGlobal}}]-annotated interface as well as on
    the consequential interface’s [=interface prototype object=].
*   Otherwise, the property exists solely on the interface’s [=interface prototype object=].

If the interface defines an [=indexed property getter=],
then the <emu-val>Function</emu-val> object is [=%ArrayProto_values%=].

If the interface has a [=pair iterator=],
then the <emu-val>Function</emu-val>, when invoked,
must behave as follows:

<ol class="algorithm">
    1.  Let |object| be the result of calling [=ToObject=] on the <emu-val>this</emu-val> value.
    1.  If |object| is a [=platform object=],
        then [=perform a security check=], passing:
        *   the platform object |object|,
        *   the ECMAScript global environment associated with this <emu-val>Function</emu-val>,
        *   the identifier “@@iterator”, and
        *   the type “method”.
    1.  Let |interface| be the [=interface=]
        the [=iterable declaration=] is on.
    1.  If |object| is not a [=platform object=]
        that implements |interface|,
        then <a lt="es throw">throw a <emu-val>TypeError</emu-val></a>.
    1.  Let |iterator| be a newly created [=default iterator object=]
        for |interface| with |object| as its target and iterator kind “key+value”.
    1.  Return |iterator|.
</ol>

If the interface has a [=maplike declaration=]
or [=setlike declaration=],
then the <emu-val>Function</emu-val> object that is the value of the [=@@iterator=] property,
when invoked, must behave as follows:

<ol class="algorithm">
    1.  Let |object| be the result of calling [=ToObject=] on the <emu-val>this</emu-val> value.
    1.  If |object| is a [=platform object=],
        then [=perform a security check=], passing:
        *   the platform object |object|,
        *   the ECMAScript global environment associated with this <emu-val>Function</emu-val>,
        *   the identifier “@@iterator”, and
        *   the type “method”.
    1.  If |object| is not a [=platform object=]
        that implements the [=interface=]
        on which the [=maplike declaration=]
        or [=setlike declaration=] is defined,
        then <a lt="es throw">throw a <emu-val>TypeError</emu-val></a>.
    1.  If the interface has a [=maplike declaration=], then:
        1.  Let |backing| be the value of the \[[BackingMap]] [=internal slot=] of |object|.
        1.  Return [=CreateMapIterator=](|backing|, <code>"key+value"</code>).
    1.  Otherwise:
        1.  Let |backing| be the value of the \[[BackingSet]] [=internal slot=] of |object|.
        1.  Return [=CreateSetIterator=](|backing|, <code>"value"</code>).
</ol>

The value of the [=@@iterator=] <emu-val>Function</emu-val> object’s “length”
property is the <emu-val>Number</emu-val> value <emu-val>0</emu-val>.

The value of the [=@@iterator=] <emu-val>Function</emu-val> object’s “name”
property is the <emu-val>String</emu-val> value “entries” if the interface has a
[=pair iterator=] or a
[=maplike declaration=] and the <emu-val>String</emu-val> “values”
if the interface has a
[=setlike declaration=].


<h5 id="es-forEach">forEach</h5>

If the [=interface=]
has any of the following:

*   an [=iterable declaration=]
*   a [=maplike declaration=]
*   a [=setlike declaration=]

then a property named “forEach” must exist
with attributes <span class="descriptor">{ \[[Writable]]: <emu-val>true</emu-val>, \[[Enumerable]]: <emu-val>true</emu-val>, \[[Configurable]]: <emu-val>true</emu-val> }</span>
and whose value is a [=function object=].

The location of the property is determined as follows:

*   If the interface was declared with the [{{Global}}] or [{{PrimaryGlobal}}] extended attribute,
    then the property exists on the single object that implements the interface.
*   Otherwise, if the interface is a [=consequential interface=]
    of a [{{Global}}]- or [{{PrimaryGlobal}}]-annotated interface, then
    the property exists on the single object that implements the [{{Global}}]- or
    [{{PrimaryGlobal}}]-annotated interface as well as on
    the consequential interface’s [=interface prototype object=].
*   Otherwise, the property exists solely on the interface’s [=interface prototype object=].

If the interface defines an [=indexed property getter=],
then the <emu-val>Function</emu-val> object is
the initial value of the “forEach” data property of [=%ArrayPrototype%=].

If the interface has a [=pair iterator=],
then the <emu-val>Function</emu-val> must
have the same behavior as one that would exist assuming the interface had
this [=operation=] instead of the
[=iterable declaration=]:

<pre class="idl-example example">void forEach(Function callback, optional any thisArg);</pre>

with the following prose definition:

<ol class="algorithm">
    1.  Let |O| be the <strong>this</strong> value.
    1.  Let |pairs| be the list of [=value pairs to iterate over=].
    1.  Let |i| be 0.
    1.  While |i| is less than the length of |pairs|:
        1.  Let |pair| be the entry in |pairs| at index |i|.
        1.  Let |key| be |pair|’s key.
        1.  Let |value| be |pair|’s value.
        1.  <a href="#es-invoking-callback-functions">Invoke</a> |callback| with |thisArg|
            (or <emu-val>undefined</emu-val>, if the argument was not supplied)
            as the [=callback this value=] and
            |value|, |key| and |O| as its arguments.
        1.  Update |pairs| to the current list of [=value pairs to iterate over=].
        1.  Set |i| to |i| + 1.
</ol>

If the interface has a [=maplike declaration=]
or [=setlike declaration=]
then the <emu-val>Function</emu-val>, when invoked,
must behave as follows:

<ol class="algorithm">
    1.  Let |object| be the result of calling [=ToObject=] on the <emu-val>this</emu-val> value.
    1.  If |object| is a [=platform object=],
        then [=perform a security check=], passing:
        *   the platform object |object|,
        *   the ECMAScript global environment associated with this <emu-val>Function</emu-val>,
        *   the identifier “forEach”, and
        *   the type “method”.
    1.  Let |interface| be the [=interface=]
        on which the [=maplike declaration=]
        or [=setlike declaration=] is declared.
    1.  If |object| is not a [=platform object=]
        that implements |interface|,
        then <a lt="es throw">throw a <emu-val>TypeError</emu-val></a>.
    1.  Let |callbackFn| be the value of the first argument passed to the function, or <emu-val>undefined</emu-val> if the argument was not supplied.
    1.  If [=IsCallable=](|callbackFn|) is <emu-val>false</emu-val>, <a lt="es throw">throw a <emu-val>TypeError</emu-val></a>.
    1.  Let |thisArg| be the value of the second argument passed to the function, or <emu-val>undefined</emu-val> if the argument was not supplied.
    1.  Let |backing| be the value of the \[[BackingMap]] [=internal slot=] of |object|,
        if the interface has a [=maplike declaration=],
        or the \[[BackingSet]] [=internal slot=] of |object| otherwise.
    1.  Let |callbackWrapper| be a <emu-val>Function</emu-val> that, when invoked, behaves as follows:
        1.  Let |v| and |k| be the first two arguments passed to the function.
        1.  Let |thisArg| be the <emu-val>this</emu-val> value.
        1.  Call the \[[Call]] internal method of |callbackFn| with |thisArg| as |thisArgument|
            and |v|, |k| and |object| as |argumentsList|.
        
        Note: The |callbackWrapper| function simply calls the incoming |callbackFn|
        with |object| as the third argument rather than its internal \[[BackingMap]] or \[[BackingSet]] object.
        
        <p class="issue">
            Can the script author observe that |callbackWrapper| might be a new function
            every time forEach is called?  What's the best way of specifying that there's only
            one function that has captured an environment?
        </p>
    1.  Let |forEach| be the result of calling the \[[Get]] internal method of
        |backing| with “forEach” and |backing| as arguments.
    1.  If [=IsCallable=](|forEach|) is <emu-val>false</emu-val>, <a lt="es throw">throw a <emu-val>TypeError</emu-val></a>.
    1.  Call the \[[Call]] internal method of |forEach| with |backing| as |thisArgument|
        and |callbackWrapper| and |thisArg| as |argumentsList|.
    1.  Return <emu-val>undefined</emu-val>.
</ol>

The value of the <emu-val>Function</emu-val> object’s “length”
property is the <emu-val>Number</emu-val> value <emu-val>1</emu-val>.

The value of the <emu-val>Function</emu-val> object’s “name”
property is the <emu-val>String</emu-val> value “forEach”.


<h4 id="es-iterable">Iterable declarations</h4>


<h5 id="es-iterable-entries">entries</h5>

If the [=interface=] has an
[=iterable declaration=],
then a property named “entries” must exist
with attributes <span class="descriptor">{ \[[Writable]]: <emu-val>true</emu-val>, \[[Enumerable]]: <emu-val>true</emu-val>, \[[Configurable]]: <emu-val>true</emu-val> }</span>
and whose value is a [=function object=].

The location of the property is determined as follows:

*   If the interface was declared with the [{{Global}}] or [{{PrimaryGlobal}}] extended attribute,
    then the property exists on the single object that implements the interface.
*   Otherwise, if the interface is a [=consequential interface=]
    of a [{{Global}}]- or [{{PrimaryGlobal}}]-annotated interface, then
    the property exists on the single object that implements the [{{Global}}]- or
    [{{PrimaryGlobal}}]-annotated interface as well as on
    the consequential interface’s [=interface prototype object=].
*   Otherwise, the property exists solely on the interface’s [=interface prototype object=].

If the interface has a [=value iterator=],
then the <emu-val>Function</emu-val> object is
the initial value of the “entries” data property of [=%ArrayPrototype%=].

If the interface has a [=pair iterator=],
then the <emu-val>Function</emu-val> object is
the value of the [=@@iterator=] property.


<h5 id="es-iterable-keys">keys</h5>

If the [=interface=] has an
[=iterable declaration=],
then a property named “keys” must exist
with attributes <span class="descriptor">{ \[[Writable]]: <emu-val>true</emu-val>, \[[Enumerable]]: <emu-val>true</emu-val>, \[[Configurable]]: <emu-val>true</emu-val> }</span>
and whose value is a [=function object=].

The location of the property is determined as follows:

*   If the interface was declared with the [{{Global}}] or [{{PrimaryGlobal}}] extended attribute,
    then the property exists on the single object that implements the interface.
*   Otherwise, if the interface is a [=consequential interface=]
    of a [{{Global}}]- or [{{PrimaryGlobal}}]-annotated interface, then
    the property exists on the single object that implements the [{{Global}}]- or
    [{{PrimaryGlobal}}]-annotated interface as well as on
    the consequential interface’s [=interface prototype object=].
*   Otherwise, the property exists solely on the interface’s [=interface prototype object=].

If the interface has a [=value iterator=],
then the <emu-val>Function</emu-val> object is
the initial value of the “keys” data property of [=%ArrayPrototype%=].

If the interface has a [=pair iterator=],
then the <emu-val>Function</emu-val>, when invoked, must behave as follows:

<ol class="algorithm">
    1.  Let |object| be the result of calling [=ToObject=] on the <emu-val>this</emu-val> value.
    1.  If |object| is a [=platform object=],
        then [=perform a security check=], passing:
        *   the platform object |object|,
        *   the ECMAScript global environment associated with this <emu-val>Function</emu-val>,
        *   the identifier “keys”, and
        *   the type “method”.
    1.  Let |interface| be the [=interface=]
        on which the [=iterable declaration=] is declared on.
    1.  If |object| is not a [=platform object=]
        that implements |interface|,
        then <a lt="es throw">throw a <emu-val>TypeError</emu-val></a>.
    1.  Let |iterator| be a newly created [=default iterator object=]
        for |interface| with |object| as its target and iterator kind “key”.
    1.  Return |iterator|.
</ol>

The value of the <emu-val>Function</emu-val> object’s “length” property is the <emu-val>Number</emu-val> value <emu-val>0</emu-val>.

The value of the <emu-val>Function</emu-val> object’s “name” property is the <emu-val>String</emu-val> value “keys”.


<h5 id="es-iterable-values">values</h5>

If the [=interface=] has an
[=iterable declaration=],
then a property named “values” must exist
with attributes <span class="descriptor">{ \[[Writable]]: <emu-val>true</emu-val>, \[[Enumerable]]: <emu-val>true</emu-val>, \[[Configurable]]: <emu-val>true</emu-val> }</span>
and whose value is a [=function object=].

The location of the property is determined as follows:

*   If the interface was declared with the [{{Global}}] or [{{PrimaryGlobal}}] extended attribute,
    then the property exists on the single object that implements the interface.
*   Otherwise, if the interface is a [=consequential interface=]
    of a [{{Global}}]- or [{{PrimaryGlobal}}]-annotated interface, then
    the property exists on the single object that implements the [{{Global}}]- or
    [{{PrimaryGlobal}}]-annotated interface as well as on
    the consequential interface’s [=interface prototype object=].
*   Otherwise, the property exists solely on the interface’s [=interface prototype object=].

If the interface has a [=value iterator=],
then the <emu-val>Function</emu-val> object is
the value of the [=@@iterator=] property.

If the interface has a [=pair iterator=],
then the <emu-val>Function</emu-val>, when invoked, must behave as follows:

<ol class="algorithm">
    1.  Let |object| be the result of calling [=ToObject=] on the <emu-val>this</emu-val> value.
    1.  If |object| is a [=platform object=],
        then [=perform a security check=], passing:
        *   the platform object |object|,
        *   the ECMAScript global environment associated with this <emu-val>Function</emu-val>,
        *   the identifier “entries”, and
        *   the type “method”.
    1.  Let |interface| be the [=interface=]
        on which the [=iterable declaration=] is declared on.
    1.  If |object| is not a [=platform object=]
        that implements |interface|,
        then <a lt="es throw">throw a <emu-val>TypeError</emu-val></a>.
    1.  Let |iterator| be a newly created [=default iterator object=]
        for |interface| with |object| as its target and iterator kind “value”.
    1.  Return |iterator|.
</ol>

The value of the <emu-val>Function</emu-val> object’s “length” property is the <emu-val>Number</emu-val> value <emu-val>0</emu-val>.

The value of the <emu-val>Function</emu-val> object’s “name” property is the <emu-val>String</emu-val> value “values”.


<h5 id="es-default-iterator-object">Default iterator objects</h5>

A <dfn id="dfn-default-iterator-object" export>default iterator object</dfn> for a given
[=interface=], target and iteration kind
is an object whose internal \[[Prototype]] property is the
[=iterator prototype object=]
for the [=interface=].

A [=default iterator object=]
has three internal values:

1.  its <em>target</em>, which is an object whose values are to be iterated,
1.  its <em>kind</em>, which is the iteration kind,
1.  its <em>index</em>, which is the current index into the values value to be iterated.

Note: Default iterator objects are only used for [=pair iterators=];
[=value iterators=], as they are currently
restricted to iterating over an object’s
[=support indexed properties|supported indexed properties=],
use standard ECMAScript Array iterator objects.

When a [=default iterator object=] is first created,
its index is set to 0.

The [=class string=] of a
[=default iterator object=]
for a given [=interface=]
is the result of concatenting the [=identifier=]
of the [=interface=] and
the string “ Iterator”.


<h5 id="es-iterator-prototype-object">Iterator prototype object</h5>

The <dfn id="dfn-iterator-prototype-object" export>iterator prototype object</dfn>
for a given [=interface=]
is an object that exists for every interface that has a
[=pair iterator=].  It serves as the
prototype for [=default iterator objects=]
for the interface.

The internal \[[Prototype]] property of an [=iterator prototype object=]
must be [=%IteratorPrototype%=].

An [=iterator prototype object=]
must have a property named “next” with
attributes <span class="descriptor">{ \[[Writable]]: <emu-val>true</emu-val>, \[[Enumerable]]: <emu-val>true</emu-val>, \[[Configurable]]: <emu-val>true</emu-val> }</span>
and whose value is a [=function object=]
that behaves as follows:

<ol class="algorithm">
    1.  Let |interface| be the [=interface=] for which the
        [=iterator prototype object=] exists.
    1.  Let |object| be the result of calling [=ToObject=] on the <emu-val>this</emu-val> value.
    1.  If |object| is a [=platform object=],
        then [=perform a security check=], passing:
        *   the platform object |object|,
        *   the ECMAScript global environment associated with this <emu-val>Function</emu-val>,
        *   the identifier “next”, and
        *   the type “method”.
    1.  If |object| is not a [=default iterator object=] for |interface|,
        then <a lt="es throw">throw a <emu-val>TypeError</emu-val></a>.
    1.  Let |target| be |object|’s target.
    1.  Let |index| be |object|’s index.
    1.  Let |kind| be |object|’s kind.
    1.  Let |values| be the list of [=value pairs to iterate over=].
    1.  Let |len| be the length of |values|.
    1.  If |object|’s index is greater than or equal to |len|, then
        return [=CreateIterResultObject=](<emu-val>undefined</emu-val>, <emu-val>true</emu-val>).
    1.  Let |pair| be the entry in |values| at index |index|.
    1.  Let |result| be a value determined by the value of |kind|:
        <dl class="switch">
             :  key
             :: <ol class="algorithm">
                    1.  Let |idlKey| be |pair|’s key.
                    1.  Let |key| be the result of [=converted to an ECMAScript value|converting=] |idlKey| to an ECMAScript value.
                    1.  |result| is |key|.
                </ol>
             :  value
             :: <ol class="algorithm">
                    1.  Let |idlValue| be |pair|’s value.
                    1.  Let |value| be the result of [=converted to an ECMAScript value|converting=] |idlValue| to an ECMAScript value.
                    1.  |result| is |value|.
                </ol>
             :  key+value
             :: <ol class="algorithm">
                    1.  Let |idlKey| be |pair|’s key.
                    1.  Let |idlValue| be |pair|’s value.
                    1.  Let |key| be the result of [=converted to an ECMAScript value|converting=] |idlKey| to an ECMAScript value.
                    1.  Let |value| be the result of [=converted to an ECMAScript value|converting=] |idlValue| to an ECMAScript value.
                    1.  Let |array| be the result of performing [=ArrayCreate=](2).
                    1.  Call [=CreateDataProperty=](|array|, "0", |key|).
                    1.  Call [=CreateDataProperty=](|array|, "1", |value|).
                    1.  |result| is |array|.
                </ol>
        </dl>
    1.  Return [=CreateIterResultObject=](|result|, <emu-val>false</emu-val>).
</ol>

The [=class string=] of an
[=iterator prototype object=]
for a given [=interface=]
is the result of concatenting the [=identifier=]
of the [=interface=] and
the string “Iterator”.


<h4 id="es-maplike">Maplike declarations</h4>

Any object that implements an [=interface=]
that has a [=maplike declaration=]
must have a \[[BackingMap]] [=internal slot=], which is
initially set to a newly created <emu-val>Map</emu-val> object.
This <emu-val>Map</emu-val> object’s \[[MapData]] internal slot is
the object’s [=map entries=].

If an [=interface=] |A| is declared with
a [=maplike declaration=], then
there exists a number of additional properties on |A|’s
[=interface prototype object=].
These additional properties are described in the sub-sections below.

Some of the properties below are defined to have a [=function object=] value
that <dfn id="dfn-forwards-to-the-internal-map-object" export>forwards to the internal map object</dfn>
for a given function name.  Such functions behave as follows when invoked:

<ol class="algorithm">
    1.  Let |O| be the <emu-val>this</emu-val> value.
    1.  Let |arguments| be the list of arguments passed to this function.
    1.  Let |name| be the function name.
    1.  If |O| is a [=platform object=],
        then [=perform a security check=], passing:
        *   the platform object |O|,
        *   the ECMAScript global environment associated with this <emu-val>Function</emu-val>,
        *   an identifier equal to |name|, and
        *   the type “method”.
    1.  If |O| is not an object that implements |A|, then <a lt="es throw">throw a <emu-val>TypeError</emu-val></a>.
    1.  Let |map| be the <emu-val>Map</emu-val> object that is the value of |O|’s \[[BackingMap]] [=internal slot=].
    1.  Let |function| be the result of calling the \[[Get]] internal method of |map| passing |name| and |map| as arguments.
    1.  If [=IsCallable=](|function|) is <emu-val>false</emu-val>, then <a lt="es throw">throw a <emu-val>TypeError</emu-val></a>.
    1.  Return the result of calling the \[[Call]] internal method of |function| with |map| as |thisArg| and |arguments| as |argumentsList|.
</ol>


<h5 id="es-map-size">size</h5>

There must exist a property named “size” on
|A|’s [=interface prototype object=]
with the following characteristics:

*   The property has attributes <span class="descriptor">{ \[[Get]]: |G|, \[[Enumerable]]: <emu-val>false</emu-val>, \[[Configurable]]: <emu-val>true</emu-val> }</span>,
    where |G| is the interface’s <dfn id="dfn-map-size-getter" export>map size getter</dfn>,
    defined below.
*   The [=map size getter=] is
    a <emu-val>Function</emu-val> object whose
    behavior when invoked is as follows:
    
    <ol class="algorithm">
        1.  Let |O| be the <emu-val>this</emu-val> value.
        1.  If |O| is a [=platform object=],
            then [=perform a security check=], passing:
            *   the platform object |O|,
            *   the ECMAScript global environment associated with this <emu-val>Function</emu-val>,
            *   the identifier “size”, and
            *   the type “getter”.
        1.  If |O| is not an object that implements |A|, then <a lt="es throw">throw a <emu-val>TypeError</emu-val></a>.
        1.  Let |map| be the <emu-val>Map</emu-val> object that is the value of |O|’s \[[BackingMap]] [=internal slot=].
        1.  Return the result of calling the \[[Get]] internal method of |map| passing “size” and |map| as arguments.
    </ol>
    
    The value of the <emu-val>Function</emu-val> object’s “length” property is the <emu-val>Number</emu-val> value <emu-val>0</emu-val>.
    
    The value of the <emu-val>Function</emu-val> object’s “name” property is the <emu-val>String</emu-val> value “size”.
    

<h5 id="es-map-entries">entries</h5>

A property named “entries” must exist on
|A|’s [=interface prototype object=]
with attributes <span class="descriptor">{ \[[Writable]]: <emu-val>true</emu-val>, \[[Enumerable]]: <emu-val>false</emu-val>, \[[Configurable]]: <emu-val>true</emu-val> }</span>
and whose value is the [=function object=] that is the value of
the [=@@iterator=] property.


<h5 id="es-map-keys-values">keys and values</h5>

For both of “keys” and “values”, there must exist a property with that name on
|A|’s [=interface prototype object=]
with the following characteristics:

*   The property has attributes <span class="descriptor">{ \[[Writable]]: <emu-val>true</emu-val>, \[[Enumerable]]: <emu-val>false</emu-val>, \[[Configurable]]: <emu-val>true</emu-val> }</span>.
*   The value of the property is a <emu-val>Function</emu-val> object that [=forwards to the internal map object|forwards that name to the internal map object=].

The value of the <emu-val>Function</emu-val> objects’ “length” properties is the <emu-val>Number</emu-val> value <emu-val>0</emu-val>.

The value of the <emu-val>Function</emu-val> object’s “name” property is the <emu-val>String</emu-val> value “keys” or “values”, correspondingly.


<h5 id="es-map-get-has">get and has</h5>

For both of “get” and “has”, there must exist a property with that name on
|A|’s [=interface prototype object=]
with the following characteristics:

*   The property has attributes <span class="descriptor">{ \[[Writable]]: <emu-val>true</emu-val>, \[[Enumerable]]: <emu-val>false</emu-val>, \[[Configurable]]: <emu-val>true</emu-val> }</span>.
*   The value of the property is a <emu-val>Function</emu-val> object that behaves as follows when invoked:
    <ol class="algorithm">
        1.  Let |O| be the <emu-val>this</emu-val> value.
        1.  Let |name| be the name of the property – “get” or “has”.
        1.  If |O| is a [=platform object=],
            then [=perform a security check=], passing:
            *   the platform object |O|,
            *   the ECMAScript global environment associated with this <emu-val>Function</emu-val>,
            *   an identifier equal to |name|, and
            *   the type “method”.
        1.  If |O| is not an object that implements |A|, then <a lt="es throw">throw a <emu-val>TypeError</emu-val></a>.
        1.  Let |map| be the <emu-val>Map</emu-val> object that is the value of |O|’s \[[BackingMap]] [=internal slot=].
        1.  Let |keyType| be the key type specified in the [=maplike declaration=].
        1.  Let |function| be the result of calling the \[[Get]] internal method of |map| passing |name| and |map| as arguments.
        1.  Let |keyArg| be the first argument passed to this function, or <emu-val>undefined</emu-val> if not supplied.
        1.  Let |keyIDL| be the result of [=converted to an IDL value|converting=] |keyArg| to an IDL value of type |keyType|.
        1.  Let |key| be the result of [=converted to ECMAScript values|converting=] |keyIDL| to an ECMAScript value.
        1.  Return the result of calling the \[[Call]] internal method of |function| with |map| as |thisArg| and the single value |key| as |argumentsList|.
    </ol>

The value of the <emu-val>Function</emu-val> objects’ “length” properties is the <emu-val>Number</emu-val> value <emu-val>1</emu-val>.

The value of the <emu-val>Function</emu-val> object’s “name” property is the <emu-val>String</emu-val> value “get” or “has”, correspondingly.


<h5 id="es-map-clear">clear</h5>

If |A| and |A|’s
[=consequential interfaces=]
do not declare an [=interface member=]
with identifier “clear”, and
|A| was declared with a read–write maplike declaration,
then a property named “clear” and the following characteristics
must exist on |A|’s
[=interface prototype object=]:

*   The property has attributes <span class="descriptor">{ \[[Writable]]: <emu-val>true</emu-val>, \[[Enumerable]]: <emu-val>false</emu-val>, \[[Configurable]]: <emu-val>true</emu-val> }</span>.
*   The value of the property is a <emu-val>Function</emu-val> object that [=forwards to the internal map object|forwards “clear” to the internal map object=].

The value of the <emu-val>Function</emu-val> object’s “length” property is the <emu-val>Number</emu-val> value <emu-val>0</emu-val>.

The value of the <emu-val>Function</emu-val> object’s “name” property is the <emu-val>String</emu-val> value “clear”.


<h5 id="es-map-delete">delete</h5>

If |A| and |A|’s
[=consequential interfaces=]
do not declare an [=interface member=]
with identifier “delete”, and
|A| was declared with a read–write maplike declaration,
then a property named “delete” and the following characteristics
must exist on |A|’s
[=interface prototype object=]:

*   The property has attributes <span class="descriptor">{ \[[Writable]]: <emu-val>true</emu-val>, \[[Enumerable]]: <emu-val>false</emu-val>, \[[Configurable]]: <emu-val>true</emu-val> }</span>.
*   The value of the property is a <emu-val>Function</emu-val> object that behaves as follows when invoked:
    <ol class="algorithm">
        1.  Let |O| be the <emu-val>this</emu-val> value.
        1.  If |O| is a [=platform object=],
            then [=perform a security check=], passing:
            *   the platform object |O|,
            *   the ECMAScript global environment associated with this <emu-val>Function</emu-val>,
            *   the identifier “delete”, and
            *   the type “method”.
        1.  If |O| is not an object that implements |A|, then <a lt="es throw">throw a <emu-val>TypeError</emu-val></a>.
        1.  Let |map| be the <emu-val>Map</emu-val> object that is the value of |O|’s \[[BackingMap]] [=internal slot=].
        1.  Let |keyType| be the key type specified in the [=maplike declaration=].
        1.  Let |function| be the result of calling the \[[Get]] internal method of |map| passing “delete” and |map| as arguments.
        1.  Let |keyArg| be the first argument passed to this function, or <emu-val>undefined</emu-val> if not supplied.
        1.  Let |keyIDL| be the result of [=converted to an IDL value|converting=] |keyArg| to an IDL value of type |keyType|.
        1.  Let |key| be the result of [=converted to ECMAScript values|converting=] |keyIDL| to an ECMAScript value.
        1.  Return the result of calling the \[[Call]] internal method of |function| with |map| as |thisArg| and the single value |key| as |argumentsList|.
    </ol>

The value of the <emu-val>Function</emu-val> object’s “length” property is the <emu-val>Number</emu-val> value <emu-val>1</emu-val>.

The value of the <emu-val>Function</emu-val> object’s “name” property is the <emu-val>String</emu-val> value “delete”.


<h5 id="es-map-set">set</h5>

If |A| and |A|’s
[=consequential interfaces=]
do not declare an [=interface member=]
with identifier “set”, and
|A| was declared with a read–write maplike declaration,
then a property named “set” and the following characteristics
must exist on |A|’s
[=interface prototype object=]:

*   The property has attributes <span class="descriptor">{ \[[Writable]]: <emu-val>true</emu-val>, \[[Enumerable]]: <emu-val>false</emu-val>, \[[Configurable]]: <emu-val>true</emu-val> }</span>.
*   The value of the property is a <emu-val>Function</emu-val> object that behaves as follows when invoked:
    <ol class="algorithm">
        1.  Let |O| be the <emu-val>this</emu-val> value.
        1.  If |O| is a [=platform object=],
            then [=perform a security check=], passing:
            *   the platform object |O|,
            *   the ECMAScript global environment associated with this <emu-val>Function</emu-val>,
            *   the identifier “set”, and
            *   the type “method”.
        1.  If |O| is not an object that implements |A|, then <a lt="es throw">throw a <emu-val>TypeError</emu-val></a>.
        1.  Let |map| be the <emu-val>Map</emu-val> object that is the value of |O|’s \[[BackingMap]] [=internal slot=].
        1.  Let |keyType| and |valueType| be the key and value types specified in the [=maplike declaration=].
        1.  Let |function| be the result of calling the \[[Get]] internal method of |map| passing “set” and |map| as arguments.
        1.  Let |keyArg| be the first argument passed to this function, or <emu-val>undefined</emu-val> if not supplied.
        1.  Let |valueArg| be the second argument passed to this function, or <emu-val>undefined</emu-val> if not supplied.
        1.  Let |keyIDL| be the result of [=converted to an IDL value|converting=] |keyArg| to an IDL value of type |keyType|.
        1.  Let |valueIDL| be the result of [=converted to an IDL value|converting=] |valueArg| to an IDL value of type |valueType|.
        1.  Let |key| be the result of [=converted to ECMAScript values|converting=] |keyIDL| to an ECMAScript value.
        1.  Let |value| be the result of [=converted to ECMAScript values|converting=] |valueIDL| to an ECMAScript value.
        1.  Let |result| be the result of calling the \[[Call]] internal method of |function| with |map| as |thisArg| and |key| and |value| as |argumentsList|.
        1.  Assert: |result| is not an abrupt completion.
        1.  Return |O|.
    </ol>

The value of the <emu-val>Function</emu-val> object’s “length” property is the <emu-val>Number</emu-val> value <emu-val>2</emu-val>.

The value of the <emu-val>Function</emu-val> object’s “name” property is the <emu-val>String</emu-val> value “set”.


<h4 id="es-setlike">Setlike declarations</h4>

Any object that implements an [=interface=]
that has a [=setlike declaration=]
must have a \[[BackingSet]] [=internal slot=], which is
initially set to a newly created <emu-val>Set</emu-val> object.
This <emu-val>Set</emu-val> object’s \[[SetData]] internal slot is
the object’s [=set entries=].

If an [=interface=] |A| is declared with
a [=setlike declaration=], then
there exists a number of additional properties on |A|’s
[=interface prototype object=].
These additional properties are described in the sub-sections below.

Some of the properties below are defined to have a [=function object=] value
that <dfn id="dfn-forwards-to-the-internal-set-object" export>forwards to the internal set object</dfn>
for a given function name.  Such functions behave as follows when invoked:

<ol class="algorithm">
    1.  Let |O| be the <emu-val>this</emu-val> value.
    1.  Let |arguments| be the list of arguments passed to this function.
    1.  Let |name| be the function name.
    1.  If |O| is a [=platform object=],
        then [=perform a security check=], passing:
        *   the platform object |O|,
        *   the ECMAScript global environment associated with this <emu-val>Function</emu-val>,
        *   an identifier equal to |name|, and
        *   the type “method”.
    1.  If |O| is not an object that implements |A|, then <a lt="es throw">throw a <emu-val>TypeError</emu-val></a>.
    1.  Let |set| be the <emu-val>Set</emu-val> object that is the value of |O|’s \[[BackingSet]] [=internal slot=].
    1.  Let |function| be the result of calling the \[[Get]] internal method of |set| passing |name| and |set| as arguments.
    1.  If [=IsCallable=](|function|) is <emu-val>false</emu-val>, then <a lt="es throw">throw a <emu-val>TypeError</emu-val></a>.
    1.  Return the result of calling the \[[Call]] internal method of |function| with |set| as |thisArg| and |arguments| as |argumentsList|.
</ol>


<h5 id="es-set-size">size</h5>

There must exist a property named “size” on
|A|’s [=interface prototype object=]
with the following characteristics:

*   The property has attributes <span class="descriptor">{ \[[Get]]: |G|, \[[Enumerable]]: <emu-val>false</emu-val>, \[[Configurable]]: <emu-val>true</emu-val> }</span>,
    where |G| is the interface’s <dfn id="dfn-set-size-getter" export>set size getter</dfn>,
    defined below.
*   The [=set size getter=] is
    a <emu-val>Function</emu-val> object whose
    behavior when invoked is as follows:
    
    <ol class="algorithm">
        1.  Let |O| be the <emu-val>this</emu-val> value.
        1.  If |O| is a [=platform object=],
            then [=perform a security check=], passing:
            *   the platform object |O|,
            *   the ECMAScript global environment associated with this <emu-val>Function</emu-val>,
            *   the identifier “size”, and
            *   the type “getter”.
        1.  If |O| is not an object that implements |A|, then <a lt="es throw">throw a <emu-val>TypeError</emu-val></a>.
        1.  Let |set| be the <emu-val>Set</emu-val> object that is the value of |O|’s \[[BackingSet]] [=internal slot=].
        1.  Return the result of calling the \[[Get]] internal method of |set| passing “size” and |set| as arguments.
    </ol>
    
    The value of the <emu-val>Function</emu-val> object’s “length” property is the <emu-val>Number</emu-val> value <emu-val>0</emu-val>.
    
    The value of the <emu-val>Function</emu-val> object’s “name” property is the <emu-val>String</emu-val> value “size”.
    

<h5 id="es-set-values">values</h5>

A property named “values” must exist on
|A|’s [=interface prototype object=]
with attributes <span class="descriptor">{ \[[Writable]]: <emu-val>true</emu-val>, \[[Enumerable]]: <emu-val>false</emu-val>, \[[Configurable]]: <emu-val>true</emu-val> }</span>
and whose value is the [=function object=] that is the value of
the [=@@iterator=] property.


<h5 id="es-set-entries-keys">entries and keys</h5>

For both of “entries” and “keys”, there must exist a property with that name on
|A|’s [=interface prototype object=]
with the following characteristics:

*   The property has attributes <span class="descriptor">{ \[[Writable]]: <emu-val>true</emu-val>, \[[Enumerable]]: <emu-val>false</emu-val>, \[[Configurable]]: <emu-val>true</emu-val> }</span>.
*   The value of the property is a <emu-val>Function</emu-val> object that [=forwards to the internal set object|forwards that name to the internal set object=].

The value of the <emu-val>Function</emu-val> objects’ “length” properties is the <emu-val>Number</emu-val> value <emu-val>0</emu-val>.

The value of the <emu-val>Function</emu-val> object’s “name” property is the <emu-val>String</emu-val> value “entries” or “keys”, correspondingly.


<h5 id="es-set-has">has</h5>

There must exist a property with named “has” on
|A|’s [=interface prototype object=]
with the following characteristics:

*   The property has attributes <span class="descriptor">{ \[[Writable]]: <emu-val>true</emu-val>, \[[Enumerable]]: <emu-val>false</emu-val>, \[[Configurable]]: <emu-val>true</emu-val> }</span>.
*   The value of the property is a <emu-val>Function</emu-val> object that behaves as follows when invoked:
    <ol class="algorithm">
        1.  Let |O| be the <emu-val>this</emu-val> value.
        1.  If |O| is a [=platform object=],
            then [=perform a security check=], passing:
            *   the platform object |O|,
            *   the ECMAScript global environment associated with this <emu-val>Function</emu-val>,
            *   the identifier “has”, and
            *   the type “method”.
        1.  If |O| is not an object that implements |A|, then <a lt="es throw">throw a <emu-val>TypeError</emu-val></a>.
        1.  Let |set| be the <emu-val>Set</emu-val> object that is the value of |O|’s \[[BackingSet]] [=internal slot=].
        1.  Let |type| be the value type specified in the [=setlike declaration=].
        1.  Let |function| be the result of calling the \[[Get]] internal method of |set| passing “has” and |set| as arguments.
        1.  Let |arg| be the first argument passed to this function, or <emu-val>undefined</emu-val> if not supplied.
        1.  Let |idlValue| be the result of [=converted to an IDL value|converting=] |arg| to an IDL value of type |type|.
        1.  Let |value| be the result of [=converted to ECMAScript values|converting=] |idlValue| to an ECMAScript value.
        1.  Return the result of calling the \[[Call]] internal method of |function| with |set| as |thisArg| and the single value |value| as |argumentsList|.
    </ol>

The value of the <emu-val>Function</emu-val> object’s “length” property is a <emu-val>Number</emu-val> value <emu-val>1</emu-val>.

The value of the <emu-val>Function</emu-val> object’s “name” property is the <emu-val>String</emu-val> value “has”.


<h5 id="es-add-delete">add and delete</h5>

For both of “add” and “delete”, if:

*   |A| and |A|’s
    [=consequential interfaces=]
    do not declare an [=interface member=]
    with a matching identifier, and
*   |A| was declared with a read–write setlike declaration,

then a property with that name and the following characteristics
must exist on |A|’s
[=interface prototype object=]:

*   The property has attributes <span class="descriptor">{ \[[Writable]]: <emu-val>true</emu-val>, \[[Enumerable]]: <emu-val>false</emu-val>, \[[Configurable]]: <emu-val>true</emu-val> }</span>.
*   The value of the property is a <emu-val>Function</emu-val> object that behaves as follows when invoked:
    <ol class="algorithm">
        1.  Let |O| be the <emu-val>this</emu-val> value.
        1.  Let |name| be the name of the property – “add” or “delete”.
        1.  If |O| is a [=platform object=],
            then [=perform a security check=], passing:
            *   the platform object |O|,
            *   the ECMAScript global environment associated with this <emu-val>Function</emu-val>,
            *   an identifier equal to |name|, and
            *   the type “method”.
        1.  If |O| is not an object that implements |A|, then <a lt="es throw">throw a <emu-val>TypeError</emu-val></a>.
        1.  Let |set| be the <emu-val>Set</emu-val> object that is the value of |O|’s \[[BackingSet]] [=internal slot=].
        1.  Let |type| be the value type specified in the [=setlike declaration=].
        1.  Let |function| be the result of calling the \[[Get]] internal method of |set| passing |name| and |set| as arguments.
        1.  Let |arg| be the first argument passed to this function, or <emu-val>undefined</emu-val> if not supplied.
        1.  Let |idlValue| be the result of [=converted to an IDL value|converting=] |arg| to an IDL value of type |type|.
        1.  Let |value| be the result of [=converted to ECMAScript values|converting=] |idlValue| to an ECMAScript value.
        1.  Let |result| be the result of calling the \[[Call]] internal method of |function| with |set| as |thisArg| and the single value |value| as |argumentsList|.
        1.  Assert: |result| is not an abrupt completion.
        1.  If |name| is "delete", then:
            1.  Return |result|.
        1.  Otherwise:
            1.  Return |O|.
    </ol>

The value of the <emu-val>Function</emu-val> object’s “length” property is the <emu-val>Number</emu-val> value <emu-val>1</emu-val>.

The value of the <emu-val>Function</emu-val> object’s “name” property is the <emu-val>String</emu-val> value “add” or “delete”, correspondingly.


<h5 id="es-set-clear">clear</h5>

If |A| and |A|’s
[=consequential interfaces=]
do not declare an [=interface member=]
with a matching identifier, and
|A| was declared with a read–write setlike declaration,
then a property named “clear” and the following characteristics
must exist on |A|’s
[=interface prototype object=]:

*   The property has attributes <span class="descriptor">{ \[[Writable]]: <emu-val>true</emu-val>, \[[Enumerable]]: <emu-val>false</emu-val>, \[[Configurable]]: <emu-val>true</emu-val> }</span>.
*   The value of the property is a <emu-val>Function</emu-val> object that [=forwards to the internal set object|forwards “clear” to the internal set object=].

The value of the <emu-val>Function</emu-val> object’s “length” property is the <emu-val>Number</emu-val> value <emu-val>0</emu-val>.

The value of the <emu-val>Function</emu-val> object’s “name” property is the <emu-val>String</emu-val> value “clear”.


<h4 id="initializing-objects-from-iterables">Initializing objects from iterables</h4>

Some objects, which are attempting to emulate map- and set-like interfaces, will want to accept iterables
as constructor parameters and initialize themselves in this way. Here we provide some algorithms that can
be invoked in order to do so in the same way as in the ECMAScript spec, so that those objects behave
the same as the built-in <emu-val>Map</emu-val> and <emu-val>Set</emu-val> objects.

To <dfn id="add-map-elements-from-iterable" export>add map elements from an iterable</dfn> |iterable| to
an object |destination| with adder method name |adder|, perform the following steps:

<ol class="algorithm">
    1.  If [=Type=](|destination|) is not Object, then, <a lt="es throw">throw a <emu-val>TypeError</emu-val></a>.
    1.  If |iterable| is not present, let |iterable| be <emu-val>undefined</emu-val>.
    1.  If |iterable| is either <emu-val>undefined</emu-val> or <emu-val>null</emu-val>, then let |iter| be <emu-val>undefined</emu-val>.
    1.  Else,
        1.  Let |adder| be the result of [=Get=](|destination|, |adder|).
        1.  [=ReturnIfAbrupt=](|adder|).
        1.  If [=IsCallable=](|adder|) is <emu-val>false</emu-val>, <a lt="es throw">throw a <emu-val>TypeError</emu-val></a>.
        1.  Let |iter| be the result of [=GetIterator=](|iterable|).
        1.  [=ReturnIfAbrupt=](|iter|).
    1.  If |iter| is <emu-val>undefined</emu-val>, then return.
    1.  Repeat
        1.  Let |next| be the result of [=IteratorStep=](|iter|).
        1.  [=ReturnIfAbrupt=](|next|).
        1.  If |next| is <emu-val>false</emu-val>, then return [=NormalCompletion=](|destination|).
        1.  Let |nextItem| be [=IteratorValue=](|next|).
        1.  [=ReturnIfAbrupt=](|nextItem|).
        1.  If [=Type=](|nextItem|) is not Object, then <a lt="es throw">throw a <emu-val>TypeError</emu-val></a>.
        1.  Let |k| be the result of [=Get=](|nextItem|, <code>'0'</code>).
        1.  [=ReturnIfAbrupt=](|k|).
        1.  Let |v| be the result of [=Get=](|nextItem|, <code>'1'</code>).
        1.  [=ReturnIfAbrupt=](|v|).
        1.  Let |status| be the result of calling the \[[Call]] internal method of |adder| with |destination| as
            |thisArgument| and (|k|, |v|) as |argumentsList|.
        1.  [=ReturnIfAbrupt=](|status|).
</ol>


<h3 id="es-implements-statements">Implements statements</h3>

The [=interface prototype object=]
of an interface |A| must have a copy of
each property that corresponds to one of the
[=constants=],
[=attributes=],
[=operations=],
[=iterable declarations=],
[=maplike declarations=] and
[=setlike declarations=]
that exist on all of the interface prototype objects of |A|’s
[=consequential interfaces=].
For operations, where the property is a data property with a <emu-val>Function</emu-val>
object value, each copy of the property must have
distinct <emu-val>Function</emu-val> objects.  For attributes, each
copy of the accessor property must have
distinct <emu-val>Function</emu-val> objects for their getters,
and similarly with their setters.

<div class="note">
    
    When invoking an [=operation=] by calling
    a <emu-val>Function</emu-val> object that is the value of one of the copies that exists
    due to an implements statement, the <emu-val>this</emu-val> value is
    checked to ensure that it is an object that implements the
    [=interface=] corresponding to the
    [=interface prototype object=]
    that the property is on.
    
    For example, consider the following IDL:
    
    <pre class="idl-example example">
        interface A {
          void f();
        };
        
        interface B { };
        B implements A;
        
        interface C { };
        C implements A;
    </pre>
    
    Attempting to call <code>B.prototype.f</code> on an object that implements
    <code class="idl">A</code> (but not <code class="idl">B</code>) or one
    that implements <code class="idl">C</code> will result in a
    {{TypeError}} being thrown.  However,
    calling <code>A.prototype.f</code> on an object that implements
    <code class="idl">B</code> or one that implements <code class="idl">C</code>
    would succeed.  This is handled by the algorithm in [[#es-operations]]
    that defines how IDL operation invocation works in ECMAScript.
    
    Similar behavior is required for the getter and setter <emu-val>Function</emu-val>
    objects that correspond to an IDL [=attributes=],
    and this is handled in [[#es-attributes]].
    
</div>


<h3 id="es-platform-objects">Platform objects implementing interfaces</h3>

Every [=platform object=] is associated with a global environment, just
as the [=initial objects=] are.
It is the responsibility of specifications using Web IDL to state
which global environment (or, by proxy, which global object) each platform
object is associated with.

The <dfn id="dfn-primary-interface" export>primary interface</dfn> of a platform object
that implements one or more interfaces is the most-derived [=supplemental interfaces|non-supplemental interface=]
that it implements.  The value of the internal \[[Prototype]]
property of the platform object is the [=interface prototype object=]
of the [=primary interface=]
from the [=platform object=]’s associated global environment.

The global environment that a given [=platform object=]
is associated with can <dfn id="dfn-change-global-environment" for="global environment" export>change</dfn> after it has been created.  When
the global environment associated with a platform object is changed, its internal
\[[Prototype]] property must be immediately
updated to be the [=interface prototype object=]
of the [=primary interface=]
from the [=platform object=]’s newly associated global environment.

Every platform object that implements an [{{Unforgeable}}]-annotated
interface and which does not have a [=stringifier=]
that is [=unforgeable=] on any of the
interfaces it implements must have a property with the
following characteristics:

*   The name of the property is “toString”.
*   The property has attributes <span class="descriptor">{ \[[Writable]]: <emu-val>false</emu-val>, \[[Enumerable]]: <emu-val>true</emu-val>, \[[Configurable]]: <emu-val>false</emu-val> }</span>.
*   The value of the property is [=%ObjProto_toString%=], the initial value of Object.prototype.toString.

Every platform object that implements an [{{Unforgeable}}]-annotated
interface and which does not have a [=serializer=]
that is [=unforgeable=] on any of the
interfaces it implements must have a property with the
following characteristics:

*   The name of the property is “toJSON”.
*   The property has attributes <span class="descriptor">{ \[[Writable]]: <emu-val>false</emu-val>, \[[Enumerable]]: <emu-val>true</emu-val>, \[[Configurable]]: <emu-val>false</emu-val> }</span>.
*   The value of the property is <emu-val>undefined</emu-val>.

Every platform object that implements an [{{Unforgeable}}]-annotated
interface must have a property with the
following characteristics:

*   The name of the property is “valueOf”.
*   The property has attributes <span class="descriptor">{ \[[Writable]]: <emu-val>false</emu-val>, \[[Enumerable]]: <emu-val>true</emu-val>, \[[Configurable]]: <emu-val>false</emu-val> }</span>.
*   The value of the property is a <emu-val>Function</emu-val> object whose behavior
    is as follows:
    <ol class="algorithm">
        1.  Return the <emu-val>this</emu-val> value.
    </ol>
    
    This <emu-val>Function</emu-val> object is the
    <dfn id="dfn-default-unforgeable-valueOf-function" export>default unforgeable valueOf function</dfn>.
*   The value of the <emu-val>Function</emu-val> object’s “length”
    property is the <emu-val>Number</emu-val> value <emu-val>0</emu-val>.
*   The value of the <emu-val>Function</emu-val> object’s “name” property is the
    <emu-val>String</emu-val> value “valueOf”.

The [=class string=] of
a platform object that implements one or more interfaces
must be the [=identifier=] of
the [=primary interface=]
of the platform object.


<h4 id="indexed-and-named-properties">Indexed and named properties</h4>

If a [=platform object=] implements an [=interface=] that
[=support indexed properties|supports indexed=] or
[=support named properties|named properties=],
the object will appear to have additional properties that correspond to the
object’s indexed and named properties.  These properties are not “real” own
properties on the object, but are made to look like they are by being exposed
by the \[[GetOwnProperty]] internal method.

However, when the [{{Global}}] or
[{{PrimaryGlobal}}]
[=extended attribute=] has been used,
named properties are not exposed on the object but on another object
in the prototype chain, the [=named properties object=].

It is permissible for an object to implement multiple interfaces that support indexed properties.
However, if so, and there are conflicting definitions as to the object’s
[=supported property indices=],
or if one of the interfaces is a [=supplemental interface=] for the
platform object, then it is undefined what additional properties the object will appear to
have, or what its exact behavior will be with regard to its indexed properties.
The same applies for named properties.

The [=indexed property getter=]
that is defined on the derived-most interface that the
platform object implements is the one that defines the behavior
when indexing the object with an array index.  Similarly for
[=indexed property setters=].
This way, the definitions of these special operations from
ancestor interfaces can be overridden.

Platform objects implementing an interface that supports indexed or named properties cannot be fixed; if <code>Object.freeze</code>, <code>Object.seal</code>
or <code>Object.preventExtensions</code> is called on one of these objects, the function
must <a lt="es throw">throw a <emu-val>TypeError</emu-val></a>.
Similarly, an [=interface prototype object=]
that exposes named properties due to the use of [{{Global}}] or
[{{PrimaryGlobal}}]
also must <a lt="es throw">throw a <emu-val>TypeError</emu-val></a>
if one of the three functions above is called on it.

The name of each property that appears to exist due to an object supporting indexed properties
is an <dfn id="dfn-array-index-property-name" export>array index property name</dfn>, which is a property
name |P| such that [=Type=](|P|) is String
and for which the following algorithm returns <emu-val>true</emu-val>:

<ol class="algorithm">
    1.  Let |i| be [=ToUint32=](|P|).
    1.  Let |s| be [=ToString=](|i|).
    1.  If |s| ≠ |P| or |i| = 2<sup>32</sup> − 1, then return <emu-val>false</emu-val>.
    1.  Return <emu-val>true</emu-val>.
</ol>

A property name is an <dfn id="dfn-unforgeable-property-name" export>unforgeable property name</dfn> on a
given platform object if the object implements an [=interface=] that
has an [=interface member=] with that identifier
and that interface member is [=unforgeable=] on any of
the interfaces that |O| implements.  If the object implements an
[{{Unforgeable}}]-annotated
[=interface=], then “toString” and “valueOf” are
also [=unforgeable property names=]
on that object.

The <dfn id="dfn-named-property-visibility" export>named property visibility algorithm</dfn> is used to determine if
a given named property is exposed on an object.  Some named properties are not exposed on an object
depending on whether the [{{OverrideBuiltins}}]
[=extended attribute=] was used.  The algorithm
operates as follows, with property name |P| and object |O|:

<ol class="algorithm">
    1.  If |P| is an [=unforgeable property name=]
        on |O|, then return false.
    1.  If |O| implements an [=interface=] with
        an [{{Unforgeable}}]-annotated [=attribute=]
        whose [=identifier=] is |P|, then return false.
    1.  If |P| is not a [=supported property name=]
        of |O|, then return false.
    1.  If |O| implements an interface that has the [{{OverrideBuiltins}}]
        [=extended attribute=], then return true.
    1.  If |O| has an own property named |P|, then return false.
    1.  Initialize |prototype| to be the value of the internal \[[Prototype]] property of |O|.
    1.  While |prototype| is not null:
        1.  If |prototype| is not a [=named properties object=],
            and |prototype| has an own property named |P|, then return false.
        1.  Set |prototype| to be the value of the internal \[[Prototype]] property of |prototype|.
    1.  Return true.
</ol>

<div class="note">
    
    This should ensure that for objects with named properties, property resolution is done in the following order:
    
    1.  Indexed properties.
    1.  Unforgeable attributes and operations.
    1.  Then, if [{{OverrideBuiltins}}]:
        1.  Named properties.
        1.  Own properties.
        1.  Properties from the prototype chain.
    1.  Otherwise, if not [{{OverrideBuiltins}}]:
        1.  Own properties.
        
        1.  Properties from the prototype chain.
        
        1.  Named properties.
    
</div>

Support for [=getters=] is
handled by the <a href="#getownproperty">platform object \[[GetOwnProperty]] method</a>
defined in section [[#getownproperty]], and
for [=setters=]
by the <a href="#defineownproperty">platform object \[[DefineOwnProperty]] method</a>
defined in section [[#defineownproperty]] and the <a href="#platformobjectset">platform object \[[Set]] method</a>
defined in section [[#platformobjectset]].


<h4 id="getownproperty-guts" dfn>The PlatformObjectGetOwnProperty abstract operation</h4>

The \PlatformObjectGetOwnProperty
abstract operation performs the following steps when called with an
object |O|, a property name |P|, and a boolean
|ignoreNamedProps| value:

<ol class="algorithm">
    1.  If |O| [=support indexed properties|supports indexed properties=]
        and |P| is an [=array index property name=], then:
        1.  Let |index| be the result of calling [=ToUint32=](|P|).
        1.  If |index| is a [=supported property indices|supported property index=], then:
            1.  Let |operation| be the operation used to declare the indexed property getter.
            
            1.  Let |value| be an uninitialized variable.
            1.  If |operation| was defined without an [=identifier=], then
                set |value| to the result of performing the steps listed in the interface description to
                [=determine the value of an indexed property=]
                with |index| as the index.
            1.  Otherwise, |operation| was defined with an identifier.  Set |value| to the result
                of performing the steps listed in the description of |operation| with |index| as the only argument value.
            
            1.  Let |desc| be a newly created [=Property Descriptor=] with no fields.
            1.  Set |desc|.\[[Value]] to the result of [=converted to an ECMAScript value|converting=]
                |value| to an ECMAScript value.
            1.  If |O| implements an interface with an [=indexed property setter=], then set
                |desc|.\[[Writable]] to <emu-val>true</emu-val>, otherwise set it to
                <emu-val>false</emu-val>.
            1.  Set |desc|.\[[Enumerable]] and |desc|.\[[Configurable]] to <emu-val>true</emu-val>.
            1.  Return |desc|.
        1.  Set |ignoreNamedProps| to true.
    
    1.  If |O| [=support named properties|supports named properties=], |O| does not
        implement an [=interface=] with the [{{Global}}] or [{{PrimaryGlobal}}]
        [=extended attribute=], the result of running the [=named property visibility algorithm=] with
        property name |P| and object |O| is true, and |ignoreNamedProps| is false, then:
        1.  Let |operation| be the operation used to declare the named property getter.
        
        1.  Let |value| be an uninitialized variable.
        1.  If |operation| was defined without an [=identifier=], then
            set |value| to the result of performing the steps listed in the interface description to
            [=determine the value of a named property=]
            with |P| as the name.
        1.  Otherwise, |operation| was defined with an identifier.  Set |value| to the result
            of performing the steps listed in the description of |operation| with |P| as the only argument value.
        
        1.  Let |desc| be a newly created [=Property Descriptor=] with no fields.
        1.  Set |desc|.\[[Value]] to the result of [=converted to an ECMAScript value|converting=]
            |value| to an ECMAScript value.
        1.  If |O| implements an interface with a [=named property setter=], then set
            |desc|.\[[Writable]] to <emu-val>true</emu-val>, otherwise set it to
            <emu-val>false</emu-val>.
        1.  If |O| implements an interface with the
            [{{LegacyUnenumerableNamedProperties}}]
            [=extended attribute=],
            then set |desc|.\[[Enumerable]] to <emu-val>false</emu-val>,
            otherwise set it to <emu-val>true</emu-val>.
        1.  Set |desc|.\[[Configurable]] to <emu-val>true</emu-val>.
        1.  Return |desc|.
    
    1.  Return the result of calling the [=default [[GetOwnProperty]] internal method=] on |O| passing |P| as the argument.
</ol>


<h4 id="getownproperty">Platform object \[[GetOwnProperty]] method</h4>

The internal \[[GetOwnProperty]] method of every
[=platform object=] |O| that implements an [=interface=]
which [=support indexed properties|supports indexed=] or
[=support named properties|named properties=]
must behave as follows when called with property name |P|:

<ol class="algorithm">
    1.  Return the result of invoking the [=The PlatformObjectGetOwnProperty abstract operation|PlatformObjectGetOwnProperty=]
        abstract operation with
        |O|, |P|, and <emu-val>false</emu-val> as
        arguments.
</ol>


<h4 id="invoking-indexed-setter">Invoking a platform object indexed property setter</h4>

To <dfn id="invoke-indexed-setter" export lt="invoke the indexed property setter">invoke an indexed property setter</dfn> with property name |P| and ECMAScript value
|V|, the following steps must be performed:

<ol class="algorithm">
    1.  Let |index| be the result of calling [=ToUint32=](|P|).
    1.  Let |creating| be true if |index| is not a [=supported property indices|supported property index=], and false otherwise.
    1.  Let |operation| be the operation used to declare the indexed property setter.
    1.  Let |T| be the type of the second argument of |operation|.
    1.  Let |value| be the result of [=converted to an IDL value|converting=] |V| to an IDL value of type |T|.
    1.  If |operation| was defined without an [=identifier=], then:
        1.  If |creating| is true, then perform the steps listed in the interface description to
            [=set the value of a new indexed property=]
            with |index| as the index and |value| as the value.
        1.  Otherwise, |creating| is false.  Perform the steps listed in the interface description to
            [=set the value of an existing indexed property=]
            with |index| as the index and |value| as the value.
    1.  Otherwise, |operation| was defined with an identifier.  Perform the steps listed in the description of
        |operation| with |index| and |value| as the two argument values.
</ol>


<h4 id="invoking-named-setter">Invoking a platform object named property setter</h4>

To <dfn id="invoke-named-setter" export lt="invoke the named property setter">invoke a named property setter</dfn> with property name |P| and ECMAScript value
|V|, the following steps must be performed:

<ol class="algorithm">
    1.  Let |creating| be true if |P| is not a [=supported property name=], and false otherwise.
    1.  Let |operation| be the operation used to declare the named property setter.
    1.  Let |T| be the type of the second argument of |operation|.
    1.  Let |value| be the result of [=converted to an IDL value|converting=] |V| to an IDL value of type |T|.
    1.  If |operation| was defined without an [=identifier=], then:
        1.  If |creating| is true, then perform the steps listed in the interface description to
            [=set the value of a new named property=]
            with |P| as the name and |value| as the value.
        1.  Otherwise, |creating| is false.  Perform the steps listed in the interface description to
            [=set the value of an existing named property=]
            with |P| as the name and |value| as the value.
    1.  Otherwise, |operation| was defined with an identifier.  Perform the steps listed in the description of
        |operation| with |index| and |value| as the two argument values.
</ol>


<h4 id="platformobjectset">Platform object \[[Set]] method</h4>

The internal \[[Set]] method of every
[=platform object=] |O| that implements an [=interface=]
which [=support indexed properties|supports indexed=] or
[=support named properties|named properties=]
must behave as follows when called
with property name |P|, value |V|, and
ECMAScript language value |Receiver|:

<ol class="algorithm">
    1.  If |O| and |Receiver| are the same object,
        then:
        1.  If |O| [=support indexed properties|supports indexed properties=], |P| is an [=array index property name=], and |O| implements an interface with an [=indexed property setter=], then:
            1.  <a href="#invoking-indexed-setter">Invoke the indexed
                property setter</a> with |P| and |V|.
            1.  Return <emu-val>true</emu-val>.
        
        1.  If |O| [=support named properties|supports named properties=], [=Type=](|P|) is String,
            |P| is not an [=array index property name=], and |O| implements an interface with a [=named property setter=], then:
            1.  <a href="#invoking-named-setter">Invoke the named
                property setter</a> with |P| and |V|.
            1.  Return <emu-val>true</emu-val>.
    1.  Let |ownDesc| be the result of invoking the [=The PlatformObjectGetOwnProperty abstract operation|PlatformObjectGetOwnProperty=]
        abstract operation with
        |O|, |P|, and <emu-val>true</emu-val> as
        arguments.
    1.  Perform steps 3-11 of the [=default [[Set]] internal method=].
</ol>


<h4 id="defineownproperty">Platform object \[[DefineOwnProperty]] method</h4>

The internal \[[DefineOwnProperty]] method of every
[=platform object=] |O| that implements an [=interface=]
which [=support indexed properties|supports indexed=] or
[=support named properties|named properties=]
must behave as follows when called with property name |P|,
Property Descriptor |Desc| and boolean flag |Throw|.

<ol class="algorithm">
    1.  If |O| [=support indexed properties|supports indexed properties=] and
        |P| is an [=array index property name=], then:
        1.  If the result of calling [=IsDataDescriptor=](|Desc|) is <emu-val>false</emu-val>, then <a href="#Reject">Reject</a>.
        1.  If |O| does not implement an interface with an [=indexed property setter=], then <a href="#Reject">Reject</a>.
        1.  <a href="#invoking-indexed-setter">Invoke the indexed
            property setter</a> with |P| and |Desc|.\[[Value]].
        1.  Return <emu-val>true</emu-val>.
    
    1.  If |O| [=support named properties|supports named properties=],
        |O| does not implement an [=interface=] with the
        [{{Global}}] or [{{PrimaryGlobal}}] [=extended attribute=]
        and |P| is not an [=unforgeable property name=]
        of |O|, then:
        1.  Let |creating| be true if |P| is not a [=supported property name=], and false otherwise.
        
        1.  If |O| implements an interface with the [{{OverrideBuiltins}}]
            [=extended attribute=] or |O| does not have an own property
            named |P|, then:
            1.  If |creating| is false and |O| does not implement an interface with a [=named property setter=], then <a href="#Reject">Reject</a>.
            1.  If |O| implements an interface with a [=named property setter=], then:
                1.  If the result of calling [=IsDataDescriptor=](|Desc|) is <emu-val>false</emu-val>, then <a href="#Reject">Reject</a>.
                1.  <a href="#invoking-named-setter">Invoke the named
                    property setter</a> with |P| and
                    |Desc|.\[[Value]].
                1.  Return <emu-val>true</emu-val>.
    
    1.  If |O| does not implement an [=interface=] with the
        [{{Global}}] or [{{PrimaryGlobal}}] [=extended attribute=],
        then set |Desc|.\[[Configurable]] to <emu-val>true</emu-val>.
    1.  Call the [=default [[DefineOwnProperty]] internal method=] on |O| passing |P|, |Desc|, and |Throw| as arguments.
</ol>


<h4 id="delete">Platform object \[[Delete]] method</h4>

The internal \[[Delete]] method of every
[=platform object=] |O| that implements an [=interface=]
which [=support indexed properties|supports indexed=] or
[=support named properties|named properties=]
must behave as follows when called with property name |P|.

<ol class="algorithm">
    1.  If |O| [=support indexed properties|supports indexed properties=] and
        |P| is an [=array index property name=], then:
        1.  Let |index| be the result of calling [=ToUint32=](|P|).
        1.  If |index| is not a [=supported property indices|supported property index=], then return <emu-val>true</emu-val>.
        1.  Return <emu-val>false</emu-val>.
    
    1.  If |O| [=support named properties|supports named properties=],
        |O| does not implement an [=interface=] with the
        [{{Global}}] or [{{PrimaryGlobal}}] [=extended attribute=]
        and the result of calling the [=named property visibility algorithm=]
        with property name |P| and object |O| is true, then:
        1.  If |O| does not implement an interface with a [=named property deleter=], then <emu-val>false</emu-val>.
        1.  Let |operation| be the operation used to declare the named property deleter.
        1.  If |operation| was defined without an [=identifier=], then:
            1.  Perform the steps listed in the interface description to
                [=delete an existing named property=]
                with |P| as the name.
            1.  If the steps indicated that the deletion failed, then <emu-val>false</emu-val>.
        1.  Otherwise, |operation| was defined with an identifier:
            1.  Perform the steps listed in the description of |operation| with |P| as the only argument value.
            1.  If |operation| was declared with a [=return type=] of {{boolean}}
                and the steps returned <emu-val>false</emu-val>, then <emu-val>false</emu-val>.
        1.  Return <emu-val>true</emu-val>.
    
    1.  If |O| has an own property with name |P|, then:
        1.  If the property is not configurable, then <emu-val>false</emu-val>.
        1.  Otherwise, remove the property from |O|.
    1.  Return <emu-val>true</emu-val>.
</ol>


<h4 id="call">Platform object \[[Call]] method</h4>

The internal \[[Call]] method of every
[=platform object=] |O| that implements an [=interface=]
|I| with at least one [=legacy caller=]
must behave as follows, assuming
|arg|<sub>0..|n|−1</sub> is the list of argument
values passed to \[[Call]]:

<ol class="algorithm">
    1.  Initialize |S| to the [=effective overload set=]
        for legacy callers on |I| and with argument count |n|.
    1.  Let &lt;|operation|, |values|&gt; be the result of passing |S| and
        |arg|<sub>0..|n|−1</sub> to the
        [=overload resolution algorithm=].
    1.  Perform the actions listed in the description of the legacy caller |operation| with
        |values| as the argument values.
    1.  Return the result of [=converted to an ECMAScript value|converting=]
        the return value from those actions to an ECMAScript value of the type
        |operation| is declared to return (or <emu-val>undefined</emu-val>
        if |operation| is declared to return {{void}}).
</ol>


<h4 id="property-enumeration">Property enumeration</h4>

This document does not define a complete property enumeration order
for all [=platform objects=] implementing [=interfaces=]
(or for <a href="#es-exception-objects">platform objects representing exceptions</a>).
However, if a platform object implements an interface that
[=support indexed properties|supports indexed=] or
[=support named properties|named properties=], then
properties on the object must be
enumerated in the following order:

1.  If the object [=support indexed properties|supports indexed properties=], then
    the object’s [=supported property indices=] are
    enumerated first, in numerical order.
1.  If the object [=support named properties|supports named properties=] and doesn't implement an [=interface=] with the
    [{{LegacyUnenumerableNamedProperties}}]
    [=extended attribute=], then
    the object’s [=supported property names=] that
    are visible according to the [=named property visibility algorithm=]
    are enumerated next, in the order given in the definition of the set of supported property names.
1.  Finally, any enumerable own properties or properties from the object’s prototype chain are then enumerated,
    in no defined order.

Note: Future versions of the ECMAScript specification may define a total order for property enumeration.


<h3 id="es-user-objects">User objects implementing callback interfaces</h3>

As described in [[#idl-objects]],
[=callback interfaces=] can be
implemented in script by an ECMAScript object.
The following cases determine whether and how a given object
is considered to be a user object implementing a callback interface:

*   If the interface is a [=single operation callback interface=]
    (defined below) then any object apart from a native <emu-val>RegExp</emu-val>
    object is considered to implement the interface.
    The implementation of the operation (or set of overloaded operations) is
    as follows:
    *   If the object is [=callable=],
        then the implementation of the operation (or set of overloaded operations) is
        the callable object itself.
    *   Otherwise, the object is not [=callable=].
        The implementation of the operation (or set of overloaded operations) is
        the result of invoking the internal \[[Get]] method
        on the object with a property name that is the [=identifier=]
        of the operation.
*   Otherwise, the interface is not a [=single operation callback interface=].
    Any object that is not a native
    <emu-val>RegExp</emu-val> object is considered to implement the interface.
    For each operation declared on the interface with a given [=identifier=], the implementation
    is the result of invoking \[[Get]] on the object with a
    property name that is that identifier.

Note that ECMAScript objects need not have
properties corresponding to [=constants=]
on them to be considered as [=user objects=]
implementing [=interfaces=] that happen
to have constants declared on them.

A <dfn id="dfn-single-operation-callback-interface" export>single operation callback interface</dfn> is
a [=callback interface=] that:

*   is not declared to [=inherit=] from another interface,
*   has no [=attributes=], and
*   has one or more [=regular operations=] that all have the same [=identifier=],
    and no others.

To <dfn>call a user object's operation</dfn>, given a [=Interface types|callback interface type=] value |value|,
sometimes-optional operation name |opName|, list of argument values
|arg|<sub>0..|n|−1</sub> each of which is either an IDL value or the
special value “missing” (representing a missing optional argument), and optional <dfn id="dfn-callback-this-value" export>callback this value</dfn>
|thisArg|, perform the following steps. These steps will either return an IDL
value or throw an exception.

<ol class="algorithm">
    1.  Let |completion| be an uninitialized variable.
    
    1.  If |thisArg| was not given, let |thisArg| be <emu-val>undefined</emu-val>.
    
    1.  Let |O| be the ECMAScript object corresponding to |value|.
    
    1.  Let |realm| be |O|'s [=associated Realm=].
    
    1.  Let |settings| be |realm|'s [=settings object=].
    
    1.  [=Prepare to run script=] with |settings|.
    
    1.  Determine the implementation of the operation, |X|:
        
        1.  If |value|'s interface is a [=single operation callback interface=] and [=!=] [=IsCallable=](|O|) is true, then set
            |X| to |O|.
        
        1.  Otherwise, |opName| must be supplied:
            1.  Let |getResult| be [=Get=](|O|,
                |opName|).
            
            1.  If |getResult| is an abrupt completion, set |completion|
                to |getResult| and jump to the step labeled <a href="#call-user-object-operation-return"><i>return</i></a>.
            
            1.  Set |X| to |getResult|.\[[Value]].
    
    1.  If [=!=] [=IsCallable=](|X|) is <emu-val>false</emu-val>,
        then set |completion| to a new [=Completion=]{\[[Type]]: throw, \[[Value]]: a
        newly created <emu-val>TypeError</emu-val> object, \[[Target]]: empty}, and jump
        to the step labeled <a href="#call-user-object-operation-return"><i>return</i></a>.
    
    1.  If |value|'s interface is not a [=single operation callback interface=],
        or if [=!=] [=IsCallable=](|O|) is <emu-val>false</emu-val>,
        set |thisArg| to |O| (overriding the provided value).
    
    1.  Let |esArgs| be an empty List of ECMAScript values.
    
    1.  Let |i| be 0.
    
    1.  Let |count| be 0.
    
    1.  While |i| &lt; |n|:
        
        1.  If |arg|<sub>|i|</sub> is the special value “missing”, then
            append <emu-val>undefined</emu-val> to |esArgs|.
        
        1.  Otherwise, |arg|<sub>|i|</sub> is an IDL value:
            
            1.  Let |convertResult| be the result of [=converted to an ECMAScript value|converting=]
                |arg|<sub>|i|</sub> to an ECMAScript value.
            
            1.  If |convertResult| is an abrupt completion, set |completion|
                to |convertResult| and jump to the step labeled <a href="#call-user-object-operation-return"><i>return</i></a>.
            
            1.  Append |convertResult|.\[[Value]] to |esArgs|.
            
            1.  Set |count| to |i| + 1.
        
        1.  Set |i| to |i| + 1.
    
    1.  Truncate |esArgs| to have length |count|.
    
    1.  Let |callResult| be [=Call=](|X|, |thisArg|,
        |esArgs|).
    
    1.  If |callResult| is an abrupt completion, set |completion| to
        |callResult| and jump to the step labeled <a href="#call-user-object-operation-return"><i>return</i></a>.
    
    1.  Set |completion| to the result of [=converted to an IDL value|converting=]
        |callResult|.\[[Value]] to an IDL value of the same type as the operation’s
        return type.
    
    1.  <i id="call-user-object-operation-return">Return:</i> at this
        point |completion| will be set to an ECMAScript completion value.
        
        1.  [=Clean up after running script=] with |settings|.
        
        1.  If |completion| is a normal completion, return
            |completion|.
        
        1.  If |completion| is an abrupt completion and the operation has a [=return type=] that is <em>not</em> a <a href="#idl-promise">promise type</a>, return |completion|.
        
        1.  Let |reject| be the initial value of [=%Promise%=].reject.
        
        1.  Let |rejectedPromise| be the result of calling |reject| with
            [=%Promise%=] as the <emu-val>this</emu-val> value and
            |completion|.\[[Value]] as the single argument value.
        
        1.  Return the result of [=converted to an IDL value|converting=]
            |rejectedPromise| to the operation's return type.
</ol>

To <dfn export>get a user object's attribute value</dfn>, given a [=Interface types|callback interface type=] value |object|
and attribute name |attributeName|, perform the following steps. These steps
will either return an IDL value or throw an exception.

<ol class="algorithm">
    1.  Let |completion| be an uninitialized variable.
    
    1.  Let |O| be the ECMAScript object corresponding to |object|.
    
    1.  Let |realm| be |O|'s [=associated Realm=].
    
    1.  Let |settings| be |realm|'s [=settings object=].
    
    1.  [=Prepare to run script=] with |settings|.
    
    1.  Let |getResult| be [=Get=](|O|, |attributeName|).
    
    1.  If |getResult| is an abrupt completion, set |completion| to
        |getResult| and jump to the step labeled <a href="#get-user-object-attribute-return"><i>return</i></a>.
    
    1.  Set |completion| to the result of [=converted to an IDL value|converting=]
        |getResult|.\[[Value]] to an IDL value of the same type as the attribute's
        type.
    
    1.  <i id="get-user-object-attribute-return">Return:</i> at this
        point |completion| will be set to an ECMAScript completion value.
        
        1.  [=Clean up after running script=] with |settings|.
        
        1.  If |completion| is a normal completion, return
            |completion|.
        
        1.  If |completion| is an abrupt completion and the attribute's type is
            <em>not</em> a <a href="#idl-promise">promise type</a>, return
            |completion|.
        
        1.  Let |reject| be the initial value of [=%Promise%=].reject.
        
        1.  Let |rejectedPromise| be the result of calling |reject| with
            [=%Promise%=] as the <emu-val>this</emu-val> value and
            |completion|.\[[Value]] as the single argument value.
        
        1.  Return the result of [=converted to an IDL value|converting=]
            |rejectedPromise| to the attribute's type.
</ol>

To <dfn export>set a user object's attribute value</dfn>, given a [=Interface types|callback interface type=] value
|object|, attribute name |attributeName|, and IDL value
|value|, perform the following steps. These steps will not return anything, but
could throw an exception.

<ol class="algorithm">
    1.  Let |completion| be an uninitialized variable.
    
    1.  Let |O| be the ECMAScript object corresponding to |object|.
    
    1.  Let |realm| be |O|'s [=associated Realm=].
    
    1.  Let |settings| be |realm|'s [=settings object=].
    
    1.  [=Prepare to run script=] with |settings|.
    
    1.  Let |convertResult| be the result of [=converted to an ECMAScript value|converting=] |value| to an
        ECMAScript value.
    
    1.  If |convertResult| is an abrupt completion, set |completion| to
        |convertResult| and jump to the step labeled <a href="#set-user-object-attribute-return"><i>return</i></a>.
    
    1.  Set |completion| to [=Set=](|O|, |attributeName|,
        |convertResult|.\[[Value]], <emu-val>true</emu-val>).
    
    1.  <i id="set-user-object-attribute-return">Return:</i> at this
        point |completion| will be set to an ECMAScript completion value, which is
        either an abrupt completion or a normal completion for the value <emu-val>true</emu-val> (as returned by [=Set=]).
        
        1.  [=Clean up after running script=] with |settings|.
        
        1.  If |completion| is an abrupt completion, return
            |completion|.
        
        1.  Return [=NormalCompletion=]({{void}}).
</ol>


<h3 id="es-invoking-callback-functions">Invoking callback functions</h3>

An ECMAScript [=callable=] object that is being
used as a [=callback function=] value is
called in a manner similar to how [=operations=]
on [=user objects=] are called (as
described in the previous section).

To <dfn export>invoke</dfn> a [=callback function type=] value |callable| with
a list of arguments |arg|<sub>0..|n|−1</sub>, each of which is either
an IDL value or the special value “missing” (representing a missing optional argument),
and with optional [=callback this value=] |thisArg|, perform the following steps. These steps will either
return an IDL value or throw an exception.

<ol class="algorithm">
    1.  Let |completion| be an uninitialized variable.
    
    1.  If |thisArg| was not given, let |thisArg| be <emu-val>undefined</emu-val>.
    
    1.  Let |F| be the ECMAScript object corresponding to |value|.
    
    1.  If [=!=] [=IsCallable=](|F|) is <emu-val>false</emu-val>:
        
        1.  If the callback function's return type is {{void}},
            return.
            
            Note: This is only possible when the callback function came from an attribute
            marked with [{{TreatNonObjectAsNull}}].
            
        1.  Return the result of [=converted to an IDL value|converting=] <emu-val>undefined</emu-val> to the callback function's return type.
    
    1.  Let |realm| be |F|'s [=associated Realm=].
    
    1.  Let |settings| be |realm|'s [=settings object=].
    
    1.  [=Prepare to run script=] with |settings|.
    
    1.  Let |esArgs| be an empty List of ECMAScript values.
    
    1.  Let |i| be 0.
    
    1.  Let |count| be 0.
    
    1.  While |i| &lt; |n|:
        
        1.  If |arg|<sub>|i|</sub> is the special value “missing”, then
            append <emu-val>undefined</emu-val> to |esArgs|.
        
        1.  Otherwise, |arg|<sub>|i|</sub> is an IDL value:
            
            1.  Let |convertResult| be the result of [=converted to an ECMAScript value|converting=]
                |arg|<sub>|i|</sub> to an ECMAScript value.
            
            1.  If |convertResult| is an abrupt completion, set |completion|
                to |convertResult| and jump to the step labeled <a href="#invoke-return"><i>return</i></a>.
            
            1.  Append |convertResult|.\[[Value]] to |esArgs|.
            
            1.  Set |count| to |i| + 1.
        
        1.  Set |i| to |i| + 1.
    
    1.  Truncate |esArgs| to have length |count|.
    
    1.  Let |callResult| be [=Call=](|X|, |thisArg|,
        |esArgs|).
    
    1.  If |callResult| is an abrupt completion, set |completion| to
        |callResult| and jump to the step labeled <a href="#invoke-return"><i>return</i></a>.
    
    1.  Set |completion| to the result of [=converted to an IDL value|converting=]
        |callResult|.\[[Value]] to an IDL value of the same type as the operation’s
        return type.
    
    1.  <i id="invoke-return">Return:</i> at this
        point |completion| will be set to an ECMAScript completion value.
        
        1.  [=Clean up after running script=] with |settings|.
        
        1.  If |completion| is a normal completion, return
            |completion|.
        
        1.  If |completion| is an abrupt completion and the callback function has a
            [=return type=] that is <em>not</em> a <a href="#idl-promise">promise type</a>, return |completion|.
        
        1.  Let |reject| be the initial value of [=%Promise%=].reject.
        
        1.  Let |rejectedPromise| be the result of calling |reject| with
            [=%Promise%=] as the <emu-val>this</emu-val> value and
            |completion|.\[[Value]] as the single argument value.
        
        1.  Return the result of [=converted to an IDL value|converting=]
            |rejectedPromise| to the callback function's return type.
</ol>


<h3 id="es-exceptions">Exceptions</h3>

There must exist a property on the ECMAScript global object
whose name is “DOMException” and value is an object called the
<dfn id="dfn-DOMException-constructor-object" for="DOMException" export>DOMException constructor object</dfn>,
which provides access to legacy DOMException code constants and allows construction of
DOMException instances.
The property has the attributes <span class="descriptor">{ \[[Writable]]: <emu-val>true</emu-val>, \[[Enumerable]]: <emu-val>false</emu-val>, \[[Configurable]]: <emu-val>true</emu-val> }</span>.


<h4 id="es-DOMException-constructor-object">DOMException constructor object</h4>

The DOMException constructor object must be a [=function object=]
but with a \[[Prototype]] value of [=%Error%=].

For every legacy code listed in the <a href="#dfn-error-names-table">error names table</a>,
there must be a property on the DOMException constructor object
whose name and value are as indicated in the table.  The property has
attributes <span class="descriptor">{ \[[Writable]]: <emu-val>false</emu-val>, \[[Enumerable]]: <emu-val>true</emu-val>, \[[Configurable]]: <emu-val>false</emu-val> }</span>.

The DOMException constructor object must also have a property named
“prototype” with attributes
<span class="descriptor">{ \[[Writable]]: <emu-val>false</emu-val>, \[[Enumerable]]: <emu-val>false</emu-val>, \[[Configurable]]: <emu-val>false</emu-val> }</span>
whose value is an object called the <dfn id="dfn-DOMException-prototype-object" for="DOMException" export>DOMException prototype object</dfn>.
This object also provides access to the legacy code values.


<h5 id="es-DOMException-call">DOMException(message, name)</h5>

When the DOMException function is called with arguments |message| and |name|, the following steps are taken:

<ol class="algorithm">
    1.  Let |F| be the active function object.
    1.  If NewTarget is <emu-val>undefined</emu-val>, let |newTarget| be |F|, else let |newTarget| be NewTarget.
    1.  Let |super| be |F|.\[[GetPrototypeOf]]().
    1.  [=ReturnIfAbrupt=](|super|).
    1.  If [=IsConstructor=](|super|) is <emu-val>false</emu-val>, throw a <emu-val>TypeError</emu-val> exception.
    1.  Let |O| be [=Construct=](|super|, «|message|», |newTarget|).
    1.  If |name| is not <emu-val>undefined</emu-val>, then
        1.  Let |name| be [=ToString=](|name|).
        1.  Let |status| be [=DefinePropertyOrThrow=](|O|, <code>"name"</code>, PropertyDescriptor<span class="descriptor">{\[[Value]]: |name|, \[[Writable]]: <emu-val>true</emu-val>, \[[Enumerable]]: <emu-val>false</emu-val>, \[[Configurable]]: <emu-val>true</emu-val>}</span>).
        1.  [=ReturnIfAbrupt=](|status|).
        1.  Let |code| be the legacy code indicated in the [=error names table=] for error name |name|, or <emu-val>0</emu-val> if there is none.
        1.  Let |status| be [=DefinePropertyOrThrow=](|O|, <code>"code"</code>, PropertyDescriptor<span class="descriptor">{\[[Value]]: |code|, \[[Writable]]: <emu-val>true</emu-val>, \[[Enumerable]]: <emu-val>false</emu-val>, \[[Configurable]]: <emu-val>true</emu-val>}</span>).
        1.  [=ReturnIfAbrupt=](|status|).
    1.  Return |O|.
</ol>


<h4 id="es-DOMException-prototype-object">DOMException prototype object</h4>

The DOMException prototype object must
have an internal \[[Prototype]] property whose value is [=%ErrorPrototype%=].

The [=class string=] of the
[=DOMException prototype object=]
is “DOMExceptionPrototype”.

There must be a property named “constructor”
on the DOMException prototype object with attributes
<span class="descriptor">{ \[[Writable]]: <emu-val>true</emu-val>, \[[Enumerable]]: <emu-val>false</emu-val>, \[[Configurable]]: <emu-val>true</emu-val> }</span>
and whose value is the [=DOMException constructor object=].

For every legacy code listed in the <a href="#dfn-error-names-table">error names table</a>,
there must be a property on the DOMException prototype object
whose name and value are as indicated in the table.  The property has
attributes <span class="descriptor">{ \[[Writable]]: <emu-val>false</emu-val>, \[[Enumerable]]: <emu-val>true</emu-val>, \[[Configurable]]: <emu-val>false</emu-val> }</span>.


<h3 id="es-exception-objects" dfn>Exception objects</h3>

[=Simple exceptions=] are represented
by native ECMAScript objects of the corresponding type.

[=DOMExceptions=] are represented by
[=platform objects=] that inherit from
the [=DOMException prototype object=].

Every platform object representing a DOMException in ECMAScript is associated with a global environment, just
as the [=initial objects=] are.
When an exception object is created by calling the [=DOMException constructor object=],
either normally or as part of a <code>new</code> expression, then the global environment
of the newly created object is associated with must be the same as for the
[=DOMException constructor object=] itself.

The value of the internal \[[Prototype]]
property of a [=DOMException=]
object must be the [=DOMException prototype object=]
from the global environment the exception object is associated with.

The [=class string=]
of a [=DOMException=] object
must be “DOMException”.

Note: The intention is for DOMException objects to be just like the other
various native <emu-val>Error</emu-val> objects that the
ECMAScript specification defines, apart from responding differently
to being passed to Object.prototype.toString and it having a “code” property.
If an implementation places non-standard properties on native
<emu-val>Error</emu-val> objects, exposing for example
stack traces or error line numbers, then these ought to be exposed
on exception objects too.


<h3 id="es-creating-throwing-exceptions">Creating and throwing exceptions</h3>

First, we define the <dfn id="dfn-current-global-environment" export>current global environment</dfn>
as the result of running the following algorithm:

<ol class="algorithm">
    1.  Let |F| be the <emu-val>Function</emu-val> object used
        as the <emu-val>this</emu-val> value in the top-most call
        on the ECMAScript call stack where |F| corresponds to an IDL
        [=attribute=],
        [=operation=],
        <a href="#idl-indexed-properties">indexed property</a>,
        <a href="#idl-named-properties">named property</a>,
        <a href="#Constructor">constructor</a>,
        [=named constructor=] or
        [=stringifier=].
    1.  If |F| corresponds to an attribute, operation or stringifier, then return
        the global environment associated with the
        [=interface=] that definition appears on.
    1.  Otherwise, if |F| corresponds to an indexed or named property, then return
        the global environment associated with the interface that
        the indexed or named property getter, setter or deleter was defined on.
    1.  Otherwise, if |F| is a named constructor for an interface, or is
        an [=interface object=] for an
        interface that is a constructor, then return the global environment
        associated with that interface.
    1.  Otherwise, |F| is an exception field getter. Return
        the global environment associated with the exception on which the
        exception field was defined.
</ol>

When a [=simple exception=] or
[=DOMException=]
|E| is to be [=created=],
with [=error name=] |N| and
optional user agent-defined message |M|,
the following steps must be followed:

<ol class="algorithm">
    1.  If |M| was not specified, let |M| be <emu-val>undefined</emu-val>. Otherwise, let it be the result of [=converted to an ECMAScript value|converting=] |M| to a <emu-val>String</emu-val> value.
    1.  Let |N| be the result of [=converted to an ECMAScript value|converting=] |N| to a <emu-val>String</emu-val> value.
    1.  Let |args| be a list of ECMAScript values.
        <dl class="switch">
             :  |E| is [=DOMException=]
             :: |args| is (<emu-val>undefined</emu-val>, |N|).
             :  |E| is a [=simple exception=]
             :: |args| is (|M|)
        </dl>
    1.  Let |G| be the [=current global environment=].
    1.  Let |X| be an object determined based on the type of |E|:
        <dl class="switch">
             :  |E| is [=DOMException=]
             :: |X| is the [=DOMException constructor object=]
                from the global environment |G|.
             :  |E| is a [=simple exception=]
             :: |X| is the constructor for the corresponding ECMAScript error
                from the global environment |G|.
        </dl>
    1.  Let |O| be the result of calling |X| as a function
        with |args| as the argument list.
    1.  Return |O|.
</ol>

When a [=simple exception=] or
[=DOMException=]
|E| is to be [=thrown=],
with [=error name=] |N| and
optional user agent-defined message |M|,
the following steps must be followed:

<ol class="algorithm">
    1.  Let |O| be the result of [=created|creating=]
        the specified exception |E| with [=error name=] |N| and
        optional user agent-defined message |M|.
    1.  Throw |O|.
</ol>

<div class="note">
    
    The above algorithms do not restrict [=Exception objects|platform objects representing exceptions=]
    propagating out of a <emu-val>Function</emu-val> to be
    ones that are associated with the global environment
    where that <emu-val>Function</emu-val> object originated.
    For example, consider the IDL:
    
    <pre class="idl-example example">
        interface A {
        
          /**
           * Calls computeSquareRoot on m, passing x as its argument.
           */
          double doComputation(MathUtils m, double x);
        };
        
        interface MathUtils {
          /**
           * If x is negative, throws a <a href="#notsupportederror">NotSupportedError</a>.  Otherwise, returns
           * the square root of x.
           */
          double computeSquareRoot(double x);
        };
    </pre>
    
    If we pass a <code class="idl">MathUtils</code> object from
    a different global environment to doComputation, then the exception
    thrown will be from that global environment:
    
    <pre highlight="js">
        var a = getA();                           // An A object from this global environment.
        var m = otherWindow.getMathUtils();       // A MathUtils object from a different global environment.
        
        a instanceof Object;                      // Evaluates to true.
        m instanceof Object;                      // Evaluates to false.
        m instanceof otherWindow.Object;          // Evaluates to true.
        
        try {
          a.doComputation(m, -1);
        } catch (e) {
          e instanceof DOMException;              // Evaluates to false.
          e instanceof otherWindow.DOMException;  // Evaluates to true.
        }
    </pre>
</div>

Any requirements in this document to throw an instance of an ECMAScript built-in
<emu-val>Error</emu-val> must use
the built-in from the [=current global environment=].


<h3 id="es-handling-exceptions">Handling exceptions</h3>

None of the algorithms or processing requirements in the
ECMAScript language binding catch ECMAScript exceptions.  Whenever
an ECMAScript <emu-val>Function</emu-val> is invoked due
to requirements in this section and that <emu-val>Function</emu-val>
ends due to an exception being thrown, that exception
must propagate to the caller, and if
not caught there, to its caller, and so on.

<div class="example">
    
    The following [=IDL fragment=]
    defines two [=interfaces=]
    and an [=exception=].
    The <code>valueOf</code> attribute on <code class="idl">ExceptionThrower</code>
    is defined to throw an exception whenever an attempt is made
    to get its value.
    
    <pre class="idl-example">
        interface Dahut {
          attribute DOMString type;
        };
        
        interface ExceptionThrower {
          // This attribute always throws a NotSupportedError and never returns a value.
          attribute long valueOf;
        };
    </pre>
    
    Assuming an ECMAScript implementation supporting this interface,
    the following code demonstrates how exceptions are handled:
    
    <pre highlight="js">
        var d = getDahut();              // Obtain an instance of Dahut.
        var et = getExceptionThrower();  // Obtain an instance of ExceptionThrower.
        
        try {
          d.type = { toString: function() { throw "abc"; } };
        } catch (e) {
          // The string "abc" is caught here, since as part of the conversion
          // from the native object to a string, the anonymous function
          // was invoked, and none of the \[[DefaultValue]], ToPrimitive or
          // ToString algorithms are defined to catch the exception.
        }
        
        try {
          d.type = { toString: { } };
        } catch (e) {
          // An exception is caught here, since an attempt is made to invoke
          // \[[Call]] on the native object that is the value of toString
          // property.
        }
        
        d.type = et;
        // An uncaught NotSupportedError DOMException is thrown here, since the
        // \[[DefaultValue]] algorithm attempts to get the value of the
        // "valueOf" property on the ExceptionThrower object.  The exception
        // propagates out of this block of code.
    </pre>
</div>


<h2 id="common">Common definitions</h2>

This section specifies some common definitions that all
[=conforming implementations=]
must support.


<h3 id="common-ArrayBufferView">ArrayBufferView</h3>

<pre class="idl-example example">
    typedef (Int8Array or Int16Array or Int32Array or
             Uint8Array or Uint16Array or Uint32Array or Uint8ClampedArray or
             Float32Array or Float64Array or DataView) <dfn id="ArrayBufferView" typedef>ArrayBufferView</dfn>;
</pre>

The {{ArrayBufferView}} typedef is used to represent
objects that provide a view on to an {{ArrayBuffer}}.


<h3 id="common-BufferSource">BufferSource</h3>

<pre class="idl-example example">typedef (ArrayBufferView or ArrayBuffer) <dfn id="BufferSource" typedef>BufferSource</dfn>;</pre>

The {{BufferSource}} typedef is used to represent objects
that are either themselves an {{ArrayBuffer}} or which
provide a view on to an {{ArrayBuffer}}.


<h3 id="common-DOMTimeStamp">DOMTimeStamp</h3>

<pre class="idl-example example">typedef unsigned long long <dfn id="DOMTimeStamp" typedef>DOMTimeStamp</dfn>;</pre>

The {{DOMTimeStamp}} type is used for representing
a number of milliseconds, either as an absolute time (relative to some epoch)
or as a relative amount of time.  Specifications that use this type will need
to define how the number of milliseconds is to be interpreted.


<h3 id="common-Function">Function</h3>

<pre class="idl-example example">callback <dfn id="Function" callback>Function</dfn> = any (any... arguments);</pre>

The {{Function}} [=callback function=]
type is used for representing function values with no restriction on what arguments
are passed to it or what kind of value is returned from it.


<h3 id="common-Function">VoidFunction</h3>

<pre class="idl-example example">callback <dfn id="VoidFunction" callback>VoidFunction</dfn> = void ();</pre>

The {{VoidFunction}} [=callback function=]
type is used for representing function values that take no arguments and do not
return any value.


<h2 id="extensibility">Extensibility</h2>

<i>This section is informative.</i>

Extensions to language binding requirements can be specified
using [=extended attributes=]
that do not conflict with those defined in this document.  Extensions for
private, project-specific use should not be included in
[=IDL fragments=]
appearing in other specifications.  It is recommended that extensions
that are required for use in other specifications be coordinated
with the group responsible for work on <cite>Web IDL</cite>, which
at the time of writing is the
<a href="http://www.w3.org/WebPlatform/WG/">W3C Web Platform Working Group</a>,
for possible inclusion in a future version of this document.

Extensions to any other aspect of the IDL language are
strongly discouraged.


<h2 id="referencing">Referencing this specification</h2>

<i>This section is informative.</i>

It is expected that other specifications that define Web platform interfaces
using one or more [=IDL fragments=]
will reference this specification.  It is suggested
that those specifications include a sentence such as the following,
to indicate that the IDL is to be interpreted as described in this
specification:

<blockquote>
    
    The IDL fragment in Appendix A of this specification must, in conjunction
    with the IDL fragments defined in this specification's normative references,
    be interpreted as required for <em>conforming sets of IDL fragments</em>, as described in the
    “Web IDL” specification. \[WEBIDL]
    
</blockquote>

In addition, it is suggested that the conformance class for user
agents in referencing specifications be linked to the
[=conforming implementation=] class from this specification:

<blockquote>
    
    A conforming FooML user agent must also be a
    <em>conforming implementation</em> of the IDL fragment in Appendix A
    of this specification, as described in the
    “Web IDL” specification. \[WEBIDL]
    
</blockquote>


<h2 id="acknowledgements">Acknowledgements</h2>

<i>This section is informative.</i>

The editor would like to thank the following people for contributing
to this specification:
Glenn Adams,
David Andersson,
L. David Baron,
Art Barstow,
Nils Barth,
Robin Berjon,
David Bruant,
Jan-Ivar Bruaroey,
Marcos Cáceres,
Giovanni Campagna,
Domenic Denicola,
Michael Dyck,
Brendan Eich,
João Eiras,
Gorm Haug Eriksen,
Sigbjorn Finne,
David Flanagan,
Aryeh Gregor,
Dimitry Golubovsky,
James Graham,
Aryeh Gregor,
Kartikaya Gupta,
Marcin Hanclik,
Jed Hartman,
Stefan Haustein,
Dominique Hazaël-Massieux,
Ian Hickson,
Björn Höhrmann,
Kyle Huey,
Lachlan Hunt,
Oliver Hunt,
Jim Jewett,
Wolfgang Keller,
Anne van Kesteren,
Olav Junker Kjær,
Magnus Kristiansen,
Takeshi Kurosawa,
Yves Lafon,
Travis Leithead,
Jim Ley,
Kevin Lindsey,
Jens Lindström,
Peter Linss,
呂康豪 (Kang-Hao Lu),
Kyle Machulis,
Mark Miller,
Ms2ger,
Andrew Oakley,
岡坂 史紀 (Shiki Okasaka),
Jason Orendorff,
Olli Pettay,
Simon Pieters,
Andrei Popescu,
François Remy,
Tim Renouf,
Alex Russell,
Takashi Sakamoto,
Doug Schepers,
Jonas Sicking,
Garrett Smith,
Geoffrey Sneddon,
Jungkee Song,
Josh Soref,
Maciej Stachowiak,
Anton Tayanovskyy,
Peter Van der Beken,
Jeff Walden,
Allen Wirfs-Brock,
Jeffrey Yasskin and
Collin Xu.

Special thanks also go to Sam Weinig for maintaining this document
while the editor was unavailable to do so.


<h2 id="idl-grammar" class="no-num">IDL grammar</h2>

This section defines an LL(1) grammar whose start symbol,
<emu-nt><a href="#prod-Definitions">Definitions</a></emu-nt>, matches an
entire [=IDL fragment=].

Each production in the grammar has on its right hand side either a
non-zero sequence of terminal and non-terminal symbols, or an
epsilon (ε) which indicates no symbols.  Symbols that begin with
an uppercase letter are non-terminal symbols.  Symbols within quotes
are terminal symbols that are matched with the exact text between
the quotes.  Symbols that begin with a lowercase letter are terminal
symbols that are matched by the regular expressions (using Perl 5 regular
expression syntax [[!PERLRE]]) as follows:

<table class="grammar data">
    <tr>
        <td id="prod-integer" class="sym">integer</td>
        <td><code class="regex">=</code></td>
        <td><code class="regex">/-?([1-9][0-9]*|0[Xx][0-9A-Fa-f]+|0[0-7]*)/</code></td>
    </tr>
    <tr>
        <td id="prod-float" class="sym">float</td>
        <td><code class="regex">=</code></td>
        <td><code class="regex">/-?(([0-9]+\.[0-9]*|[0-9]*\.[0-9]+)([Ee][+-]?[0-9]+)?|[0-9]+[Ee][+-]?[0-9]+)/</code></td>
    </tr>
    <tr>
        <td id="prod-identifier" class="sym">identifier</td>
        <td><code class="regex">=</code></td>
        <td><code class="regex">/_?[A-Za-z][0-9A-Z_a-z-]*/</code></td>
    </tr>
    <tr>
        <td id="prod-string" class="sym">string</td>
        <td><code class="regex">=</code></td>
        <td><code class="regex">/"[^"]*"/</code></td>
    </tr>
    <tr>
        <td id="prod-whitespace" class="sym">whitespace</td>
        <td><code class="regex">=</code></td>
        <td><code class="regex">/[\t\n\r ]+/</code></td>
    </tr>
    <tr>
        <td id="prod-comment" class="sym">comment</td>
        <td><code class="regex">=</code></td>
        <td><code class="regex">/\/\/.*|\/\*(.|\n)*?\*\//</code></td>
    </tr>
    <tr>
        <td id="prod-other" class="sym">other</td>
        <td><code class="regex">=</code></td>
        <td><code class="regex">/[^\t\n\r 0-9A-Za-z]/</code></td>
    </tr>
</table>

The tokenizer operates on a sequence of Unicode characters
[[!UNICODE]].
When tokenizing, the longest possible match must be used.  For example, if the input
text is “<span class="input">a1</span>”, it is tokenized as a single <emu-t><a href="#prod-identifier">identifier</a></emu-t>,
and not as a separate <emu-t><a href="#prod-identifier">identifier</a></emu-t> and <emu-t><a href="#prod-integer">integer</a></emu-t>.
If the longest possible match could match one of the above named terminal symbols or
one of the quoted terminal symbols from the grammar, it must be tokenized as the quoted
terminal symbol.  Thus, the input text “<span class="input">long</span>” is tokenized as the quoted terminal symbol
<emu-t>long</emu-t> rather than an <emu-t><a href="#prod-identifier">identifier</a></emu-t> called “long”,
and “<span class="input">.</span>” is tokenized as the quoted terminal symbol
<emu-t>.</emu-t> rather than an <emu-t><a href="#prod-other">other</a></emu-t>.

The IDL syntax is case sensitive, both for the quoted terminal symbols
used in the grammar and the values used for
<emu-t><a href="#prod-identifier">identifier</a></emu-t> terminals.  Thus, for
example, the input text “<span class="input">Const</span>” is tokenized as
an <emu-t><a href="#prod-identifier">identifier</a></emu-t> rather than the quoted
terminal symbol <emu-t>const</emu-t>, an
[=interface=] with
[=identifier=]
“A” is distinct from one named “a”, and an
[=extended attribute=]
<span class="xattr">[constructor]</span> will not be recognized as
the [{{Constructor}}]
extended attribute.

Implicitly, any number of <emu-t><a href="#prod-whitespace">whitespace</a></emu-t> and
<emu-t><a href="#prod-comment">comment</a></emu-t> terminals are allowed between every other terminal
in the input text being parsed.  Such <emu-t><a href="#prod-whitespace">whitespace</a></emu-t> and
<emu-t><a href="#prod-comment">comment</a></emu-t> terminals are ignored while parsing.

The following LL(1) grammar, starting with <emu-nt><a href="#prod-Definitions">Definitions</a></emu-nt>,
matches an [=IDL fragment=]:

<div data-fill-with="grammar-index"></div>

Note: The <emu-nt><a href="#prod-Other">Other</a></emu-nt>
non-terminal matches any single terminal symbol except for
<emu-t>(</emu-t>, <emu-t>)</emu-t>,
<emu-t>[</emu-t>, <emu-t>]</emu-t>,
<emu-t>{</emu-t>, <emu-t>}</emu-t>
and <emu-t>,</emu-t>.

While the <emu-nt><a href="#prod-ExtendedAttribute">ExtendedAttribute</a></emu-nt>
non-terminal matches any non-empty sequence of terminal symbols (as long as any
parentheses, square brackets or braces are balanced, and the
<emu-t>,</emu-t> token appears only within those balanced brackets),
only a subset of those
possible sequences are used by the [=extended attributes=]
defined in this specification — see
[[#idl-extended-attributes]]
for the syntaxes that are used by these extended attributes.


<h2 id="changes" class="no-num">Changes</h2>

<i>This section is informative.</i>

The following is a list of substantial changes to the document on each publication.
For the list of changes during the development of the First Edition of this
specification, see
<a href="http://heycam.github.io/webidl/v1.html#changes">that document's
Changes appendix</a>.

*   Fixed unions containing a sequence and a dictionary to try the
    sequence first when given an object, just like overload
    resolution does.
*   Removed support for <span class="xattr">[Constructor]</span> on dictionaries.
*   Added the <span class="xattr">[LenientSetter]</span> extended attribute.
*   Added the <span class="xattr">[SecureContext]</span> extended attribute.
*   Changed from <span class="xattr">[Unscopeable]</span> to
    <span class="xattr">[Unscopable]</span> to match ES6 better.
*   Removed the term "unenumerable" and its associated prose and replaced it by the
    extended attribute [LegacyUnenumerableNamedProperties].
*   Allowed object internal methods to be overridden by other specifications.
*   Added some more parameters to the “perform a security check” hook.
*   Defined the “name” property for all <emu-val>Function</emu-val>
    objects (including those for operations and attribute getters and setters).
*   Removed the Date type.
*   Disallowed “length” and “name” from being used as identifiers of
    constants.
*   Added a <a interface lt="FrozenArray">FrozenArray&lt;|T|&gt;</a> type.
*   Renamed <span class="xattr">[ArrayClass]</span> to <span class="xattr">[LegacyArrayClass]</span>.
*   Removed <code class="idl">T[]</code> array types.
*   Allowed <span class="xattr">[NewObject]</span> to be used on things with
    a promise type.
*   Fix various cases in which maplike/setlike were operating on the wrong objects.
    
    Disallow maplike, setlike and iterable declarations from appearing more than
    once on an interface and its inherited and consequential interfaces.
    Also disallow the relevant restricted member names (such as “entries” and “values”)
    on the inherited and consequential interfaces.
    
*   Allowed stringifier attributes to have type {{USVString}}.
*   Gave interface objects, named constructors, and dictionary
    constructors a "name" property to match ES6.
*   Made the "length" property on dictionary constructors
    configurable.
*   Added types for {{ArrayBuffer}}, {{DataView}}
    and typed array objects.
*   Added {{USVString}} and allowed string literals in IDL to
    be used to give values for all string-typed optional argument and dictionary
    member default values.
*   Made sequences distinguishable from dictionaries, callback
    functions, and all interface types.
*   Removed IDL exceptions, baked in {{DOMException}},
    and added {{Error!!interface}} and {{DOMException}}
    as types.
*   Removed <span class="xattr">[MapLike]</span> and added
    iterable, maplike and setlike declarations.
*   Removed the custom Object.prototype.toString definition and instead
    defined class strings to influence the @@toStringTag property
    on objects.
*   Added the <span class="xattr">[Unscopeable]</span> extended attribute.
*   Rewrote ES to IDL sequence conversion so that any iterable is
    convertible to a sequence.
*   Added grammar production for <a interface lt="Promise">Promise&lt;|T|&gt;</a> types
    and allowed |T| to be {{void}}.
*   Added a definition to "initialize an object from an iterable",
    which behaves like the <emu-val>Map</emu-val> constructor.
*   Added a default value <code>[]</code> that can be used for
    sequence-typed operation argument default values and
    dictionary member default values.
*   Added promise types.
*   Added the <span class="xattr">[NewObject]</span> and
    <span class="xattr">[SameObject]</span> extended attributes.
*   Allowed <span class="xattr">[Constructor]</span> to be specified
    on dictionaries.
*   Added a <emu-val>RegExp</emu-val> type.
*   Added iterators that can be declared on interfaces.
*   Added an @@iterator method to objects with indexed
    properties.
*   Updated to ECMAScript 6th Edition.
*   Added serializers.
*   Added a {{ByteString}} type, for representing
    8 bit strings without a particular encoding as ECMAScript
    <emu-val>String</emu-val> values.
*   Added static attributes.

*   Make it clear that an interface can't be exposed in a global
    where its parent interface is not exposed.
*   Allow dictionary-typed trailing-position operation arguments not to
    be optional, if and only if the dictionary type has a required
    dictionary member.
*   Added a platform object \[[Set]] internal method to handle
    named and indexed setters better.
*   Removed the concept of creators; setters are always also
    creators.
*   Disallowed an interface without [NoInterfaceObject]
    inheriting from a [NoInterfaceObject] interface.
*   Removed indexed deleters.
*   Made the prototype of an interface object of a non-root
    interface be the interface object of its ancestor interface.
*   Clarified the property attributes of the "prototype" property
    of non-callback interface objects.
*   Made the "length" property on interface objects and named
    constructors configurable.
*   Added a way to mark dictionary members as required.
*   Allowed hyphens in identifiers after the first character.
*   Fix <span class="xattr">[Exposed]</span> text to make it
    clear that the value on the interface, if any, is used as the
    value for its members by default.
*   Fixed the grammar for extended attributes that take an identifier list,
    such as <span class="xattr">[Exposed]</span>.
*   Add a term "unenumerable" to allow named properties to be exposed as
    properties with \[[Enumerable]] set to false.
*   Added the <span class="xattr">[Exposed]</span> and
    <span class="xattr">[PrimaryGlobal]</span> extended attributes and
    allowed an identifier to be used with <span class="xattr">[Global]</span>.
*   Removed <span class="xattr">[TreatUndefinedAs]</span>.
*   Renamed [TreatNonCallableAsNull] to [TreatNonObjectAsNull]
    and changed its semantics to allow any object.  Changed
    callback function invocation to be a no-op when the object is
    not callable, which can now happen in the
    [TreatNonObjectAsNull] case.
*   Changed the default this value for callbacks from null to undefined.
*   Removed the requirement for named properties objects to be function objects.
*   Disallowed properties from being defined on a named properties object.
*   Fixed infinite loop in named property visibility algorithm.
*   Made stringifiers and serializers not use \[[Get]] or \[[Call]]
    for the their attribute or operation delegated behavior.
*   Allowed trailing optional comma in enum lists.
*   Disallowed static interface members from being defined on a callback interface.
*   Added a hook to do a security check when invoking an operation
    or accessing an attribute.
*   Defined how callbacks influence the incumbent script.
*   Changed how callback functions are invoked to support missing
    optional arguments.
*   Renamed <span class="xattr">[NamedPropertiesObject]</span> to
    <span class="xattr">[Global]</span>, which now also causes
    properties for interface members to appear on the object
    itself rather than on the interface prototype object.
*   Split out {{boolean}} from the other
    primitive types.  Made {{boolean}},
    numeric types and {{DOMString}} distinguishable.
*   Required a getter to be present on an interface if it has a
    setter, creator or delete.
*   Extended <span class="xattr">[Unforgeable]</span> to apply to operations
    and interfaces.
*   Allowed all operation arguments to be specified as being optional and
    changed back to the behavior of <emu-val>undefined</emu-val>
    being treated as a missing optional argument value.  Modified the
    effective overload set and overload resolution algorithms to
    take this into account, as well as allowing an <emu-val>undefined</emu-val>
    value passed as the argument value at the distinguishing index to select the overload
    with an optional argument at that index.
    Also removed <span class="xattr">[TreatUndefinedAs=Missing]</span>.
*   Changed the ECMAScript to IDL dictionary conversion algorithm
    to treat a property with the value <emu-val>undefined</emu-val>
    as missing.
*   Removed the ability to put extended attributes after the
    <code>typedef</code> keyword, as that feature is unused.
*   Fixed the {{long long}} and {{unsigned long long}}
    conversion algorithms to correctly identify the range of contiguous,
    exactly, uniquely representable integers you can get from a <emu-val>Number</emu-val>.
*   Clarified that <emu-val>Function</emu-val> objects for
    operations and attribute getters and setters are distinct on each
    interface they are mixed in to using an implements statement,
    and that each copy of the <emu-val>Function</emu-val> works
    only on objects that implement the interface whose interface
    prototype object the <emu-val>Function</emu-val> object
    is on.
*   Mention the named properties object in the list of initial objects.
*   Added back a custom \[[HasInstance]] on interface objects to allow objects
    from other windows to be considered instanceof them.
*   Fixed conversion of <emu-val>Number</emu-val> values
    to {{any}} by using the
    conversion algorithm for {{unrestricted double}}.
*   Allowed an identifier to be “prototype” for any construct except
    constants and static operations.
*   Fixed a bug in the user object definition where the internal \[[Call]]
    method would be treated as the implementation of an operation even if
    the callback interface had more than one operation.
*   Further tweaked the overload resolution algorithm and union type conversion
    algorithm for consistency.
*   Lifted the restriction on <span class="xattr">[Unforgeable]</span> appearing
    on an IDL attribute if another interface inherits from the one the attribute
    is declared on, but required that the inheriting interface not have an
    attribute with the same identifier.
*   Made attribute setters throw if no argument was passed to them, instead of
    assuming <emu-val>undefined</emu-val>.
*   Prevented dictionaries from referencing themselves.
*   Made sequences, arrays and dictionaries undistingishable again, thereby allowing
    non-<emu-val>Array</emu-val> ECMAScript objects to be converted
    to sequence and array types.
*   Added a requirement to state what the values of an exception’s fields are
    when throwing it.
*   Changed the “length” property on <emu-val>Function</emu-val>
    objects for IDL operations to return the smallest number of required arguments.
*   Clarified that dictionaries may not be nullable when used as
    the type of an operation argument or dictionary member.
*   Specify the value of the “length” property on interface objects
    that do not have constructors.
*   Do not treat array index properties as named properties if an object supports
    both indexed and named properties.
*   Require that dictionary type arguments followed by optional arguments
    must also be optional, and that such optional arguments always are
    assumed to have a default value of an empty dictionary.  Also disallow
    dictionary types from being used inside nullable types and from being
    considered distinguishable from nullable types.
*   Always consider dictionary members with default values as present.
*   Tweak <span class="xattr">[Clamp]</span> algorithms for clarity.
*   Require exception objects to have \[[Class]] “Error” and suggest that they
    have any non-standard properties that native Error objects do.
*   Fixed a bug in the whitespace token regular expression.
*   Explicitly disallow dictionaries from being used inside union types
    as the type of an attribute or exception field.
*   Fixed a bug in the definition of distinguishability where a nullable
    union type and a non-nullable union type that has a nullable member type
    were considered distinguishable.
*   Disallowed callback interfaces from being used in implements statements.
*   Renamed “exception types” to “exception names”.
*   Disallowed non-callback interfaces from inheriting from callback interfaces.
*   Changed the algorithm for conversion from a platform object with indexed
    properties to a sequence type to use its internal knowledge of the
    set of property indexes rather than getting the "length" property, which
    may not even exist.
*   Added a warning to prefer the use of {{double}}
    to {{float}}, unless there are good
    reasons to choose the 32 bit type.
*   Changed the restriction on operation argument default values
    so that all optional arguments to the left of one with a
    default value must also have default values.  (Previously,
    this was to the right.)






<script>
    (function() {
        function wrap(s) { return "<pre class=grammar>" + s + "</pre>"; }
        var output = "";
        [].forEach.call(document.querySelectorAll("pre.grammar"), pre => {
            var html = pre.textContent.replace(/("[^"]+")|([a-zA-Z]+)|(:)/g, m => {
                if (/^"/.test(m)) { return "<emu-t>" + m.replace(/^"|"$/g, "") + "</emu-t>"; }
                if (/^(integer|float|identifier|string|whitespace|comment|other)$/.test(m)) {
                  return "<emu-t><a href=\"#prod-" + m + "\">" + m + "</a></emu-t>";
                }
                if (m == ":") { return "::"; }
                if (document.querySelector("#prod-" + m)) {
                  return "<emu-nt><a href=\"#prod-" + m + "\">" + m + "</a></emu-nt>";
                }
                return "<emu-nt>" + m + "</emu-nt>"
            });
            
            pre.innerHTML = html;
            var fillWith = document.querySelectorAll("div[data-fill-with=\"grammar-" + pre.id.replace("prod-", "") + "\"]");
            [].forEach.call(fillWith, div => div.innerHTML = wrap(html))
            
            if (!(/\bno-index\b/).test(pre.className)) {
              output += html + "\n";
            }
        });
        document.querySelector("div[data-fill-with=\"grammar-index\"]").innerHTML = wrap(output);
    })();
</script>
